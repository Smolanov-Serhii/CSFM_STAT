/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/common.js":
/*!********************************!*\
  !*** ./resources/js/common.js ***!
  \********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_0__, __WEBPACK_LOCAL_MODULE_0__exports;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar i, e, t;\n!function (e, t) {\n  \"use strict\";\n\n  \"object\" == ( false ? 0 : _typeof(module)) && \"object\" == _typeof(module.exports) ? module.exports = e.document ? t(e, !0) : function (e) {\n    if (!e.document) throw new Error(\"jQuery requires a window with a document\");\n    return t(e);\n  } : t(e);\n}(\"undefined\" != typeof window ? window : this, function (T, e) {\n  \"use strict\";\n\n  function m(e) {\n    return null != e && e === e.window;\n  }\n\n  var t = [],\n      i = Object.getPrototypeOf,\n      o = t.slice,\n      v = t.flat ? function (e) {\n    return t.flat.call(e);\n  } : function (e) {\n    return t.concat.apply([], e);\n  },\n      l = t.push,\n      s = t.indexOf,\n      n = {},\n      r = n.toString,\n      g = n.hasOwnProperty,\n      a = g.toString,\n      d = a.call(Object),\n      y = {},\n      b = function b(e) {\n    return \"function\" == typeof e && \"number\" != typeof e.nodeType;\n  },\n      C = T.document,\n      c = {\n    type: !0,\n    src: !0,\n    nonce: !0,\n    noModule: !0\n  };\n\n  function w(e, t, i) {\n    var n,\n        s,\n        r = (i = i || C).createElement(\"script\");\n    if (r.text = e, t) for (n in c) {\n      (s = t[n] || t.getAttribute && t.getAttribute(n)) && r.setAttribute(n, s);\n    }\n    i.head.appendChild(r).parentNode.removeChild(r);\n  }\n\n  function f(e) {\n    return null == e ? e + \"\" : \"object\" == _typeof(e) || \"function\" == typeof e ? n[r.call(e)] || \"object\" : _typeof(e);\n  }\n\n  var u = \"3.5.1\",\n      S = function S(e, t) {\n    return new S.fn.init(e, t);\n  };\n\n  function p(e) {\n    var t = !!e && \"length\" in e && e.length,\n        i = f(e);\n    return !b(e) && !m(e) && (\"array\" === i || 0 === t || \"number\" == typeof t && 0 < t && t - 1 in e);\n  }\n\n  S.fn = S.prototype = {\n    jquery: u,\n    constructor: S,\n    length: 0,\n    toArray: function toArray() {\n      return o.call(this);\n    },\n    get: function get(e) {\n      return null == e ? o.call(this) : e < 0 ? this[e + this.length] : this[e];\n    },\n    pushStack: function pushStack(e) {\n      e = S.merge(this.constructor(), e);\n      return e.prevObject = this, e;\n    },\n    each: function each(e) {\n      return S.each(this, e);\n    },\n    map: function map(i) {\n      return this.pushStack(S.map(this, function (e, t) {\n        return i.call(e, t, e);\n      }));\n    },\n    slice: function slice() {\n      return this.pushStack(o.apply(this, arguments));\n    },\n    first: function first() {\n      return this.eq(0);\n    },\n    last: function last() {\n      return this.eq(-1);\n    },\n    even: function even() {\n      return this.pushStack(S.grep(this, function (e, t) {\n        return (t + 1) % 2;\n      }));\n    },\n    odd: function odd() {\n      return this.pushStack(S.grep(this, function (e, t) {\n        return t % 2;\n      }));\n    },\n    eq: function eq(e) {\n      var t = this.length,\n          e = +e + (e < 0 ? t : 0);\n      return this.pushStack(0 <= e && e < t ? [this[e]] : []);\n    },\n    end: function end() {\n      return this.prevObject || this.constructor();\n    },\n    push: l,\n    sort: t.sort,\n    splice: t.splice\n  }, S.extend = S.fn.extend = function () {\n    var e,\n        t,\n        i,\n        n,\n        s,\n        r = arguments[0] || {},\n        a = 1,\n        o = arguments.length,\n        l = !1;\n\n    for (\"boolean\" == typeof r && (l = r, r = arguments[a] || {}, a++), \"object\" == _typeof(r) || b(r) || (r = {}), a === o && (r = this, a--); a < o; a++) {\n      if (null != (e = arguments[a])) for (t in e) {\n        i = e[t], \"__proto__\" !== t && r !== i && (l && i && (S.isPlainObject(i) || (n = Array.isArray(i))) ? (s = r[t], s = n && !Array.isArray(s) ? [] : n || S.isPlainObject(s) ? s : {}, n = !1, r[t] = S.extend(l, s, i)) : void 0 !== i && (r[t] = i));\n      }\n    }\n\n    return r;\n  }, S.extend({\n    expando: \"jQuery\" + (u + Math.random()).replace(/\\D/g, \"\"),\n    isReady: !0,\n    error: function error(e) {\n      throw new Error(e);\n    },\n    noop: function noop() {},\n    isPlainObject: function isPlainObject(e) {\n      return !(!e || \"[object Object]\" !== r.call(e)) && (!(e = i(e)) || \"function\" == typeof (e = g.call(e, \"constructor\") && e.constructor) && a.call(e) === d);\n    },\n    isEmptyObject: function isEmptyObject(e) {\n      for (var t in e) {\n        return !1;\n      }\n\n      return !0;\n    },\n    globalEval: function globalEval(e, t, i) {\n      w(e, {\n        nonce: t && t.nonce\n      }, i);\n    },\n    each: function each(e, t) {\n      var i,\n          n = 0;\n      if (p(e)) for (i = e.length; n < i && !1 !== t.call(e[n], n, e[n]); n++) {\n        ;\n      } else for (n in e) {\n        if (!1 === t.call(e[n], n, e[n])) break;\n      }\n      return e;\n    },\n    makeArray: function makeArray(e, t) {\n      t = t || [];\n      return null != e && (p(Object(e)) ? S.merge(t, \"string\" == typeof e ? [e] : e) : l.call(t, e)), t;\n    },\n    inArray: function inArray(e, t, i) {\n      return null == t ? -1 : s.call(t, e, i);\n    },\n    merge: function merge(e, t) {\n      for (var i = +t.length, n = 0, s = e.length; n < i; n++) {\n        e[s++] = t[n];\n      }\n\n      return e.length = s, e;\n    },\n    grep: function grep(e, t, i) {\n      for (var n = [], s = 0, r = e.length, a = !i; s < r; s++) {\n        !t(e[s], s) != a && n.push(e[s]);\n      }\n\n      return n;\n    },\n    map: function map(e, t, i) {\n      var n,\n          s,\n          r = 0,\n          a = [];\n      if (p(e)) for (n = e.length; r < n; r++) {\n        null != (s = t(e[r], r, i)) && a.push(s);\n      } else for (r in e) {\n        null != (s = t(e[r], r, i)) && a.push(s);\n      }\n      return v(a);\n    },\n    guid: 1,\n    support: y\n  }), \"function\" == typeof Symbol && (S.fn[Symbol.iterator] = t[Symbol.iterator]), S.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"), function (e, t) {\n    n[\"[object \" + t + \"]\"] = t.toLowerCase();\n  });\n\n  var h = function (i) {\n    function u(e, t) {\n      return e = \"0x\" + e.slice(1) - 65536, t || (e < 0 ? String.fromCharCode(65536 + e) : String.fromCharCode(e >> 10 | 55296, 1023 & e | 56320));\n    }\n\n    function n() {\n      T();\n    }\n\n    var e,\n        h,\n        w,\n        r,\n        s,\n        f,\n        p,\n        m,\n        x,\n        l,\n        d,\n        T,\n        C,\n        a,\n        S,\n        v,\n        o,\n        c,\n        g,\n        E = \"sizzle\" + +new Date(),\n        y = i.document,\n        k = 0,\n        b = 0,\n        $ = le(),\n        M = le(),\n        A = le(),\n        P = le(),\n        L = function L(e, t) {\n      return e === t && (d = !0), 0;\n    },\n        z = {}.hasOwnProperty,\n        t = [],\n        I = t.pop,\n        D = t.push,\n        O = t.push,\n        H = t.slice,\n        N = function N(e, t) {\n      for (var i = 0, n = e.length; i < n; i++) {\n        if (e[i] === t) return i;\n      }\n\n      return -1;\n    },\n        j = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n        q = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n        W = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + q + \"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n        B = \"\\\\[\" + q + \"*(\" + W + \")(?:\" + q + \"*([*^$|!~]?=)\" + q + \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + W + \"))|)\" + q + \"*\\\\]\",\n        R = \":(\" + W + \")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + B + \")*)|.*)\\\\)|)\",\n        F = new RegExp(q + \"+\", \"g\"),\n        G = new RegExp(\"^\" + q + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + q + \"+$\", \"g\"),\n        X = new RegExp(\"^\" + q + \"*,\" + q + \"*\"),\n        Y = new RegExp(\"^\" + q + \"*([>+~]|\" + q + \")\" + q + \"*\"),\n        V = new RegExp(q + \"|>\"),\n        _ = new RegExp(R),\n        U = new RegExp(\"^\" + W + \"$\"),\n        K = {\n      ID: new RegExp(\"^#(\" + W + \")\"),\n      CLASS: new RegExp(\"^\\\\.(\" + W + \")\"),\n      TAG: new RegExp(\"^(\" + W + \"|[*])\"),\n      ATTR: new RegExp(\"^\" + B),\n      PSEUDO: new RegExp(\"^\" + R),\n      CHILD: new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + q + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + q + \"*(?:([+-]|)\" + q + \"*(\\\\d+)|))\" + q + \"*\\\\)|)\", \"i\"),\n      bool: new RegExp(\"^(?:\" + j + \")$\", \"i\"),\n      needsContext: new RegExp(\"^\" + q + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + q + \"*((?:-\\\\d)?\\\\d*)\" + q + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n    },\n        Q = /HTML$/i,\n        J = /^(?:input|select|textarea|button)$/i,\n        Z = /^h\\d$/i,\n        ee = /^[^{]+\\{\\s*\\[native \\w/,\n        te = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n        ie = /[+~]/,\n        ne = new RegExp(\"\\\\\\\\[\\\\da-fA-F]{1,6}\" + q + \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\"),\n        se = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n        re = function re(e, t) {\n      return t ? \"\\0\" === e ? \"�\" : e.slice(0, -1) + \"\\\\\" + e.charCodeAt(e.length - 1).toString(16) + \" \" : \"\\\\\" + e;\n    },\n        ae = ye(function (e) {\n      return !0 === e.disabled && \"fieldset\" === e.nodeName.toLowerCase();\n    }, {\n      dir: \"parentNode\",\n      next: \"legend\"\n    });\n\n    try {\n      O.apply(t = H.call(y.childNodes), y.childNodes), t[y.childNodes.length].nodeType;\n    } catch (e) {\n      O = {\n        apply: t.length ? function (e, t) {\n          D.apply(e, H.call(t));\n        } : function (e, t) {\n          for (var i = e.length, n = 0; e[i++] = t[n++];) {\n            ;\n          }\n\n          e.length = i - 1;\n        }\n      };\n    }\n\n    function oe(t, e, i, n) {\n      var s,\n          r,\n          a,\n          o,\n          l,\n          d,\n          c,\n          u = e && e.ownerDocument,\n          p = e ? e.nodeType : 9;\n      if (i = i || [], \"string\" != typeof t || !t || 1 !== p && 9 !== p && 11 !== p) return i;\n\n      if (!n && (T(e), e = e || C, S)) {\n        if (11 !== p && (l = te.exec(t))) if (s = l[1]) {\n          if (9 === p) {\n            if (!(a = e.getElementById(s))) return i;\n            if (a.id === s) return i.push(a), i;\n          } else if (u && (a = u.getElementById(s)) && g(e, a) && a.id === s) return i.push(a), i;\n        } else {\n          if (l[2]) return O.apply(i, e.getElementsByTagName(t)), i;\n          if ((s = l[3]) && h.getElementsByClassName && e.getElementsByClassName) return O.apply(i, e.getElementsByClassName(s)), i;\n        }\n\n        if (h.qsa && !P[t + \" \"] && (!v || !v.test(t)) && (1 !== p || \"object\" !== e.nodeName.toLowerCase())) {\n          if (c = t, u = e, 1 === p && (V.test(t) || Y.test(t))) {\n            for ((u = ie.test(t) && me(e.parentNode) || e) === e && h.scope || ((o = e.getAttribute(\"id\")) ? o = o.replace(se, re) : e.setAttribute(\"id\", o = E)), r = (d = f(t)).length; r--;) {\n              d[r] = (o ? \"#\" + o : \":scope\") + \" \" + ge(d[r]);\n            }\n\n            c = d.join(\",\");\n          }\n\n          try {\n            return O.apply(i, u.querySelectorAll(c)), i;\n          } catch (e) {\n            P(t, !0);\n          } finally {\n            o === E && e.removeAttribute(\"id\");\n          }\n        }\n      }\n\n      return m(t.replace(G, \"$1\"), e, i, n);\n    }\n\n    function le() {\n      var i = [];\n\n      function n(e, t) {\n        return i.push(e + \" \") > w.cacheLength && delete n[i.shift()], n[e + \" \"] = t;\n      }\n\n      return n;\n    }\n\n    function de(e) {\n      return e[E] = !0, e;\n    }\n\n    function ce(e) {\n      var t = C.createElement(\"fieldset\");\n\n      try {\n        return !!e(t);\n      } catch (e) {\n        return !1;\n      } finally {\n        t.parentNode && t.parentNode.removeChild(t), t = null;\n      }\n    }\n\n    function ue(e, t) {\n      for (var i = e.split(\"|\"), n = i.length; n--;) {\n        w.attrHandle[i[n]] = t;\n      }\n    }\n\n    function pe(e, t) {\n      var i = t && e,\n          n = i && 1 === e.nodeType && 1 === t.nodeType && e.sourceIndex - t.sourceIndex;\n      if (n) return n;\n      if (i) for (; i = i.nextSibling;) {\n        if (i === t) return -1;\n      }\n      return e ? 1 : -1;\n    }\n\n    function he(t) {\n      return function (e) {\n        return \"form\" in e ? e.parentNode && !1 === e.disabled ? \"label\" in e ? \"label\" in e.parentNode ? e.parentNode.disabled === t : e.disabled === t : e.isDisabled === t || e.isDisabled !== !t && ae(e) === t : e.disabled === t : \"label\" in e && e.disabled === t;\n      };\n    }\n\n    function fe(a) {\n      return de(function (r) {\n        return r = +r, de(function (e, t) {\n          for (var i, n = a([], e.length, r), s = n.length; s--;) {\n            e[i = n[s]] && (e[i] = !(t[i] = e[i]));\n          }\n        });\n      });\n    }\n\n    function me(e) {\n      return e && void 0 !== e.getElementsByTagName && e;\n    }\n\n    for (e in h = oe.support = {}, s = oe.isXML = function (e) {\n      var t = e.namespaceURI,\n          e = (e.ownerDocument || e).documentElement;\n      return !Q.test(t || e && e.nodeName || \"HTML\");\n    }, T = oe.setDocument = function (e) {\n      var t,\n          e = e ? e.ownerDocument || e : y;\n      return e != C && 9 === e.nodeType && e.documentElement && (a = (C = e).documentElement, S = !s(C), y != C && (t = C.defaultView) && t.top !== t && (t.addEventListener ? t.addEventListener(\"unload\", n, !1) : t.attachEvent && t.attachEvent(\"onunload\", n)), h.scope = ce(function (e) {\n        return a.appendChild(e).appendChild(C.createElement(\"div\")), void 0 !== e.querySelectorAll && !e.querySelectorAll(\":scope fieldset div\").length;\n      }), h.attributes = ce(function (e) {\n        return e.className = \"i\", !e.getAttribute(\"className\");\n      }), h.getElementsByTagName = ce(function (e) {\n        return e.appendChild(C.createComment(\"\")), !e.getElementsByTagName(\"*\").length;\n      }), h.getElementsByClassName = ee.test(C.getElementsByClassName), h.getById = ce(function (e) {\n        return a.appendChild(e).id = E, !C.getElementsByName || !C.getElementsByName(E).length;\n      }), h.getById ? (w.filter.ID = function (e) {\n        var t = e.replace(ne, u);\n        return function (e) {\n          return e.getAttribute(\"id\") === t;\n        };\n      }, w.find.ID = function (e, t) {\n        if (void 0 !== t.getElementById && S) {\n          e = t.getElementById(e);\n          return e ? [e] : [];\n        }\n      }) : (w.filter.ID = function (e) {\n        var t = e.replace(ne, u);\n        return function (e) {\n          e = void 0 !== e.getAttributeNode && e.getAttributeNode(\"id\");\n          return e && e.value === t;\n        };\n      }, w.find.ID = function (e, t) {\n        if (void 0 !== t.getElementById && S) {\n          var i,\n              n,\n              s,\n              r = t.getElementById(e);\n\n          if (r) {\n            if ((i = r.getAttributeNode(\"id\")) && i.value === e) return [r];\n\n            for (s = t.getElementsByName(e), n = 0; r = s[n++];) {\n              if ((i = r.getAttributeNode(\"id\")) && i.value === e) return [r];\n            }\n          }\n\n          return [];\n        }\n      }), w.find.TAG = h.getElementsByTagName ? function (e, t) {\n        return void 0 !== t.getElementsByTagName ? t.getElementsByTagName(e) : h.qsa ? t.querySelectorAll(e) : void 0;\n      } : function (e, t) {\n        var i,\n            n = [],\n            s = 0,\n            r = t.getElementsByTagName(e);\n        if (\"*\" !== e) return r;\n\n        for (; i = r[s++];) {\n          1 === i.nodeType && n.push(i);\n        }\n\n        return n;\n      }, w.find.CLASS = h.getElementsByClassName && function (e, t) {\n        if (void 0 !== t.getElementsByClassName && S) return t.getElementsByClassName(e);\n      }, o = [], v = [], (h.qsa = ee.test(C.querySelectorAll)) && (ce(function (e) {\n        var t;\n        a.appendChild(e).innerHTML = \"<a id='\" + E + \"'></a><select id='\" + E + \"-\\r\\\\' msallowcapture=''><option selected=''></option></select>\", e.querySelectorAll(\"[msallowcapture^='']\").length && v.push(\"[*^$]=\" + q + \"*(?:''|\\\"\\\")\"), e.querySelectorAll(\"[selected]\").length || v.push(\"\\\\[\" + q + \"*(?:value|\" + j + \")\"), e.querySelectorAll(\"[id~=\" + E + \"-]\").length || v.push(\"~=\"), (t = C.createElement(\"input\")).setAttribute(\"name\", \"\"), e.appendChild(t), e.querySelectorAll(\"[name='']\").length || v.push(\"\\\\[\" + q + \"*name\" + q + \"*=\" + q + \"*(?:''|\\\"\\\")\"), e.querySelectorAll(\":checked\").length || v.push(\":checked\"), e.querySelectorAll(\"a#\" + E + \"+*\").length || v.push(\".#.+[+~]\"), e.querySelectorAll(\"\\\\\\f\"), v.push(\"[\\\\r\\\\n\\\\f]\");\n      }), ce(function (e) {\n        e.innerHTML = \"<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>\";\n        var t = C.createElement(\"input\");\n        t.setAttribute(\"type\", \"hidden\"), e.appendChild(t).setAttribute(\"name\", \"D\"), e.querySelectorAll(\"[name=d]\").length && v.push(\"name\" + q + \"*[*^$|!~]?=\"), 2 !== e.querySelectorAll(\":enabled\").length && v.push(\":enabled\", \":disabled\"), a.appendChild(e).disabled = !0, 2 !== e.querySelectorAll(\":disabled\").length && v.push(\":enabled\", \":disabled\"), e.querySelectorAll(\"*,:x\"), v.push(\",.*:\");\n      })), (h.matchesSelector = ee.test(c = a.matches || a.webkitMatchesSelector || a.mozMatchesSelector || a.oMatchesSelector || a.msMatchesSelector)) && ce(function (e) {\n        h.disconnectedMatch = c.call(e, \"*\"), c.call(e, \"[s!='']:x\"), o.push(\"!=\", R);\n      }), v = v.length && new RegExp(v.join(\"|\")), o = o.length && new RegExp(o.join(\"|\")), t = ee.test(a.compareDocumentPosition), g = t || ee.test(a.contains) ? function (e, t) {\n        var i = 9 === e.nodeType ? e.documentElement : e,\n            t = t && t.parentNode;\n        return e === t || !(!t || 1 !== t.nodeType || !(i.contains ? i.contains(t) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(t)));\n      } : function (e, t) {\n        if (t) for (; t = t.parentNode;) {\n          if (t === e) return !0;\n        }\n        return !1;\n      }, L = t ? function (e, t) {\n        if (e === t) return d = !0, 0;\n        var i = !e.compareDocumentPosition - !t.compareDocumentPosition;\n        return i || (1 & (i = (e.ownerDocument || e) == (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1) || !h.sortDetached && t.compareDocumentPosition(e) === i ? e == C || e.ownerDocument == y && g(y, e) ? -1 : t == C || t.ownerDocument == y && g(y, t) ? 1 : l ? N(l, e) - N(l, t) : 0 : 4 & i ? -1 : 1);\n      } : function (e, t) {\n        if (e === t) return d = !0, 0;\n        var i,\n            n = 0,\n            s = e.parentNode,\n            r = t.parentNode,\n            a = [e],\n            o = [t];\n        if (!s || !r) return e == C ? -1 : t == C ? 1 : s ? -1 : r ? 1 : l ? N(l, e) - N(l, t) : 0;\n        if (s === r) return pe(e, t);\n\n        for (i = e; i = i.parentNode;) {\n          a.unshift(i);\n        }\n\n        for (i = t; i = i.parentNode;) {\n          o.unshift(i);\n        }\n\n        for (; a[n] === o[n];) {\n          n++;\n        }\n\n        return n ? pe(a[n], o[n]) : a[n] == y ? -1 : o[n] == y ? 1 : 0;\n      }), C;\n    }, oe.matches = function (e, t) {\n      return oe(e, null, null, t);\n    }, oe.matchesSelector = function (e, t) {\n      if (T(e), h.matchesSelector && S && !P[t + \" \"] && (!o || !o.test(t)) && (!v || !v.test(t))) try {\n        var i = c.call(e, t);\n        if (i || h.disconnectedMatch || e.document && 11 !== e.document.nodeType) return i;\n      } catch (e) {\n        P(t, !0);\n      }\n      return 0 < oe(t, C, null, [e]).length;\n    }, oe.contains = function (e, t) {\n      return (e.ownerDocument || e) != C && T(e), g(e, t);\n    }, oe.attr = function (e, t) {\n      (e.ownerDocument || e) != C && T(e);\n      var i = w.attrHandle[t.toLowerCase()],\n          i = i && z.call(w.attrHandle, t.toLowerCase()) ? i(e, t, !S) : void 0;\n      return void 0 !== i ? i : h.attributes || !S ? e.getAttribute(t) : (i = e.getAttributeNode(t)) && i.specified ? i.value : null;\n    }, oe.escape = function (e) {\n      return (e + \"\").replace(se, re);\n    }, oe.error = function (e) {\n      throw new Error(\"Syntax error, unrecognized expression: \" + e);\n    }, oe.uniqueSort = function (e) {\n      var t,\n          i = [],\n          n = 0,\n          s = 0;\n\n      if (d = !h.detectDuplicates, l = !h.sortStable && e.slice(0), e.sort(L), d) {\n        for (; t = e[s++];) {\n          t === e[s] && (n = i.push(s));\n        }\n\n        for (; n--;) {\n          e.splice(i[n], 1);\n        }\n      }\n\n      return l = null, e;\n    }, r = oe.getText = function (e) {\n      var t,\n          i = \"\",\n          n = 0,\n          s = e.nodeType;\n\n      if (s) {\n        if (1 === s || 9 === s || 11 === s) {\n          if (\"string\" == typeof e.textContent) return e.textContent;\n\n          for (e = e.firstChild; e; e = e.nextSibling) {\n            i += r(e);\n          }\n        } else if (3 === s || 4 === s) return e.nodeValue;\n      } else for (; t = e[n++];) {\n        i += r(t);\n      }\n\n      return i;\n    }, (w = oe.selectors = {\n      cacheLength: 50,\n      createPseudo: de,\n      match: K,\n      attrHandle: {},\n      find: {},\n      relative: {\n        \">\": {\n          dir: \"parentNode\",\n          first: !0\n        },\n        \" \": {\n          dir: \"parentNode\"\n        },\n        \"+\": {\n          dir: \"previousSibling\",\n          first: !0\n        },\n        \"~\": {\n          dir: \"previousSibling\"\n        }\n      },\n      preFilter: {\n        ATTR: function ATTR(e) {\n          return e[1] = e[1].replace(ne, u), e[3] = (e[3] || e[4] || e[5] || \"\").replace(ne, u), \"~=\" === e[2] && (e[3] = \" \" + e[3] + \" \"), e.slice(0, 4);\n        },\n        CHILD: function CHILD(e) {\n          return e[1] = e[1].toLowerCase(), \"nth\" === e[1].slice(0, 3) ? (e[3] || oe.error(e[0]), e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * (\"even\" === e[3] || \"odd\" === e[3])), e[5] = +(e[7] + e[8] || \"odd\" === e[3])) : e[3] && oe.error(e[0]), e;\n        },\n        PSEUDO: function PSEUDO(e) {\n          var t,\n              i = !e[6] && e[2];\n          return K.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || \"\" : i && _.test(i) && (t = f(i, !0)) && (t = i.indexOf(\")\", i.length - t) - i.length) && (e[0] = e[0].slice(0, t), e[2] = i.slice(0, t)), e.slice(0, 3));\n        }\n      },\n      filter: {\n        TAG: function TAG(e) {\n          var t = e.replace(ne, u).toLowerCase();\n          return \"*\" === e ? function () {\n            return !0;\n          } : function (e) {\n            return e.nodeName && e.nodeName.toLowerCase() === t;\n          };\n        },\n        CLASS: function CLASS(e) {\n          var t = $[e + \" \"];\n          return t || (t = new RegExp(\"(^|\" + q + \")\" + e + \"(\" + q + \"|$)\")) && $(e, function (e) {\n            return t.test(\"string\" == typeof e.className && e.className || void 0 !== e.getAttribute && e.getAttribute(\"class\") || \"\");\n          });\n        },\n        ATTR: function ATTR(t, i, n) {\n          return function (e) {\n            e = oe.attr(e, t);\n            return null == e ? \"!=\" === i : !i || (e += \"\", \"=\" === i ? e === n : \"!=\" === i ? e !== n : \"^=\" === i ? n && 0 === e.indexOf(n) : \"*=\" === i ? n && -1 < e.indexOf(n) : \"$=\" === i ? n && e.slice(-n.length) === n : \"~=\" === i ? -1 < (\" \" + e.replace(F, \" \") + \" \").indexOf(n) : \"|=\" === i && (e === n || e.slice(0, n.length + 1) === n + \"-\"));\n          };\n        },\n        CHILD: function CHILD(f, e, t, m, v) {\n          var g = \"nth\" !== f.slice(0, 3),\n              y = \"last\" !== f.slice(-4),\n              b = \"of-type\" === e;\n          return 1 === m && 0 === v ? function (e) {\n            return !!e.parentNode;\n          } : function (e, t, i) {\n            var n,\n                s,\n                r,\n                a,\n                o,\n                l,\n                d = g != y ? \"nextSibling\" : \"previousSibling\",\n                c = e.parentNode,\n                u = b && e.nodeName.toLowerCase(),\n                p = !i && !b,\n                h = !1;\n\n            if (c) {\n              if (g) {\n                for (; d;) {\n                  for (a = e; a = a[d];) {\n                    if (b ? a.nodeName.toLowerCase() === u : 1 === a.nodeType) return !1;\n                  }\n\n                  l = d = \"only\" === f && !l && \"nextSibling\";\n                }\n\n                return !0;\n              }\n\n              if (l = [y ? c.firstChild : c.lastChild], y && p) {\n                for (h = (o = (n = (s = (r = (a = c)[E] || (a[E] = {}))[a.uniqueID] || (r[a.uniqueID] = {}))[f] || [])[0] === k && n[1]) && n[2], a = o && c.childNodes[o]; a = ++o && a && a[d] || (h = o = 0) || l.pop();) {\n                  if (1 === a.nodeType && ++h && a === e) {\n                    s[f] = [k, o, h];\n                    break;\n                  }\n                }\n              } else if (!1 === (h = p ? o = (n = (s = (r = (a = e)[E] || (a[E] = {}))[a.uniqueID] || (r[a.uniqueID] = {}))[f] || [])[0] === k && n[1] : h)) for (; (a = ++o && a && a[d] || (h = o = 0) || l.pop()) && ((b ? a.nodeName.toLowerCase() !== u : 1 !== a.nodeType) || !++h || (p && ((s = (r = a[E] || (a[E] = {}))[a.uniqueID] || (r[a.uniqueID] = {}))[f] = [k, h]), a !== e));) {\n                ;\n              }\n\n              return (h -= v) === m || h % m == 0 && 0 <= h / m;\n            }\n          };\n        },\n        PSEUDO: function PSEUDO(e, r) {\n          var t,\n              a = w.pseudos[e] || w.setFilters[e.toLowerCase()] || oe.error(\"unsupported pseudo: \" + e);\n          return a[E] ? a(r) : 1 < a.length ? (t = [e, e, \"\", r], w.setFilters.hasOwnProperty(e.toLowerCase()) ? de(function (e, t) {\n            for (var i, n = a(e, r), s = n.length; s--;) {\n              e[i = N(e, n[s])] = !(t[i] = n[s]);\n            }\n          }) : function (e) {\n            return a(e, 0, t);\n          }) : a;\n        }\n      },\n      pseudos: {\n        not: de(function (e) {\n          var n = [],\n              s = [],\n              o = p(e.replace(G, \"$1\"));\n          return o[E] ? de(function (e, t, i, n) {\n            for (var s, r = o(e, null, n, []), a = e.length; a--;) {\n              (s = r[a]) && (e[a] = !(t[a] = s));\n            }\n          }) : function (e, t, i) {\n            return n[0] = e, o(n, null, i, s), n[0] = null, !s.pop();\n          };\n        }),\n        has: de(function (t) {\n          return function (e) {\n            return 0 < oe(t, e).length;\n          };\n        }),\n        contains: de(function (t) {\n          return t = t.replace(ne, u), function (e) {\n            return -1 < (e.textContent || r(e)).indexOf(t);\n          };\n        }),\n        lang: de(function (i) {\n          return U.test(i || \"\") || oe.error(\"unsupported lang: \" + i), i = i.replace(ne, u).toLowerCase(), function (e) {\n            var t;\n\n            do {\n              if (t = S ? e.lang : e.getAttribute(\"xml:lang\") || e.getAttribute(\"lang\")) return (t = t.toLowerCase()) === i || 0 === t.indexOf(i + \"-\");\n            } while ((e = e.parentNode) && 1 === e.nodeType);\n\n            return !1;\n          };\n        }),\n        target: function target(e) {\n          var t = i.location && i.location.hash;\n          return t && t.slice(1) === e.id;\n        },\n        root: function root(e) {\n          return e === a;\n        },\n        focus: function focus(e) {\n          return e === C.activeElement && (!C.hasFocus || C.hasFocus()) && !!(e.type || e.href || ~e.tabIndex);\n        },\n        enabled: he(!1),\n        disabled: he(!0),\n        checked: function checked(e) {\n          var t = e.nodeName.toLowerCase();\n          return \"input\" === t && !!e.checked || \"option\" === t && !!e.selected;\n        },\n        selected: function selected(e) {\n          return e.parentNode && e.parentNode.selectedIndex, !0 === e.selected;\n        },\n        empty: function empty(e) {\n          for (e = e.firstChild; e; e = e.nextSibling) {\n            if (e.nodeType < 6) return !1;\n          }\n\n          return !0;\n        },\n        parent: function parent(e) {\n          return !w.pseudos.empty(e);\n        },\n        header: function header(e) {\n          return Z.test(e.nodeName);\n        },\n        input: function input(e) {\n          return J.test(e.nodeName);\n        },\n        button: function button(e) {\n          var t = e.nodeName.toLowerCase();\n          return \"input\" === t && \"button\" === e.type || \"button\" === t;\n        },\n        text: function text(e) {\n          return \"input\" === e.nodeName.toLowerCase() && \"text\" === e.type && (null == (e = e.getAttribute(\"type\")) || \"text\" === e.toLowerCase());\n        },\n        first: fe(function () {\n          return [0];\n        }),\n        last: fe(function (e, t) {\n          return [t - 1];\n        }),\n        eq: fe(function (e, t, i) {\n          return [i < 0 ? i + t : i];\n        }),\n        even: fe(function (e, t) {\n          for (var i = 0; i < t; i += 2) {\n            e.push(i);\n          }\n\n          return e;\n        }),\n        odd: fe(function (e, t) {\n          for (var i = 1; i < t; i += 2) {\n            e.push(i);\n          }\n\n          return e;\n        }),\n        lt: fe(function (e, t, i) {\n          for (var n = i < 0 ? i + t : t < i ? t : i; 0 <= --n;) {\n            e.push(n);\n          }\n\n          return e;\n        }),\n        gt: fe(function (e, t, i) {\n          for (var n = i < 0 ? i + t : i; ++n < t;) {\n            e.push(n);\n          }\n\n          return e;\n        })\n      }\n    }).pseudos.nth = w.pseudos.eq, {\n      radio: !0,\n      checkbox: !0,\n      file: !0,\n      password: !0,\n      image: !0\n    }) {\n      w.pseudos[e] = function (t) {\n        return function (e) {\n          return \"input\" === e.nodeName.toLowerCase() && e.type === t;\n        };\n      }(e);\n    }\n\n    for (e in {\n      submit: !0,\n      reset: !0\n    }) {\n      w.pseudos[e] = function (i) {\n        return function (e) {\n          var t = e.nodeName.toLowerCase();\n          return (\"input\" === t || \"button\" === t) && e.type === i;\n        };\n      }(e);\n    }\n\n    function ve() {}\n\n    function ge(e) {\n      for (var t = 0, i = e.length, n = \"\"; t < i; t++) {\n        n += e[t].value;\n      }\n\n      return n;\n    }\n\n    function ye(a, e, t) {\n      var o = e.dir,\n          l = e.next,\n          d = l || o,\n          c = t && \"parentNode\" === d,\n          u = b++;\n      return e.first ? function (e, t, i) {\n        for (; e = e[o];) {\n          if (1 === e.nodeType || c) return a(e, t, i);\n        }\n\n        return !1;\n      } : function (e, t, i) {\n        var n,\n            s,\n            r = [k, u];\n\n        if (i) {\n          for (; e = e[o];) {\n            if ((1 === e.nodeType || c) && a(e, t, i)) return !0;\n          }\n        } else for (; e = e[o];) {\n          if (1 === e.nodeType || c) if (n = (s = e[E] || (e[E] = {}))[e.uniqueID] || (s[e.uniqueID] = {}), l && l === e.nodeName.toLowerCase()) e = e[o] || e;else {\n            if ((s = n[d]) && s[0] === k && s[1] === u) return r[2] = s[2];\n            if ((n[d] = r)[2] = a(e, t, i)) return !0;\n          }\n        }\n\n        return !1;\n      };\n    }\n\n    function be(s) {\n      return 1 < s.length ? function (e, t, i) {\n        for (var n = s.length; n--;) {\n          if (!s[n](e, t, i)) return !1;\n        }\n\n        return !0;\n      } : s[0];\n    }\n\n    function we(e, t, i, n, s) {\n      for (var r, a = [], o = 0, l = e.length, d = null != t; o < l; o++) {\n        (r = e[o]) && (i && !i(r, n, s) || (a.push(r), d && t.push(o)));\n      }\n\n      return a;\n    }\n\n    function xe(h, f, m, v, g, e) {\n      return v && !v[E] && (v = xe(v)), g && !g[E] && (g = xe(g, e)), de(function (e, t, i, n) {\n        var s,\n            r,\n            a,\n            o = [],\n            l = [],\n            d = t.length,\n            c = e || function (e, t, i) {\n          for (var n = 0, s = t.length; n < s; n++) {\n            oe(e, t[n], i);\n          }\n\n          return i;\n        }(f || \"*\", i.nodeType ? [i] : i, []),\n            u = !h || !e && f ? c : we(c, o, h, i, n),\n            p = m ? g || (e ? h : d || v) ? [] : t : u;\n\n        if (m && m(u, p, i, n), v) for (s = we(p, l), v(s, [], i, n), r = s.length; r--;) {\n          (a = s[r]) && (p[l[r]] = !(u[l[r]] = a));\n        }\n\n        if (e) {\n          if (g || h) {\n            if (g) {\n              for (s = [], r = p.length; r--;) {\n                (a = p[r]) && s.push(u[r] = a);\n              }\n\n              g(null, p = [], s, n);\n            }\n\n            for (r = p.length; r--;) {\n              (a = p[r]) && -1 < (s = g ? N(e, a) : o[r]) && (e[s] = !(t[s] = a));\n            }\n          }\n        } else p = we(p === t ? p.splice(d, p.length) : p), g ? g(null, t, p, n) : O.apply(t, p);\n      });\n    }\n\n    function Te(v, g) {\n      function e(e, t, i, n, s) {\n        var r,\n            a,\n            o,\n            l = 0,\n            d = \"0\",\n            c = e && [],\n            u = [],\n            p = x,\n            h = e || b && w.find.TAG(\"*\", s),\n            f = k += null == p ? 1 : Math.random() || .1,\n            m = h.length;\n\n        for (s && (x = t == C || t || s); d !== m && null != (r = h[d]); d++) {\n          if (b && r) {\n            for (a = 0, t || r.ownerDocument == C || (T(r), i = !S); o = v[a++];) {\n              if (o(r, t || C, i)) {\n                n.push(r);\n                break;\n              }\n            }\n\n            s && (k = f);\n          }\n\n          y && ((r = !o && r) && l--, e && c.push(r));\n        }\n\n        if (l += d, y && d !== l) {\n          for (a = 0; o = g[a++];) {\n            o(c, u, t, i);\n          }\n\n          if (e) {\n            if (0 < l) for (; d--;) {\n              c[d] || u[d] || (u[d] = I.call(n));\n            }\n            u = we(u);\n          }\n\n          O.apply(n, u), s && !e && 0 < u.length && 1 < l + g.length && oe.uniqueSort(n);\n        }\n\n        return s && (k = f, x = p), c;\n      }\n\n      var y = 0 < g.length,\n          b = 0 < v.length;\n      return y ? de(e) : e;\n    }\n\n    return ve.prototype = w.filters = w.pseudos, w.setFilters = new ve(), f = oe.tokenize = function (e, t) {\n      var i,\n          n,\n          s,\n          r,\n          a,\n          o,\n          l,\n          d = M[e + \" \"];\n      if (d) return t ? 0 : d.slice(0);\n\n      for (a = e, o = [], l = w.preFilter; a;) {\n        for (r in i && !(n = X.exec(a)) || (n && (a = a.slice(n[0].length) || a), o.push(s = [])), i = !1, (n = Y.exec(a)) && (i = n.shift(), s.push({\n          value: i,\n          type: n[0].replace(G, \" \")\n        }), a = a.slice(i.length)), w.filter) {\n          !(n = K[r].exec(a)) || l[r] && !(n = l[r](n)) || (i = n.shift(), s.push({\n            value: i,\n            type: r,\n            matches: n\n          }), a = a.slice(i.length));\n        }\n\n        if (!i) break;\n      }\n\n      return t ? a.length : a ? oe.error(e) : M(e, o).slice(0);\n    }, p = oe.compile = function (e, t) {\n      var i,\n          n = [],\n          s = [],\n          r = A[e + \" \"];\n\n      if (!r) {\n        for (i = (t = t || f(e)).length; i--;) {\n          ((r = function e(t) {\n            for (var n, i, s, r = t.length, a = w.relative[t[0].type], o = a || w.relative[\" \"], l = a ? 1 : 0, d = ye(function (e) {\n              return e === n;\n            }, o, !0), c = ye(function (e) {\n              return -1 < N(n, e);\n            }, o, !0), u = [function (e, t, i) {\n              return i = !a && (i || t !== x) || ((n = t).nodeType ? d : c)(e, t, i), n = null, i;\n            }]; l < r; l++) {\n              if (i = w.relative[t[l].type]) u = [ye(be(u), i)];else {\n                if ((i = w.filter[t[l].type].apply(null, t[l].matches))[E]) {\n                  for (s = ++l; s < r && !w.relative[t[s].type]; s++) {\n                    ;\n                  }\n\n                  return xe(1 < l && be(u), 1 < l && ge(t.slice(0, l - 1).concat({\n                    value: \" \" === t[l - 2].type ? \"*\" : \"\"\n                  })).replace(G, \"$1\"), i, l < s && e(t.slice(l, s)), s < r && e(t = t.slice(s)), s < r && ge(t));\n                }\n\n                u.push(i);\n              }\n            }\n\n            return be(u);\n          }(t[i]))[E] ? n : s).push(r);\n        }\n\n        (r = A(e, Te(s, n))).selector = e;\n      }\n\n      return r;\n    }, m = oe.select = function (e, t, i, n) {\n      var s,\n          r,\n          a,\n          o,\n          l,\n          d = \"function\" == typeof e && e,\n          c = !n && f(e = d.selector || e);\n\n      if (i = i || [], 1 === c.length) {\n        if (2 < (r = c[0] = c[0].slice(0)).length && \"ID\" === (a = r[0]).type && 9 === t.nodeType && S && w.relative[r[1].type]) {\n          if (!(t = (w.find.ID(a.matches[0].replace(ne, u), t) || [])[0])) return i;\n          d && (t = t.parentNode), e = e.slice(r.shift().value.length);\n        }\n\n        for (s = K.needsContext.test(e) ? 0 : r.length; s-- && (a = r[s], !w.relative[o = a.type]);) {\n          if ((l = w.find[o]) && (n = l(a.matches[0].replace(ne, u), ie.test(r[0].type) && me(t.parentNode) || t))) {\n            if (r.splice(s, 1), !(e = n.length && ge(r))) return O.apply(i, n), i;\n            break;\n          }\n        }\n      }\n\n      return (d || p(e, c))(n, t, !S, i, !t || ie.test(e) && me(t.parentNode) || t), i;\n    }, h.sortStable = E.split(\"\").sort(L).join(\"\") === E, h.detectDuplicates = !!d, T(), h.sortDetached = ce(function (e) {\n      return 1 & e.compareDocumentPosition(C.createElement(\"fieldset\"));\n    }), ce(function (e) {\n      return e.innerHTML = \"<a href='#'></a>\", \"#\" === e.firstChild.getAttribute(\"href\");\n    }) || ue(\"type|href|height|width\", function (e, t, i) {\n      if (!i) return e.getAttribute(t, \"type\" === t.toLowerCase() ? 1 : 2);\n    }), h.attributes && ce(function (e) {\n      return e.innerHTML = \"<input/>\", e.firstChild.setAttribute(\"value\", \"\"), \"\" === e.firstChild.getAttribute(\"value\");\n    }) || ue(\"value\", function (e, t, i) {\n      if (!i && \"input\" === e.nodeName.toLowerCase()) return e.defaultValue;\n    }), ce(function (e) {\n      return null == e.getAttribute(\"disabled\");\n    }) || ue(j, function (e, t, i) {\n      if (!i) return !0 === e[t] ? t.toLowerCase() : (t = e.getAttributeNode(t)) && t.specified ? t.value : null;\n    }), oe;\n  }(T);\n\n  S.find = h, S.expr = h.selectors, S.expr[\":\"] = S.expr.pseudos, S.uniqueSort = S.unique = h.uniqueSort, S.text = h.getText, S.isXMLDoc = h.isXML, S.contains = h.contains, S.escapeSelector = h.escape;\n\n  function x(e, t, i) {\n    for (var n = [], s = void 0 !== i; (e = e[t]) && 9 !== e.nodeType;) {\n      if (1 === e.nodeType) {\n        if (s && S(e).is(i)) break;\n        n.push(e);\n      }\n    }\n\n    return n;\n  }\n\n  function E(e, t) {\n    for (var i = []; e; e = e.nextSibling) {\n      1 === e.nodeType && e !== t && i.push(e);\n    }\n\n    return i;\n  }\n\n  var k = S.expr.match.needsContext;\n\n  function $(e, t) {\n    return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase();\n  }\n\n  var M = /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;\n\n  function A(e, i, n) {\n    return b(i) ? S.grep(e, function (e, t) {\n      return !!i.call(e, t, e) !== n;\n    }) : i.nodeType ? S.grep(e, function (e) {\n      return e === i !== n;\n    }) : \"string\" != typeof i ? S.grep(e, function (e) {\n      return -1 < s.call(i, e) !== n;\n    }) : S.filter(i, e, n);\n  }\n\n  S.filter = function (e, t, i) {\n    var n = t[0];\n    return i && (e = \":not(\" + e + \")\"), 1 === t.length && 1 === n.nodeType ? S.find.matchesSelector(n, e) ? [n] : [] : S.find.matches(e, S.grep(t, function (e) {\n      return 1 === e.nodeType;\n    }));\n  }, S.fn.extend({\n    find: function find(e) {\n      var t,\n          i,\n          n = this.length,\n          s = this;\n      if (\"string\" != typeof e) return this.pushStack(S(e).filter(function () {\n        for (t = 0; t < n; t++) {\n          if (S.contains(s[t], this)) return !0;\n        }\n      }));\n\n      for (i = this.pushStack([]), t = 0; t < n; t++) {\n        S.find(e, s[t], i);\n      }\n\n      return 1 < n ? S.uniqueSort(i) : i;\n    },\n    filter: function filter(e) {\n      return this.pushStack(A(this, e || [], !1));\n    },\n    not: function not(e) {\n      return this.pushStack(A(this, e || [], !0));\n    },\n    is: function is(e) {\n      return !!A(this, \"string\" == typeof e && k.test(e) ? S(e) : e || [], !1).length;\n    }\n  });\n  var P = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/;\n  (S.fn.init = function (e, t, i) {\n    if (!e) return this;\n    if (i = i || L, \"string\" != typeof e) return e.nodeType ? (this[0] = e, this.length = 1, this) : b(e) ? void 0 !== i.ready ? i.ready(e) : e(S) : S.makeArray(e, this);\n    if (!(n = \"<\" === e[0] && \">\" === e[e.length - 1] && 3 <= e.length ? [null, e, null] : P.exec(e)) || !n[1] && t) return (!t || t.jquery ? t || i : this.constructor(t)).find(e);\n\n    if (n[1]) {\n      if (t = t instanceof S ? t[0] : t, S.merge(this, S.parseHTML(n[1], t && t.nodeType ? t.ownerDocument || t : C, !0)), M.test(n[1]) && S.isPlainObject(t)) for (var n in t) {\n        b(this[n]) ? this[n](t[n]) : this.attr(n, t[n]);\n      }\n      return this;\n    }\n\n    return (e = C.getElementById(n[2])) && (this[0] = e, this.length = 1), this;\n  }).prototype = S.fn;\n  var L = S(C),\n      z = /^(?:parents|prev(?:Until|All))/,\n      I = {\n    children: !0,\n    contents: !0,\n    next: !0,\n    prev: !0\n  };\n\n  function D(e, t) {\n    for (; (e = e[t]) && 1 !== e.nodeType;) {\n      ;\n    }\n\n    return e;\n  }\n\n  S.fn.extend({\n    has: function has(e) {\n      var t = S(e, this),\n          i = t.length;\n      return this.filter(function () {\n        for (var e = 0; e < i; e++) {\n          if (S.contains(this, t[e])) return !0;\n        }\n      });\n    },\n    closest: function closest(e, t) {\n      var i,\n          n = 0,\n          s = this.length,\n          r = [],\n          a = \"string\" != typeof e && S(e);\n      if (!k.test(e)) for (; n < s; n++) {\n        for (i = this[n]; i && i !== t; i = i.parentNode) {\n          if (i.nodeType < 11 && (a ? -1 < a.index(i) : 1 === i.nodeType && S.find.matchesSelector(i, e))) {\n            r.push(i);\n            break;\n          }\n        }\n      }\n      return this.pushStack(1 < r.length ? S.uniqueSort(r) : r);\n    },\n    index: function index(e) {\n      return e ? \"string\" == typeof e ? s.call(S(e), this[0]) : s.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n    },\n    add: function add(e, t) {\n      return this.pushStack(S.uniqueSort(S.merge(this.get(), S(e, t))));\n    },\n    addBack: function addBack(e) {\n      return this.add(null == e ? this.prevObject : this.prevObject.filter(e));\n    }\n  }), S.each({\n    parent: function parent(e) {\n      e = e.parentNode;\n      return e && 11 !== e.nodeType ? e : null;\n    },\n    parents: function parents(e) {\n      return x(e, \"parentNode\");\n    },\n    parentsUntil: function parentsUntil(e, t, i) {\n      return x(e, \"parentNode\", i);\n    },\n    next: function next(e) {\n      return D(e, \"nextSibling\");\n    },\n    prev: function prev(e) {\n      return D(e, \"previousSibling\");\n    },\n    nextAll: function nextAll(e) {\n      return x(e, \"nextSibling\");\n    },\n    prevAll: function prevAll(e) {\n      return x(e, \"previousSibling\");\n    },\n    nextUntil: function nextUntil(e, t, i) {\n      return x(e, \"nextSibling\", i);\n    },\n    prevUntil: function prevUntil(e, t, i) {\n      return x(e, \"previousSibling\", i);\n    },\n    siblings: function siblings(e) {\n      return E((e.parentNode || {}).firstChild, e);\n    },\n    children: function children(e) {\n      return E(e.firstChild);\n    },\n    contents: function contents(e) {\n      return null != e.contentDocument && i(e.contentDocument) ? e.contentDocument : ($(e, \"template\") && (e = e.content || e), S.merge([], e.childNodes));\n    }\n  }, function (n, s) {\n    S.fn[n] = function (e, t) {\n      var i = S.map(this, s, e);\n      return (t = \"Until\" !== n.slice(-5) ? e : t) && \"string\" == typeof t && (i = S.filter(t, i)), 1 < this.length && (I[n] || S.uniqueSort(i), z.test(n) && i.reverse()), this.pushStack(i);\n    };\n  });\n  var O = /[^\\x20\\t\\r\\n\\f]+/g;\n\n  function H(e) {\n    return e;\n  }\n\n  function N(e) {\n    throw e;\n  }\n\n  function j(e, t, i, n) {\n    var s;\n\n    try {\n      e && b(s = e.promise) ? s.call(e).done(t).fail(i) : e && b(s = e.then) ? s.call(e, t, i) : t.apply(void 0, [e].slice(n));\n    } catch (e) {\n      i.apply(void 0, [e]);\n    }\n  }\n\n  S.Callbacks = function (n) {\n    var e, i;\n    n = \"string\" == typeof n ? (e = n, i = {}, S.each(e.match(O) || [], function (e, t) {\n      i[t] = !0;\n    }), i) : S.extend({}, n);\n\n    function s() {\n      for (o = o || n.once, a = r = !0; d.length; c = -1) {\n        for (t = d.shift(); ++c < l.length;) {\n          !1 === l[c].apply(t[0], t[1]) && n.stopOnFalse && (c = l.length, t = !1);\n        }\n      }\n\n      n.memory || (t = !1), r = !1, o && (l = t ? [] : \"\");\n    }\n\n    var r,\n        t,\n        a,\n        o,\n        l = [],\n        d = [],\n        c = -1,\n        u = {\n      add: function add() {\n        return l && (t && !r && (c = l.length - 1, d.push(t)), function i(e) {\n          S.each(e, function (e, t) {\n            b(t) ? n.unique && u.has(t) || l.push(t) : t && t.length && \"string\" !== f(t) && i(t);\n          });\n        }(arguments), t && !r && s()), this;\n      },\n      remove: function remove() {\n        return S.each(arguments, function (e, t) {\n          for (var i; -1 < (i = S.inArray(t, l, i));) {\n            l.splice(i, 1), i <= c && c--;\n          }\n        }), this;\n      },\n      has: function has(e) {\n        return e ? -1 < S.inArray(e, l) : 0 < l.length;\n      },\n      empty: function empty() {\n        return l = l && [], this;\n      },\n      disable: function disable() {\n        return o = d = [], l = t = \"\", this;\n      },\n      disabled: function disabled() {\n        return !l;\n      },\n      lock: function lock() {\n        return o = d = [], t || r || (l = t = \"\"), this;\n      },\n      locked: function locked() {\n        return !!o;\n      },\n      fireWith: function fireWith(e, t) {\n        return o || (t = [e, (t = t || []).slice ? t.slice() : t], d.push(t), r || s()), this;\n      },\n      fire: function fire() {\n        return u.fireWith(this, arguments), this;\n      },\n      fired: function fired() {\n        return !!a;\n      }\n    };\n    return u;\n  }, S.extend({\n    Deferred: function Deferred(e) {\n      var r = [[\"notify\", \"progress\", S.Callbacks(\"memory\"), S.Callbacks(\"memory\"), 2], [\"resolve\", \"done\", S.Callbacks(\"once memory\"), S.Callbacks(\"once memory\"), 0, \"resolved\"], [\"reject\", \"fail\", S.Callbacks(\"once memory\"), S.Callbacks(\"once memory\"), 1, \"rejected\"]],\n          s = \"pending\",\n          a = {\n        state: function state() {\n          return s;\n        },\n        always: function always() {\n          return o.done(arguments).fail(arguments), this;\n        },\n        \"catch\": function _catch(e) {\n          return a.then(null, e);\n        },\n        pipe: function pipe() {\n          var s = arguments;\n          return S.Deferred(function (n) {\n            S.each(r, function (e, t) {\n              var i = b(s[t[4]]) && s[t[4]];\n              o[t[1]](function () {\n                var e = i && i.apply(this, arguments);\n                e && b(e.promise) ? e.promise().progress(n.notify).done(n.resolve).fail(n.reject) : n[t[0] + \"With\"](this, i ? [e] : arguments);\n              });\n            }), s = null;\n          }).promise();\n        },\n        then: function then(t, i, n) {\n          var l = 0;\n\n          function d(s, r, a, o) {\n            return function () {\n              function e() {\n                var e, t;\n\n                if (!(s < l)) {\n                  if ((e = a.apply(i, n)) === r.promise()) throw new TypeError(\"Thenable self-resolution\");\n                  t = e && (\"object\" == _typeof(e) || \"function\" == typeof e) && e.then, b(t) ? o ? t.call(e, d(l, r, H, o), d(l, r, N, o)) : (l++, t.call(e, d(l, r, H, o), d(l, r, N, o), d(l, r, H, r.notifyWith))) : (a !== H && (i = void 0, n = [e]), (o || r.resolveWith)(i, n));\n                }\n              }\n\n              var i = this,\n                  n = arguments,\n                  t = o ? e : function () {\n                try {\n                  e();\n                } catch (e) {\n                  S.Deferred.exceptionHook && S.Deferred.exceptionHook(e, t.stackTrace), l <= s + 1 && (a !== N && (i = void 0, n = [e]), r.rejectWith(i, n));\n                }\n              };\n              s ? t() : (S.Deferred.getStackHook && (t.stackTrace = S.Deferred.getStackHook()), T.setTimeout(t));\n            };\n          }\n\n          return S.Deferred(function (e) {\n            r[0][3].add(d(0, e, b(n) ? n : H, e.notifyWith)), r[1][3].add(d(0, e, b(t) ? t : H)), r[2][3].add(d(0, e, b(i) ? i : N));\n          }).promise();\n        },\n        promise: function promise(e) {\n          return null != e ? S.extend(e, a) : a;\n        }\n      },\n          o = {};\n      return S.each(r, function (e, t) {\n        var i = t[2],\n            n = t[5];\n        a[t[1]] = i.add, n && i.add(function () {\n          s = n;\n        }, r[3 - e][2].disable, r[3 - e][3].disable, r[0][2].lock, r[0][3].lock), i.add(t[3].fire), o[t[0]] = function () {\n          return o[t[0] + \"With\"](this === o ? void 0 : this, arguments), this;\n        }, o[t[0] + \"With\"] = i.fireWith;\n      }), a.promise(o), e && e.call(o, o), o;\n    },\n    when: function when(e) {\n      function t(t) {\n        return function (e) {\n          s[t] = this, r[t] = 1 < arguments.length ? o.call(arguments) : e, --i || a.resolveWith(s, r);\n        };\n      }\n\n      var i = arguments.length,\n          n = i,\n          s = Array(n),\n          r = o.call(arguments),\n          a = S.Deferred();\n      if (i <= 1 && (j(e, a.done(t(n)).resolve, a.reject, !i), \"pending\" === a.state() || b(r[n] && r[n].then))) return a.then();\n\n      for (; n--;) {\n        j(r[n], t(n), a.reject);\n      }\n\n      return a.promise();\n    }\n  });\n  var q = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n  S.Deferred.exceptionHook = function (e, t) {\n    T.console && T.console.warn && e && q.test(e.name) && T.console.warn(\"jQuery.Deferred exception: \" + e.message, e.stack, t);\n  }, S.readyException = function (e) {\n    T.setTimeout(function () {\n      throw e;\n    });\n  };\n  var W = S.Deferred();\n\n  function B() {\n    C.removeEventListener(\"DOMContentLoaded\", B), T.removeEventListener(\"load\", B), S.ready();\n  }\n\n  S.fn.ready = function (e) {\n    return W.then(e)[\"catch\"](function (e) {\n      S.readyException(e);\n    }), this;\n  }, S.extend({\n    isReady: !1,\n    readyWait: 1,\n    ready: function ready(e) {\n      (!0 === e ? --S.readyWait : S.isReady) || (S.isReady = !0) !== e && 0 < --S.readyWait || W.resolveWith(C, [S]);\n    }\n  }), S.ready.then = W.then, \"complete\" === C.readyState || \"loading\" !== C.readyState && !C.documentElement.doScroll ? T.setTimeout(S.ready) : (C.addEventListener(\"DOMContentLoaded\", B), T.addEventListener(\"load\", B));\n\n  var R = function R(e, t, i, n, s, r, a) {\n    var o = 0,\n        l = e.length,\n        d = null == i;\n    if (\"object\" === f(i)) for (o in s = !0, i) {\n      R(e, t, o, i[o], !0, r, a);\n    } else if (void 0 !== n && (s = !0, b(n) || (a = !0), t = d ? a ? (t.call(e, n), null) : (d = t, function (e, t, i) {\n      return d.call(S(e), i);\n    }) : t)) for (; o < l; o++) {\n      t(e[o], i, a ? n : n.call(e[o], o, t(e[o], i)));\n    }\n    return s ? e : d ? t.call(e) : l ? t(e[0], i) : r;\n  },\n      F = /^-ms-/,\n      G = /-([a-z])/g;\n\n  function X(e, t) {\n    return t.toUpperCase();\n  }\n\n  function Y(e) {\n    return e.replace(F, \"ms-\").replace(G, X);\n  }\n\n  function V(e) {\n    return 1 === e.nodeType || 9 === e.nodeType || !+e.nodeType;\n  }\n\n  function _() {\n    this.expando = S.expando + _.uid++;\n  }\n\n  _.uid = 1, _.prototype = {\n    cache: function cache(e) {\n      var t = e[this.expando];\n      return t || (t = {}, V(e) && (e.nodeType ? e[this.expando] = t : Object.defineProperty(e, this.expando, {\n        value: t,\n        configurable: !0\n      }))), t;\n    },\n    set: function set(e, t, i) {\n      var n,\n          s = this.cache(e);\n      if (\"string\" == typeof t) s[Y(t)] = i;else for (n in t) {\n        s[Y(n)] = t[n];\n      }\n      return s;\n    },\n    get: function get(e, t) {\n      return void 0 === t ? this.cache(e) : e[this.expando] && e[this.expando][Y(t)];\n    },\n    access: function access(e, t, i) {\n      return void 0 === t || t && \"string\" == typeof t && void 0 === i ? this.get(e, t) : (this.set(e, t, i), void 0 !== i ? i : t);\n    },\n    remove: function remove(e, t) {\n      var i,\n          n = e[this.expando];\n\n      if (void 0 !== n) {\n        if (void 0 !== t) {\n          i = (t = Array.isArray(t) ? t.map(Y) : (t = Y(t)) in n ? [t] : t.match(O) || []).length;\n\n          for (; i--;) {\n            delete n[t[i]];\n          }\n        }\n\n        void 0 !== t && !S.isEmptyObject(n) || (e.nodeType ? e[this.expando] = void 0 : delete e[this.expando]);\n      }\n    },\n    hasData: function hasData(e) {\n      e = e[this.expando];\n      return void 0 !== e && !S.isEmptyObject(e);\n    }\n  };\n  var U = new _(),\n      K = new _(),\n      Q = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n      J = /[A-Z]/g;\n\n  function Z(e, t, i) {\n    var n, s;\n    if (void 0 === i && 1 === e.nodeType) if (n = \"data-\" + t.replace(J, \"-$&\").toLowerCase(), \"string\" == typeof (i = e.getAttribute(n))) {\n      try {\n        i = \"true\" === (s = i) || \"false\" !== s && (\"null\" === s ? null : s === +s + \"\" ? +s : Q.test(s) ? JSON.parse(s) : s);\n      } catch (e) {}\n\n      K.set(e, t, i);\n    } else i = void 0;\n    return i;\n  }\n\n  S.extend({\n    hasData: function hasData(e) {\n      return K.hasData(e) || U.hasData(e);\n    },\n    data: function data(e, t, i) {\n      return K.access(e, t, i);\n    },\n    removeData: function removeData(e, t) {\n      K.remove(e, t);\n    },\n    _data: function _data(e, t, i) {\n      return U.access(e, t, i);\n    },\n    _removeData: function _removeData(e, t) {\n      U.remove(e, t);\n    }\n  }), S.fn.extend({\n    data: function data(i, e) {\n      var t,\n          n,\n          s,\n          r = this[0],\n          a = r && r.attributes;\n      if (void 0 !== i) return \"object\" == _typeof(i) ? this.each(function () {\n        K.set(this, i);\n      }) : R(this, function (e) {\n        var t;\n        return r && void 0 === e ? void 0 !== (t = K.get(r, i)) || void 0 !== (t = Z(r, i)) ? t : void 0 : void this.each(function () {\n          K.set(this, i, e);\n        });\n      }, null, e, 1 < arguments.length, null, !0);\n\n      if (this.length && (s = K.get(r), 1 === r.nodeType && !U.get(r, \"hasDataAttrs\"))) {\n        for (t = a.length; t--;) {\n          a[t] && 0 === (n = a[t].name).indexOf(\"data-\") && (n = Y(n.slice(5)), Z(r, n, s[n]));\n        }\n\n        U.set(r, \"hasDataAttrs\", !0);\n      }\n\n      return s;\n    },\n    removeData: function removeData(e) {\n      return this.each(function () {\n        K.remove(this, e);\n      });\n    }\n  }), S.extend({\n    queue: function queue(e, t, i) {\n      var n;\n      if (e) return t = (t || \"fx\") + \"queue\", n = U.get(e, t), i && (!n || Array.isArray(i) ? n = U.access(e, t, S.makeArray(i)) : n.push(i)), n || [];\n    },\n    dequeue: function dequeue(e, t) {\n      t = t || \"fx\";\n\n      var i = S.queue(e, t),\n          n = i.length,\n          s = i.shift(),\n          r = S._queueHooks(e, t);\n\n      \"inprogress\" === s && (s = i.shift(), n--), s && (\"fx\" === t && i.unshift(\"inprogress\"), delete r.stop, s.call(e, function () {\n        S.dequeue(e, t);\n      }, r)), !n && r && r.empty.fire();\n    },\n    _queueHooks: function _queueHooks(e, t) {\n      var i = t + \"queueHooks\";\n      return U.get(e, i) || U.access(e, i, {\n        empty: S.Callbacks(\"once memory\").add(function () {\n          U.remove(e, [t + \"queue\", i]);\n        })\n      });\n    }\n  }), S.fn.extend({\n    queue: function queue(t, i) {\n      var e = 2;\n      return \"string\" != typeof t && (i = t, t = \"fx\", e--), arguments.length < e ? S.queue(this[0], t) : void 0 === i ? this : this.each(function () {\n        var e = S.queue(this, t, i);\n        S._queueHooks(this, t), \"fx\" === t && \"inprogress\" !== e[0] && S.dequeue(this, t);\n      });\n    },\n    dequeue: function dequeue(e) {\n      return this.each(function () {\n        S.dequeue(this, e);\n      });\n    },\n    clearQueue: function clearQueue(e) {\n      return this.queue(e || \"fx\", []);\n    },\n    promise: function promise(e, t) {\n      function i() {\n        --s || r.resolveWith(a, [a]);\n      }\n\n      var n,\n          s = 1,\n          r = S.Deferred(),\n          a = this,\n          o = this.length;\n\n      for (\"string\" != typeof e && (t = e, e = void 0), e = e || \"fx\"; o--;) {\n        (n = U.get(a[o], e + \"queueHooks\")) && n.empty && (s++, n.empty.add(i));\n      }\n\n      return i(), r.promise(t);\n    }\n  });\n\n  var ee = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,\n      te = new RegExp(\"^(?:([+-])=|)(\" + ee + \")([a-z%]*)$\", \"i\"),\n      ie = [\"Top\", \"Right\", \"Bottom\", \"Left\"],\n      ne = C.documentElement,\n      se = function se(e) {\n    return S.contains(e.ownerDocument, e);\n  },\n      re = {\n    composed: !0\n  };\n\n  ne.getRootNode && (se = function se(e) {\n    return S.contains(e.ownerDocument, e) || e.getRootNode(re) === e.ownerDocument;\n  });\n\n  var ae = function ae(e, t) {\n    return \"none\" === (e = t || e).style.display || \"\" === e.style.display && se(e) && \"none\" === S.css(e, \"display\");\n  };\n\n  function oe(e, t, i, n) {\n    var s,\n        r,\n        a = 20,\n        o = n ? function () {\n      return n.cur();\n    } : function () {\n      return S.css(e, t, \"\");\n    },\n        l = o(),\n        d = i && i[3] || (S.cssNumber[t] ? \"\" : \"px\"),\n        c = e.nodeType && (S.cssNumber[t] || \"px\" !== d && +l) && te.exec(S.css(e, t));\n\n    if (c && c[3] !== d) {\n      for (l /= 2, d = d || c[3], c = +l || 1; a--;) {\n        S.style(e, t, c + d), (1 - r) * (1 - (r = o() / l || .5)) <= 0 && (a = 0), c /= r;\n      }\n\n      c *= 2, S.style(e, t, c + d), i = i || [];\n    }\n\n    return i && (c = +c || +l || 0, s = i[1] ? c + (i[1] + 1) * i[2] : +i[2], n && (n.unit = d, n.start = c, n.end = s)), s;\n  }\n\n  var le = {};\n\n  function de(e, t) {\n    for (var i, n, s, r, a, o = [], l = 0, d = e.length; l < d; l++) {\n      (n = e[l]).style && (i = n.style.display, t ? (\"none\" === i && (o[l] = U.get(n, \"display\") || null, o[l] || (n.style.display = \"\")), \"\" === n.style.display && ae(n) && (o[l] = (a = r = void 0, r = (s = n).ownerDocument, a = s.nodeName, (s = le[a]) || (r = r.body.appendChild(r.createElement(a)), s = S.css(r, \"display\"), r.parentNode.removeChild(r), \"none\" === s && (s = \"block\"), le[a] = s)))) : \"none\" !== i && (o[l] = \"none\", U.set(n, \"display\", i)));\n    }\n\n    for (l = 0; l < d; l++) {\n      null != o[l] && (e[l].style.display = o[l]);\n    }\n\n    return e;\n  }\n\n  S.fn.extend({\n    show: function show() {\n      return de(this, !0);\n    },\n    hide: function hide() {\n      return de(this);\n    },\n    toggle: function toggle(e) {\n      return \"boolean\" == typeof e ? e ? this.show() : this.hide() : this.each(function () {\n        ae(this) ? S(this).show() : S(this).hide();\n      });\n    }\n  });\n  var ce = /^(?:checkbox|radio)$/i,\n      ue = /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i,\n      pe = /^$|^module$|\\/(?:java|ecma)script/i;\n  u = C.createDocumentFragment().appendChild(C.createElement(\"div\")), (h = C.createElement(\"input\")).setAttribute(\"type\", \"radio\"), h.setAttribute(\"checked\", \"checked\"), h.setAttribute(\"name\", \"t\"), u.appendChild(h), y.checkClone = u.cloneNode(!0).cloneNode(!0).lastChild.checked, u.innerHTML = \"<textarea>x</textarea>\", y.noCloneChecked = !!u.cloneNode(!0).lastChild.defaultValue, u.innerHTML = \"<option></option>\", y.option = !!u.lastChild;\n  var he = {\n    thead: [1, \"<table>\", \"</table>\"],\n    col: [2, \"<table><colgroup>\", \"</colgroup></table>\"],\n    tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n    td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n    _default: [0, \"\", \"\"]\n  };\n\n  function fe(e, t) {\n    var i = void 0 !== e.getElementsByTagName ? e.getElementsByTagName(t || \"*\") : void 0 !== e.querySelectorAll ? e.querySelectorAll(t || \"*\") : [];\n    return void 0 === t || t && $(e, t) ? S.merge([e], i) : i;\n  }\n\n  function me(e, t) {\n    for (var i = 0, n = e.length; i < n; i++) {\n      U.set(e[i], \"globalEval\", !t || U.get(t[i], \"globalEval\"));\n    }\n  }\n\n  he.tbody = he.tfoot = he.colgroup = he.caption = he.thead, he.th = he.td, y.option || (he.optgroup = he.option = [1, \"<select multiple='multiple'>\", \"</select>\"]);\n  var ve = /<|&#?\\w+;/;\n\n  function ge(e, t, i, n, s) {\n    for (var r, a, o, l, d, c = t.createDocumentFragment(), u = [], p = 0, h = e.length; p < h; p++) {\n      if ((r = e[p]) || 0 === r) if (\"object\" === f(r)) S.merge(u, r.nodeType ? [r] : r);else if (ve.test(r)) {\n        for (a = a || c.appendChild(t.createElement(\"div\")), o = (ue.exec(r) || [\"\", \"\"])[1].toLowerCase(), o = he[o] || he._default, a.innerHTML = o[1] + S.htmlPrefilter(r) + o[2], d = o[0]; d--;) {\n          a = a.lastChild;\n        }\n\n        S.merge(u, a.childNodes), (a = c.firstChild).textContent = \"\";\n      } else u.push(t.createTextNode(r));\n    }\n\n    for (c.textContent = \"\", p = 0; r = u[p++];) {\n      if (n && -1 < S.inArray(r, n)) s && s.push(r);else if (l = se(r), a = fe(c.appendChild(r), \"script\"), l && me(a), i) for (d = 0; r = a[d++];) {\n        pe.test(r.type || \"\") && i.push(r);\n      }\n    }\n\n    return c;\n  }\n\n  var ye = /^key/,\n      be = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n      we = /^([^.]*)(?:\\.(.+)|)/;\n\n  function xe() {\n    return !0;\n  }\n\n  function Te() {\n    return !1;\n  }\n\n  function Ce(e, t) {\n    return e === function () {\n      try {\n        return C.activeElement;\n      } catch (e) {}\n    }() == (\"focus\" === t);\n  }\n\n  function Se(e, t, i, n, s, r) {\n    var a, o;\n\n    if (\"object\" == _typeof(t)) {\n      for (o in \"string\" != typeof i && (n = n || i, i = void 0), t) {\n        Se(e, o, i, n, t[o], r);\n      }\n\n      return e;\n    }\n\n    if (null == n && null == s ? (s = i, n = i = void 0) : null == s && (\"string\" == typeof i ? (s = n, n = void 0) : (s = n, n = i, i = void 0)), !1 === s) s = Te;else if (!s) return e;\n    return 1 === r && (a = s, (s = function s(e) {\n      return S().off(e), a.apply(this, arguments);\n    }).guid = a.guid || (a.guid = S.guid++)), e.each(function () {\n      S.event.add(this, t, s, n, i);\n    });\n  }\n\n  function Ee(e, s, r) {\n    r ? (U.set(e, s, !1), S.event.add(e, s, {\n      namespace: !1,\n      handler: function handler(e) {\n        var t,\n            i,\n            n = U.get(this, s);\n\n        if (1 & e.isTrigger && this[s]) {\n          if (n.length) (S.event.special[s] || {}).delegateType && e.stopPropagation();else if (n = o.call(arguments), U.set(this, s, n), t = r(this, s), this[s](), n !== (i = U.get(this, s)) || t ? U.set(this, s, !1) : i = {}, n !== i) return e.stopImmediatePropagation(), e.preventDefault(), i.value;\n        } else n.length && (U.set(this, s, {\n          value: S.event.trigger(S.extend(n[0], S.Event.prototype), n.slice(1), this)\n        }), e.stopImmediatePropagation());\n      }\n    })) : void 0 === U.get(e, s) && S.event.add(e, s, xe);\n  }\n\n  S.event = {\n    global: {},\n    add: function add(t, e, i, n, s) {\n      var r,\n          a,\n          o,\n          l,\n          d,\n          c,\n          u,\n          p,\n          h,\n          f = U.get(t);\n      if (V(t)) for (i.handler && (i = (r = i).handler, s = r.selector), s && S.find.matchesSelector(ne, s), i.guid || (i.guid = S.guid++), (o = f.events) || (o = f.events = Object.create(null)), (a = f.handle) || (a = f.handle = function (e) {\n        return void 0 !== S && S.event.triggered !== e.type ? S.event.dispatch.apply(t, arguments) : void 0;\n      }), l = (e = (e || \"\").match(O) || [\"\"]).length; l--;) {\n        u = h = (d = we.exec(e[l]) || [])[1], p = (d[2] || \"\").split(\".\").sort(), u && (c = S.event.special[u] || {}, u = (s ? c.delegateType : c.bindType) || u, c = S.event.special[u] || {}, d = S.extend({\n          type: u,\n          origType: h,\n          data: n,\n          handler: i,\n          guid: i.guid,\n          selector: s,\n          needsContext: s && S.expr.match.needsContext.test(s),\n          namespace: p.join(\".\")\n        }, r), (h = o[u]) || ((h = o[u] = []).delegateCount = 0, c.setup && !1 !== c.setup.call(t, n, p, a) || t.addEventListener && t.addEventListener(u, a)), c.add && (c.add.call(t, d), d.handler.guid || (d.handler.guid = i.guid)), s ? h.splice(h.delegateCount++, 0, d) : h.push(d), S.event.global[u] = !0);\n      }\n    },\n    remove: function remove(e, t, i, n, s) {\n      var r,\n          a,\n          o,\n          l,\n          d,\n          c,\n          u,\n          p,\n          h,\n          f,\n          m,\n          v = U.hasData(e) && U.get(e);\n\n      if (v && (l = v.events)) {\n        for (d = (t = (t || \"\").match(O) || [\"\"]).length; d--;) {\n          if (h = m = (o = we.exec(t[d]) || [])[1], f = (o[2] || \"\").split(\".\").sort(), h) {\n            for (u = S.event.special[h] || {}, p = l[h = (n ? u.delegateType : u.bindType) || h] || [], o = o[2] && new RegExp(\"(^|\\\\.)\" + f.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\"), a = r = p.length; r--;) {\n              c = p[r], !s && m !== c.origType || i && i.guid !== c.guid || o && !o.test(c.namespace) || n && n !== c.selector && (\"**\" !== n || !c.selector) || (p.splice(r, 1), c.selector && p.delegateCount--, u.remove && u.remove.call(e, c));\n            }\n\n            a && !p.length && (u.teardown && !1 !== u.teardown.call(e, f, v.handle) || S.removeEvent(e, h, v.handle), delete l[h]);\n          } else for (h in l) {\n            S.event.remove(e, h + t[d], i, n, !0);\n          }\n        }\n\n        S.isEmptyObject(l) && U.remove(e, \"handle events\");\n      }\n    },\n    dispatch: function dispatch(e) {\n      var t,\n          i,\n          n,\n          s,\n          r,\n          a = new Array(arguments.length),\n          o = S.event.fix(e),\n          l = (U.get(this, \"events\") || Object.create(null))[o.type] || [],\n          e = S.event.special[o.type] || {};\n\n      for (a[0] = o, t = 1; t < arguments.length; t++) {\n        a[t] = arguments[t];\n      }\n\n      if (o.delegateTarget = this, !e.preDispatch || !1 !== e.preDispatch.call(this, o)) {\n        for (r = S.event.handlers.call(this, o, l), t = 0; (n = r[t++]) && !o.isPropagationStopped();) {\n          for (o.currentTarget = n.elem, i = 0; (s = n.handlers[i++]) && !o.isImmediatePropagationStopped();) {\n            o.rnamespace && !1 !== s.namespace && !o.rnamespace.test(s.namespace) || (o.handleObj = s, o.data = s.data, void 0 !== (s = ((S.event.special[s.origType] || {}).handle || s.handler).apply(n.elem, a)) && !1 === (o.result = s) && (o.preventDefault(), o.stopPropagation()));\n          }\n        }\n\n        return e.postDispatch && e.postDispatch.call(this, o), o.result;\n      }\n    },\n    handlers: function handlers(e, t) {\n      var i,\n          n,\n          s,\n          r,\n          a,\n          o = [],\n          l = t.delegateCount,\n          d = e.target;\n      if (l && d.nodeType && !(\"click\" === e.type && 1 <= e.button)) for (; d !== this; d = d.parentNode || this) {\n        if (1 === d.nodeType && (\"click\" !== e.type || !0 !== d.disabled)) {\n          for (r = [], a = {}, i = 0; i < l; i++) {\n            void 0 === a[s = (n = t[i]).selector + \" \"] && (a[s] = n.needsContext ? -1 < S(s, this).index(d) : S.find(s, this, null, [d]).length), a[s] && r.push(n);\n          }\n\n          r.length && o.push({\n            elem: d,\n            handlers: r\n          });\n        }\n      }\n      return d = this, l < t.length && o.push({\n        elem: d,\n        handlers: t.slice(l)\n      }), o;\n    },\n    addProp: function addProp(t, e) {\n      Object.defineProperty(S.Event.prototype, t, {\n        enumerable: !0,\n        configurable: !0,\n        get: b(e) ? function () {\n          if (this.originalEvent) return e(this.originalEvent);\n        } : function () {\n          if (this.originalEvent) return this.originalEvent[t];\n        },\n        set: function set(e) {\n          Object.defineProperty(this, t, {\n            enumerable: !0,\n            configurable: !0,\n            writable: !0,\n            value: e\n          });\n        }\n      });\n    },\n    fix: function fix(e) {\n      return e[S.expando] ? e : new S.Event(e);\n    },\n    special: {\n      load: {\n        noBubble: !0\n      },\n      click: {\n        setup: function setup(e) {\n          e = this || e;\n          return ce.test(e.type) && e.click && $(e, \"input\") && Ee(e, \"click\", xe), !1;\n        },\n        trigger: function trigger(e) {\n          e = this || e;\n          return ce.test(e.type) && e.click && $(e, \"input\") && Ee(e, \"click\"), !0;\n        },\n        _default: function _default(e) {\n          e = e.target;\n          return ce.test(e.type) && e.click && $(e, \"input\") && U.get(e, \"click\") || $(e, \"a\");\n        }\n      },\n      beforeunload: {\n        postDispatch: function postDispatch(e) {\n          void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result);\n        }\n      }\n    }\n  }, S.removeEvent = function (e, t, i) {\n    e.removeEventListener && e.removeEventListener(t, i);\n  }, S.Event = function (e, t) {\n    if (!(this instanceof S.Event)) return new S.Event(e, t);\n    e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && !1 === e.returnValue ? xe : Te, this.target = e.target && 3 === e.target.nodeType ? e.target.parentNode : e.target, this.currentTarget = e.currentTarget, this.relatedTarget = e.relatedTarget) : this.type = e, t && S.extend(this, t), this.timeStamp = e && e.timeStamp || Date.now(), this[S.expando] = !0;\n  }, S.Event.prototype = {\n    constructor: S.Event,\n    isDefaultPrevented: Te,\n    isPropagationStopped: Te,\n    isImmediatePropagationStopped: Te,\n    isSimulated: !1,\n    preventDefault: function preventDefault() {\n      var e = this.originalEvent;\n      this.isDefaultPrevented = xe, e && !this.isSimulated && e.preventDefault();\n    },\n    stopPropagation: function stopPropagation() {\n      var e = this.originalEvent;\n      this.isPropagationStopped = xe, e && !this.isSimulated && e.stopPropagation();\n    },\n    stopImmediatePropagation: function stopImmediatePropagation() {\n      var e = this.originalEvent;\n      this.isImmediatePropagationStopped = xe, e && !this.isSimulated && e.stopImmediatePropagation(), this.stopPropagation();\n    }\n  }, S.each({\n    altKey: !0,\n    bubbles: !0,\n    cancelable: !0,\n    changedTouches: !0,\n    ctrlKey: !0,\n    detail: !0,\n    eventPhase: !0,\n    metaKey: !0,\n    pageX: !0,\n    pageY: !0,\n    shiftKey: !0,\n    view: !0,\n    \"char\": !0,\n    code: !0,\n    charCode: !0,\n    key: !0,\n    keyCode: !0,\n    button: !0,\n    buttons: !0,\n    clientX: !0,\n    clientY: !0,\n    offsetX: !0,\n    offsetY: !0,\n    pointerId: !0,\n    pointerType: !0,\n    screenX: !0,\n    screenY: !0,\n    targetTouches: !0,\n    toElement: !0,\n    touches: !0,\n    which: function which(e) {\n      var t = e.button;\n      return null == e.which && ye.test(e.type) ? null != e.charCode ? e.charCode : e.keyCode : !e.which && void 0 !== t && be.test(e.type) ? 1 & t ? 1 : 2 & t ? 3 : 4 & t ? 2 : 0 : e.which;\n    }\n  }, S.event.addProp), S.each({\n    focus: \"focusin\",\n    blur: \"focusout\"\n  }, function (e, t) {\n    S.event.special[e] = {\n      setup: function setup() {\n        return Ee(this, e, Ce), !1;\n      },\n      trigger: function trigger() {\n        return Ee(this, e), !0;\n      },\n      delegateType: t\n    };\n  }), S.each({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\",\n    pointerenter: \"pointerover\",\n    pointerleave: \"pointerout\"\n  }, function (e, s) {\n    S.event.special[e] = {\n      delegateType: s,\n      bindType: s,\n      handle: function handle(e) {\n        var t,\n            i = e.relatedTarget,\n            n = e.handleObj;\n        return i && (i === this || S.contains(this, i)) || (e.type = n.origType, t = n.handler.apply(this, arguments), e.type = s), t;\n      }\n    };\n  }), S.fn.extend({\n    on: function on(e, t, i, n) {\n      return Se(this, e, t, i, n);\n    },\n    one: function one(e, t, i, n) {\n      return Se(this, e, t, i, n, 1);\n    },\n    off: function off(e, t, i) {\n      var n, s;\n      if (e && e.preventDefault && e.handleObj) return n = e.handleObj, S(e.delegateTarget).off(n.namespace ? n.origType + \".\" + n.namespace : n.origType, n.selector, n.handler), this;\n      if (\"object\" != _typeof(e)) return !1 !== t && \"function\" != typeof t || (i = t, t = void 0), !1 === i && (i = Te), this.each(function () {\n        S.event.remove(this, e, i, t);\n      });\n\n      for (s in e) {\n        this.off(s, t, e[s]);\n      }\n\n      return this;\n    }\n  });\n  var ke = /<script|<style|<link/i,\n      $e = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n      Me = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n  function Ae(e, t) {\n    return $(e, \"table\") && $(11 !== t.nodeType ? t : t.firstChild, \"tr\") && S(e).children(\"tbody\")[0] || e;\n  }\n\n  function Pe(e) {\n    return e.type = (null !== e.getAttribute(\"type\")) + \"/\" + e.type, e;\n  }\n\n  function Le(e) {\n    return \"true/\" === (e.type || \"\").slice(0, 5) ? e.type = e.type.slice(5) : e.removeAttribute(\"type\"), e;\n  }\n\n  function ze(e, t) {\n    var i, n, s, r;\n\n    if (1 === t.nodeType) {\n      if (U.hasData(e) && (r = U.get(e).events)) for (s in U.remove(t, \"handle events\"), r) {\n        for (i = 0, n = r[s].length; i < n; i++) {\n          S.event.add(t, s, r[s][i]);\n        }\n      }\n      K.hasData(e) && (e = K.access(e), e = S.extend({}, e), K.set(t, e));\n    }\n  }\n\n  function Ie(i, n, s, r) {\n    n = v(n);\n    var e,\n        t,\n        a,\n        o,\n        l,\n        d,\n        c = 0,\n        u = i.length,\n        p = u - 1,\n        h = n[0],\n        f = b(h);\n    if (f || 1 < u && \"string\" == typeof h && !y.checkClone && $e.test(h)) return i.each(function (e) {\n      var t = i.eq(e);\n      f && (n[0] = h.call(this, e, t.html())), Ie(t, n, s, r);\n    });\n\n    if (u && (t = (e = ge(n, i[0].ownerDocument, !1, i, r)).firstChild, 1 === e.childNodes.length && (e = t), t || r)) {\n      for (o = (a = S.map(fe(e, \"script\"), Pe)).length; c < u; c++) {\n        l = e, c !== p && (l = S.clone(l, !0, !0), o && S.merge(a, fe(l, \"script\"))), s.call(i[c], l, c);\n      }\n\n      if (o) for (d = a[a.length - 1].ownerDocument, S.map(a, Le), c = 0; c < o; c++) {\n        l = a[c], pe.test(l.type || \"\") && !U.access(l, \"globalEval\") && S.contains(d, l) && (l.src && \"module\" !== (l.type || \"\").toLowerCase() ? S._evalUrl && !l.noModule && S._evalUrl(l.src, {\n          nonce: l.nonce || l.getAttribute(\"nonce\")\n        }, d) : w(l.textContent.replace(Me, \"\"), l, d));\n      }\n    }\n\n    return i;\n  }\n\n  function De(e, t, i) {\n    for (var n, s = t ? S.filter(t, e) : e, r = 0; null != (n = s[r]); r++) {\n      i || 1 !== n.nodeType || S.cleanData(fe(n)), n.parentNode && (i && se(n) && me(fe(n, \"script\")), n.parentNode.removeChild(n));\n    }\n\n    return e;\n  }\n\n  S.extend({\n    htmlPrefilter: function htmlPrefilter(e) {\n      return e;\n    },\n    clone: function clone(e, t, i) {\n      var n,\n          s,\n          r,\n          a,\n          o,\n          l,\n          d,\n          c = e.cloneNode(!0),\n          u = se(e);\n      if (!(y.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || S.isXMLDoc(e))) for (a = fe(c), n = 0, s = (r = fe(e)).length; n < s; n++) {\n        o = r[n], l = a[n], d = void 0, \"input\" === (d = l.nodeName.toLowerCase()) && ce.test(o.type) ? l.checked = o.checked : \"input\" !== d && \"textarea\" !== d || (l.defaultValue = o.defaultValue);\n      }\n      if (t) if (i) for (r = r || fe(e), a = a || fe(c), n = 0, s = r.length; n < s; n++) {\n        ze(r[n], a[n]);\n      } else ze(e, c);\n      return 0 < (a = fe(c, \"script\")).length && me(a, !u && fe(e, \"script\")), c;\n    },\n    cleanData: function cleanData(e) {\n      for (var t, i, n, s = S.event.special, r = 0; void 0 !== (i = e[r]); r++) {\n        if (V(i)) {\n          if (t = i[U.expando]) {\n            if (t.events) for (n in t.events) {\n              s[n] ? S.event.remove(i, n) : S.removeEvent(i, n, t.handle);\n            }\n            i[U.expando] = void 0;\n          }\n\n          i[K.expando] && (i[K.expando] = void 0);\n        }\n      }\n    }\n  }), S.fn.extend({\n    detach: function detach(e) {\n      return De(this, e, !0);\n    },\n    remove: function remove(e) {\n      return De(this, e);\n    },\n    text: function text(e) {\n      return R(this, function (e) {\n        return void 0 === e ? S.text(this) : this.empty().each(function () {\n          1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = e);\n        });\n      }, null, e, arguments.length);\n    },\n    append: function append() {\n      return Ie(this, arguments, function (e) {\n        1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || Ae(this, e).appendChild(e);\n      });\n    },\n    prepend: function prepend() {\n      return Ie(this, arguments, function (e) {\n        var t;\n        1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (t = Ae(this, e)).insertBefore(e, t.firstChild);\n      });\n    },\n    before: function before() {\n      return Ie(this, arguments, function (e) {\n        this.parentNode && this.parentNode.insertBefore(e, this);\n      });\n    },\n    after: function after() {\n      return Ie(this, arguments, function (e) {\n        this.parentNode && this.parentNode.insertBefore(e, this.nextSibling);\n      });\n    },\n    empty: function empty() {\n      for (var e, t = 0; null != (e = this[t]); t++) {\n        1 === e.nodeType && (S.cleanData(fe(e, !1)), e.textContent = \"\");\n      }\n\n      return this;\n    },\n    clone: function clone(e, t) {\n      return e = null != e && e, t = null == t ? e : t, this.map(function () {\n        return S.clone(this, e, t);\n      });\n    },\n    html: function html(e) {\n      return R(this, function (e) {\n        var t = this[0] || {},\n            i = 0,\n            n = this.length;\n        if (void 0 === e && 1 === t.nodeType) return t.innerHTML;\n\n        if (\"string\" == typeof e && !ke.test(e) && !he[(ue.exec(e) || [\"\", \"\"])[1].toLowerCase()]) {\n          e = S.htmlPrefilter(e);\n\n          try {\n            for (; i < n; i++) {\n              1 === (t = this[i] || {}).nodeType && (S.cleanData(fe(t, !1)), t.innerHTML = e);\n            }\n\n            t = 0;\n          } catch (e) {}\n        }\n\n        t && this.empty().append(e);\n      }, null, e, arguments.length);\n    },\n    replaceWith: function replaceWith() {\n      var i = [];\n      return Ie(this, arguments, function (e) {\n        var t = this.parentNode;\n        S.inArray(this, i) < 0 && (S.cleanData(fe(this)), t && t.replaceChild(e, this));\n      }, i);\n    }\n  }), S.each({\n    appendTo: \"append\",\n    prependTo: \"prepend\",\n    insertBefore: \"before\",\n    insertAfter: \"after\",\n    replaceAll: \"replaceWith\"\n  }, function (e, a) {\n    S.fn[e] = function (e) {\n      for (var t, i = [], n = S(e), s = n.length - 1, r = 0; r <= s; r++) {\n        t = r === s ? this : this.clone(!0), S(n[r])[a](t), l.apply(i, t.get());\n      }\n\n      return this.pushStack(i);\n    };\n  });\n\n  function Oe(e, t, i) {\n    var n,\n        s = {};\n\n    for (n in t) {\n      s[n] = e.style[n], e.style[n] = t[n];\n    }\n\n    for (n in i = i.call(e), t) {\n      e.style[n] = s[n];\n    }\n\n    return i;\n  }\n\n  var He,\n      Ne,\n      je,\n      qe,\n      We,\n      Be,\n      Re,\n      Fe,\n      Ge = new RegExp(\"^(\" + ee + \")(?!px)[a-z%]+$\", \"i\"),\n      Xe = function Xe(e) {\n    var t = e.ownerDocument.defaultView;\n    return (t = !t || !t.opener ? T : t).getComputedStyle(e);\n  },\n      Ye = new RegExp(ie.join(\"|\"), \"i\");\n\n  function Ve() {\n    var e;\n    Fe && (Re.style.cssText = \"position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0\", Fe.style.cssText = \"position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%\", ne.appendChild(Re).appendChild(Fe), e = T.getComputedStyle(Fe), He = \"1%\" !== e.top, Be = 12 === _e(e.marginLeft), Fe.style.right = \"60%\", qe = 36 === _e(e.right), Ne = 36 === _e(e.width), Fe.style.position = \"absolute\", je = 12 === _e(Fe.offsetWidth / 3), ne.removeChild(Re), Fe = null);\n  }\n\n  function _e(e) {\n    return Math.round(parseFloat(e));\n  }\n\n  function Ue(e, t, i) {\n    var n,\n        s,\n        r = e.style;\n    return (i = i || Xe(e)) && (\"\" !== (s = i.getPropertyValue(t) || i[t]) || se(e) || (s = S.style(e, t)), !y.pixelBoxStyles() && Ge.test(s) && Ye.test(t) && (n = r.width, e = r.minWidth, t = r.maxWidth, r.minWidth = r.maxWidth = r.width = s, s = i.width, r.width = n, r.minWidth = e, r.maxWidth = t)), void 0 !== s ? s + \"\" : s;\n  }\n\n  function Ke(e, t) {\n    return {\n      get: function get() {\n        if (!e()) return (this.get = t).apply(this, arguments);\n        delete this.get;\n      }\n    };\n  }\n\n  Re = C.createElement(\"div\"), (Fe = C.createElement(\"div\")).style && (Fe.style.backgroundClip = \"content-box\", Fe.cloneNode(!0).style.backgroundClip = \"\", y.clearCloneStyle = \"content-box\" === Fe.style.backgroundClip, S.extend(y, {\n    boxSizingReliable: function boxSizingReliable() {\n      return Ve(), Ne;\n    },\n    pixelBoxStyles: function pixelBoxStyles() {\n      return Ve(), qe;\n    },\n    pixelPosition: function pixelPosition() {\n      return Ve(), He;\n    },\n    reliableMarginLeft: function reliableMarginLeft() {\n      return Ve(), Be;\n    },\n    scrollboxSize: function scrollboxSize() {\n      return Ve(), je;\n    },\n    reliableTrDimensions: function reliableTrDimensions() {\n      var e, t, i;\n      return null == We && (e = C.createElement(\"table\"), i = C.createElement(\"tr\"), t = C.createElement(\"div\"), e.style.cssText = \"position:absolute;left:-11111px\", i.style.height = \"1px\", t.style.height = \"9px\", ne.appendChild(e).appendChild(i).appendChild(t), i = T.getComputedStyle(i), We = 3 < parseInt(i.height), ne.removeChild(e)), We;\n    }\n  }));\n  var Qe = [\"Webkit\", \"Moz\", \"ms\"],\n      Je = C.createElement(\"div\").style,\n      Ze = {};\n\n  function et(e) {\n    var t = S.cssProps[e] || Ze[e];\n    return t || (e in Je ? e : Ze[e] = function (e) {\n      for (var t = e[0].toUpperCase() + e.slice(1), i = Qe.length; i--;) {\n        if ((e = Qe[i] + t) in Je) return e;\n      }\n    }(e) || e);\n  }\n\n  var tt = /^(none|table(?!-c[ea]).+)/,\n      it = /^--/,\n      nt = {\n    position: \"absolute\",\n    visibility: \"hidden\",\n    display: \"block\"\n  },\n      st = {\n    letterSpacing: \"0\",\n    fontWeight: \"400\"\n  };\n\n  function rt(e, t, i) {\n    var n = te.exec(t);\n    return n ? Math.max(0, n[2] - (i || 0)) + (n[3] || \"px\") : t;\n  }\n\n  function at(e, t, i, n, s, r) {\n    var a = \"width\" === t ? 1 : 0,\n        o = 0,\n        l = 0;\n    if (i === (n ? \"border\" : \"content\")) return 0;\n\n    for (; a < 4; a += 2) {\n      \"margin\" === i && (l += S.css(e, i + ie[a], !0, s)), n ? (\"content\" === i && (l -= S.css(e, \"padding\" + ie[a], !0, s)), \"margin\" !== i && (l -= S.css(e, \"border\" + ie[a] + \"Width\", !0, s))) : (l += S.css(e, \"padding\" + ie[a], !0, s), \"padding\" !== i ? l += S.css(e, \"border\" + ie[a] + \"Width\", !0, s) : o += S.css(e, \"border\" + ie[a] + \"Width\", !0, s));\n    }\n\n    return !n && 0 <= r && (l += Math.max(0, Math.ceil(e[\"offset\" + t[0].toUpperCase() + t.slice(1)] - r - l - o - .5)) || 0), l;\n  }\n\n  function ot(e, t, i) {\n    var n = Xe(e),\n        s = (!y.boxSizingReliable() || i) && \"border-box\" === S.css(e, \"boxSizing\", !1, n),\n        r = s,\n        a = Ue(e, t, n),\n        o = \"offset\" + t[0].toUpperCase() + t.slice(1);\n\n    if (Ge.test(a)) {\n      if (!i) return a;\n      a = \"auto\";\n    }\n\n    return (!y.boxSizingReliable() && s || !y.reliableTrDimensions() && $(e, \"tr\") || \"auto\" === a || !parseFloat(a) && \"inline\" === S.css(e, \"display\", !1, n)) && e.getClientRects().length && (s = \"border-box\" === S.css(e, \"boxSizing\", !1, n), (r = o in e) && (a = e[o])), (a = parseFloat(a) || 0) + at(e, t, i || (s ? \"border\" : \"content\"), r, n, a) + \"px\";\n  }\n\n  function lt(e, t, i, n, s) {\n    return new lt.prototype.init(e, t, i, n, s);\n  }\n\n  S.extend({\n    cssHooks: {\n      opacity: {\n        get: function get(e, t) {\n          if (t) {\n            e = Ue(e, \"opacity\");\n            return \"\" === e ? \"1\" : e;\n          }\n        }\n      }\n    },\n    cssNumber: {\n      animationIterationCount: !0,\n      columnCount: !0,\n      fillOpacity: !0,\n      flexGrow: !0,\n      flexShrink: !0,\n      fontWeight: !0,\n      gridArea: !0,\n      gridColumn: !0,\n      gridColumnEnd: !0,\n      gridColumnStart: !0,\n      gridRow: !0,\n      gridRowEnd: !0,\n      gridRowStart: !0,\n      lineHeight: !0,\n      opacity: !0,\n      order: !0,\n      orphans: !0,\n      widows: !0,\n      zIndex: !0,\n      zoom: !0\n    },\n    cssProps: {},\n    style: function style(e, t, i, n) {\n      if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {\n        var s,\n            r,\n            a,\n            o = Y(t),\n            l = it.test(t),\n            d = e.style;\n        if (l || (t = et(o)), a = S.cssHooks[t] || S.cssHooks[o], void 0 === i) return a && \"get\" in a && void 0 !== (s = a.get(e, !1, n)) ? s : d[t];\n        \"string\" === (r = _typeof(i)) && (s = te.exec(i)) && s[1] && (i = oe(e, t, s), r = \"number\"), null != i && i == i && (\"number\" !== r || l || (i += s && s[3] || (S.cssNumber[o] ? \"\" : \"px\")), y.clearCloneStyle || \"\" !== i || 0 !== t.indexOf(\"background\") || (d[t] = \"inherit\"), a && \"set\" in a && void 0 === (i = a.set(e, i, n)) || (l ? d.setProperty(t, i) : d[t] = i));\n      }\n    },\n    css: function css(e, t, i, n) {\n      var s,\n          r = Y(t);\n      return it.test(t) || (t = et(r)), \"normal\" === (s = void 0 === (s = (r = S.cssHooks[t] || S.cssHooks[r]) && \"get\" in r ? r.get(e, !0, i) : s) ? Ue(e, t, n) : s) && t in st && (s = st[t]), \"\" === i || i ? (t = parseFloat(s), !0 === i || isFinite(t) ? t || 0 : s) : s;\n    }\n  }), S.each([\"height\", \"width\"], function (e, o) {\n    S.cssHooks[o] = {\n      get: function get(e, t, i) {\n        if (t) return !tt.test(S.css(e, \"display\")) || e.getClientRects().length && e.getBoundingClientRect().width ? ot(e, o, i) : Oe(e, nt, function () {\n          return ot(e, o, i);\n        });\n      },\n      set: function set(e, t, i) {\n        var n,\n            s = Xe(e),\n            r = !y.scrollboxSize() && \"absolute\" === s.position,\n            a = (r || i) && \"border-box\" === S.css(e, \"boxSizing\", !1, s),\n            i = i ? at(e, o, i, a, s) : 0;\n        return a && r && (i -= Math.ceil(e[\"offset\" + o[0].toUpperCase() + o.slice(1)] - parseFloat(s[o]) - at(e, o, \"border\", !1, s) - .5)), i && (n = te.exec(t)) && \"px\" !== (n[3] || \"px\") && (e.style[o] = t, t = S.css(e, o)), rt(0, t, i);\n      }\n    };\n  }), S.cssHooks.marginLeft = Ke(y.reliableMarginLeft, function (e, t) {\n    if (t) return (parseFloat(Ue(e, \"marginLeft\")) || e.getBoundingClientRect().left - Oe(e, {\n      marginLeft: 0\n    }, function () {\n      return e.getBoundingClientRect().left;\n    })) + \"px\";\n  }), S.each({\n    margin: \"\",\n    padding: \"\",\n    border: \"Width\"\n  }, function (s, r) {\n    S.cssHooks[s + r] = {\n      expand: function expand(e) {\n        for (var t = 0, i = {}, n = \"string\" == typeof e ? e.split(\" \") : [e]; t < 4; t++) {\n          i[s + ie[t] + r] = n[t] || n[t - 2] || n[0];\n        }\n\n        return i;\n      }\n    }, \"margin\" !== s && (S.cssHooks[s + r].set = rt);\n  }), S.fn.extend({\n    css: function css(e, t) {\n      return R(this, function (e, t, i) {\n        var n,\n            s,\n            r = {},\n            a = 0;\n\n        if (Array.isArray(t)) {\n          for (n = Xe(e), s = t.length; a < s; a++) {\n            r[t[a]] = S.css(e, t[a], !1, n);\n          }\n\n          return r;\n        }\n\n        return void 0 !== i ? S.style(e, t, i) : S.css(e, t);\n      }, e, t, 1 < arguments.length);\n    }\n  }), (S.Tween = lt).prototype = {\n    constructor: lt,\n    init: function init(e, t, i, n, s, r) {\n      this.elem = e, this.prop = i, this.easing = s || S.easing._default, this.options = t, this.start = this.now = this.cur(), this.end = n, this.unit = r || (S.cssNumber[i] ? \"\" : \"px\");\n    },\n    cur: function cur() {\n      var e = lt.propHooks[this.prop];\n      return (e && e.get ? e : lt.propHooks._default).get(this);\n    },\n    run: function run(e) {\n      var t,\n          i = lt.propHooks[this.prop];\n      return this.options.duration ? this.pos = t = S.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : this.pos = t = e, this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), (i && i.set ? i : lt.propHooks._default).set(this), this;\n    }\n  }, lt.prototype.init.prototype = lt.prototype, lt.propHooks = {\n    _default: {\n      get: function get(e) {\n        return 1 !== e.elem.nodeType || null != e.elem[e.prop] && null == e.elem.style[e.prop] ? e.elem[e.prop] : (e = S.css(e.elem, e.prop, \"\")) && \"auto\" !== e ? e : 0;\n      },\n      set: function set(e) {\n        S.fx.step[e.prop] ? S.fx.step[e.prop](e) : 1 !== e.elem.nodeType || !S.cssHooks[e.prop] && null == e.elem.style[et(e.prop)] ? e.elem[e.prop] = e.now : S.style(e.elem, e.prop, e.now + e.unit);\n      }\n    }\n  }, lt.propHooks.scrollTop = lt.propHooks.scrollLeft = {\n    set: function set(e) {\n      e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now);\n    }\n  }, S.easing = {\n    linear: function linear(e) {\n      return e;\n    },\n    swing: function swing(e) {\n      return .5 - Math.cos(e * Math.PI) / 2;\n    },\n    _default: \"swing\"\n  }, S.fx = lt.prototype.init, S.fx.step = {};\n  var dt,\n      ct,\n      ut = /^(?:toggle|show|hide)$/,\n      pt = /queueHooks$/;\n\n  function ht() {\n    ct && (!1 === C.hidden && T.requestAnimationFrame ? T.requestAnimationFrame(ht) : T.setTimeout(ht, S.fx.interval), S.fx.tick());\n  }\n\n  function ft() {\n    return T.setTimeout(function () {\n      dt = void 0;\n    }), dt = Date.now();\n  }\n\n  function mt(e, t) {\n    var i,\n        n = 0,\n        s = {\n      height: e\n    };\n\n    for (t = t ? 1 : 0; n < 4; n += 2 - t) {\n      s[\"margin\" + (i = ie[n])] = s[\"padding\" + i] = e;\n    }\n\n    return t && (s.opacity = s.width = e), s;\n  }\n\n  function vt(e, t, i) {\n    for (var n, s = (gt.tweeners[t] || []).concat(gt.tweeners[\"*\"]), r = 0, a = s.length; r < a; r++) {\n      if (n = s[r].call(i, t, e)) return n;\n    }\n  }\n\n  function gt(s, e, t) {\n    var i,\n        r,\n        n = 0,\n        a = gt.prefilters.length,\n        o = S.Deferred().always(function () {\n      delete l.elem;\n    }),\n        l = function l() {\n      if (r) return !1;\n\n      for (var e = dt || ft(), e = Math.max(0, d.startTime + d.duration - e), t = 1 - (e / d.duration || 0), i = 0, n = d.tweens.length; i < n; i++) {\n        d.tweens[i].run(t);\n      }\n\n      return o.notifyWith(s, [d, t, e]), t < 1 && n ? e : (n || o.notifyWith(s, [d, 1, 0]), o.resolveWith(s, [d]), !1);\n    },\n        d = o.promise({\n      elem: s,\n      props: S.extend({}, e),\n      opts: S.extend(!0, {\n        specialEasing: {},\n        easing: S.easing._default\n      }, t),\n      originalProperties: e,\n      originalOptions: t,\n      startTime: dt || ft(),\n      duration: t.duration,\n      tweens: [],\n      createTween: function createTween(e, t) {\n        e = S.Tween(s, d.opts, e, t, d.opts.specialEasing[e] || d.opts.easing);\n        return d.tweens.push(e), e;\n      },\n      stop: function stop(e) {\n        var t = 0,\n            i = e ? d.tweens.length : 0;\n        if (r) return this;\n\n        for (r = !0; t < i; t++) {\n          d.tweens[t].run(1);\n        }\n\n        return e ? (o.notifyWith(s, [d, 1, 0]), o.resolveWith(s, [d, e])) : o.rejectWith(s, [d, e]), this;\n      }\n    }),\n        c = d.props;\n\n    for (!function (e, t) {\n      var i, n, s, r, a;\n\n      for (i in e) {\n        if (s = t[n = Y(i)], r = e[i], Array.isArray(r) && (s = r[1], r = e[i] = r[0]), i !== n && (e[n] = r, delete e[i]), (a = S.cssHooks[n]) && (\"expand\" in a)) for (i in r = a.expand(r), delete e[n], r) {\n          (i in e) || (e[i] = r[i], t[i] = s);\n        } else t[n] = s;\n      }\n    }(c, d.opts.specialEasing); n < a; n++) {\n      if (i = gt.prefilters[n].call(d, s, c, d.opts)) return b(i.stop) && (S._queueHooks(d.elem, d.opts.queue).stop = i.stop.bind(i)), i;\n    }\n\n    return S.map(c, vt, d), b(d.opts.start) && d.opts.start.call(s, d), d.progress(d.opts.progress).done(d.opts.done, d.opts.complete).fail(d.opts.fail).always(d.opts.always), S.fx.timer(S.extend(l, {\n      elem: s,\n      anim: d,\n      queue: d.opts.queue\n    })), d;\n  }\n\n  S.Animation = S.extend(gt, {\n    tweeners: {\n      \"*\": [function (e, t) {\n        var i = this.createTween(e, t);\n        return oe(i.elem, e, te.exec(t), i), i;\n      }]\n    },\n    tweener: function tweener(e, t) {\n      for (var i, n = 0, s = (e = b(e) ? (t = e, [\"*\"]) : e.match(O)).length; n < s; n++) {\n        i = e[n], gt.tweeners[i] = gt.tweeners[i] || [], gt.tweeners[i].unshift(t);\n      }\n    },\n    prefilters: [function (e, t, i) {\n      var n,\n          s,\n          r,\n          a,\n          o,\n          l,\n          d,\n          c = \"width\" in t || \"height\" in t,\n          u = this,\n          p = {},\n          h = e.style,\n          f = e.nodeType && ae(e),\n          m = U.get(e, \"fxshow\");\n\n      for (n in i.queue || (null == (a = S._queueHooks(e, \"fx\")).unqueued && (a.unqueued = 0, o = a.empty.fire, a.empty.fire = function () {\n        a.unqueued || o();\n      }), a.unqueued++, u.always(function () {\n        u.always(function () {\n          a.unqueued--, S.queue(e, \"fx\").length || a.empty.fire();\n        });\n      })), t) {\n        if (s = t[n], ut.test(s)) {\n          if (delete t[n], r = r || \"toggle\" === s, s === (f ? \"hide\" : \"show\")) {\n            if (\"show\" !== s || !m || void 0 === m[n]) continue;\n            f = !0;\n          }\n\n          p[n] = m && m[n] || S.style(e, n);\n        }\n      }\n\n      if ((l = !S.isEmptyObject(t)) || !S.isEmptyObject(p)) for (n in c && 1 === e.nodeType && (i.overflow = [h.overflow, h.overflowX, h.overflowY], null == (d = m && m.display) && (d = U.get(e, \"display\")), \"none\" === (c = S.css(e, \"display\")) && (d ? c = d : (de([e], !0), d = e.style.display || d, c = S.css(e, \"display\"), de([e]))), (\"inline\" === c || \"inline-block\" === c && null != d) && \"none\" === S.css(e, \"float\") && (l || (u.done(function () {\n        h.display = d;\n      }), null == d && (c = h.display, d = \"none\" === c ? \"\" : c)), h.display = \"inline-block\")), i.overflow && (h.overflow = \"hidden\", u.always(function () {\n        h.overflow = i.overflow[0], h.overflowX = i.overflow[1], h.overflowY = i.overflow[2];\n      })), l = !1, p) {\n        l || (m ? \"hidden\" in m && (f = m.hidden) : m = U.access(e, \"fxshow\", {\n          display: d\n        }), r && (m.hidden = !f), f && de([e], !0), u.done(function () {\n          for (n in f || de([e]), U.remove(e, \"fxshow\"), p) {\n            S.style(e, n, p[n]);\n          }\n        })), l = vt(f ? m[n] : 0, n, u), n in m || (m[n] = l.start, f && (l.end = l.start, l.start = 0));\n      }\n    }],\n    prefilter: function prefilter(e, t) {\n      t ? gt.prefilters.unshift(e) : gt.prefilters.push(e);\n    }\n  }), S.speed = function (e, t, i) {\n    var n = e && \"object\" == _typeof(e) ? S.extend({}, e) : {\n      complete: i || !i && t || b(e) && e,\n      duration: e,\n      easing: i && t || t && !b(t) && t\n    };\n    return S.fx.off ? n.duration = 0 : \"number\" != typeof n.duration && (n.duration in S.fx.speeds ? n.duration = S.fx.speeds[n.duration] : n.duration = S.fx.speeds._default), null != n.queue && !0 !== n.queue || (n.queue = \"fx\"), n.old = n.complete, n.complete = function () {\n      b(n.old) && n.old.call(this), n.queue && S.dequeue(this, n.queue);\n    }, n;\n  }, S.fn.extend({\n    fadeTo: function fadeTo(e, t, i, n) {\n      return this.filter(ae).css(\"opacity\", 0).show().end().animate({\n        opacity: t\n      }, e, i, n);\n    },\n    animate: function animate(t, e, i, n) {\n      var s = S.isEmptyObject(t),\n          r = S.speed(e, i, n),\n          n = function n() {\n        var e = gt(this, S.extend({}, t), r);\n        (s || U.get(this, \"finish\")) && e.stop(!0);\n      };\n\n      return n.finish = n, s || !1 === r.queue ? this.each(n) : this.queue(r.queue, n);\n    },\n    stop: function stop(s, e, r) {\n      function a(e) {\n        var t = e.stop;\n        delete e.stop, t(r);\n      }\n\n      return \"string\" != typeof s && (r = e, e = s, s = void 0), e && this.queue(s || \"fx\", []), this.each(function () {\n        var e = !0,\n            t = null != s && s + \"queueHooks\",\n            i = S.timers,\n            n = U.get(this);\n        if (t) n[t] && n[t].stop && a(n[t]);else for (t in n) {\n          n[t] && n[t].stop && pt.test(t) && a(n[t]);\n        }\n\n        for (t = i.length; t--;) {\n          i[t].elem !== this || null != s && i[t].queue !== s || (i[t].anim.stop(r), e = !1, i.splice(t, 1));\n        }\n\n        !e && r || S.dequeue(this, s);\n      });\n    },\n    finish: function finish(a) {\n      return !1 !== a && (a = a || \"fx\"), this.each(function () {\n        var e,\n            t = U.get(this),\n            i = t[a + \"queue\"],\n            n = t[a + \"queueHooks\"],\n            s = S.timers,\n            r = i ? i.length : 0;\n\n        for (t.finish = !0, S.queue(this, a, []), n && n.stop && n.stop.call(this, !0), e = s.length; e--;) {\n          s[e].elem === this && s[e].queue === a && (s[e].anim.stop(!0), s.splice(e, 1));\n        }\n\n        for (e = 0; e < r; e++) {\n          i[e] && i[e].finish && i[e].finish.call(this);\n        }\n\n        delete t.finish;\n      });\n    }\n  }), S.each([\"toggle\", \"show\", \"hide\"], function (e, n) {\n    var s = S.fn[n];\n\n    S.fn[n] = function (e, t, i) {\n      return null == e || \"boolean\" == typeof e ? s.apply(this, arguments) : this.animate(mt(n, !0), e, t, i);\n    };\n  }), S.each({\n    slideDown: mt(\"show\"),\n    slideUp: mt(\"hide\"),\n    slideToggle: mt(\"toggle\"),\n    fadeIn: {\n      opacity: \"show\"\n    },\n    fadeOut: {\n      opacity: \"hide\"\n    },\n    fadeToggle: {\n      opacity: \"toggle\"\n    }\n  }, function (e, n) {\n    S.fn[e] = function (e, t, i) {\n      return this.animate(n, e, t, i);\n    };\n  }), S.timers = [], S.fx.tick = function () {\n    var e,\n        t = 0,\n        i = S.timers;\n\n    for (dt = Date.now(); t < i.length; t++) {\n      (e = i[t])() || i[t] !== e || i.splice(t--, 1);\n    }\n\n    i.length || S.fx.stop(), dt = void 0;\n  }, S.fx.timer = function (e) {\n    S.timers.push(e), S.fx.start();\n  }, S.fx.interval = 13, S.fx.start = function () {\n    ct || (ct = !0, ht());\n  }, S.fx.stop = function () {\n    ct = null;\n  }, S.fx.speeds = {\n    slow: 600,\n    fast: 200,\n    _default: 400\n  }, S.fn.delay = function (n, e) {\n    return n = S.fx && S.fx.speeds[n] || n, e = e || \"fx\", this.queue(e, function (e, t) {\n      var i = T.setTimeout(e, n);\n\n      t.stop = function () {\n        T.clearTimeout(i);\n      };\n    });\n  }, u = C.createElement(\"input\"), ee = C.createElement(\"select\").appendChild(C.createElement(\"option\")), u.type = \"checkbox\", y.checkOn = \"\" !== u.value, y.optSelected = ee.selected, (u = C.createElement(\"input\")).value = \"t\", u.type = \"radio\", y.radioValue = \"t\" === u.value;\n  var yt,\n      bt = S.expr.attrHandle;\n  S.fn.extend({\n    attr: function attr(e, t) {\n      return R(this, S.attr, e, t, 1 < arguments.length);\n    },\n    removeAttr: function removeAttr(e) {\n      return this.each(function () {\n        S.removeAttr(this, e);\n      });\n    }\n  }), S.extend({\n    attr: function attr(e, t, i) {\n      var n,\n          s,\n          r = e.nodeType;\n      if (3 !== r && 8 !== r && 2 !== r) return void 0 === e.getAttribute ? S.prop(e, t, i) : (1 === r && S.isXMLDoc(e) || (s = S.attrHooks[t.toLowerCase()] || (S.expr.match.bool.test(t) ? yt : void 0)), void 0 !== i ? null === i ? void S.removeAttr(e, t) : s && \"set\" in s && void 0 !== (n = s.set(e, i, t)) ? n : (e.setAttribute(t, i + \"\"), i) : !(s && \"get\" in s && null !== (n = s.get(e, t))) && null == (n = S.find.attr(e, t)) ? void 0 : n);\n    },\n    attrHooks: {\n      type: {\n        set: function set(e, t) {\n          if (!y.radioValue && \"radio\" === t && $(e, \"input\")) {\n            var i = e.value;\n            return e.setAttribute(\"type\", t), i && (e.value = i), t;\n          }\n        }\n      }\n    },\n    removeAttr: function removeAttr(e, t) {\n      var i,\n          n = 0,\n          s = t && t.match(O);\n      if (s && 1 === e.nodeType) for (; i = s[n++];) {\n        e.removeAttribute(i);\n      }\n    }\n  }), yt = {\n    set: function set(e, t, i) {\n      return !1 === t ? S.removeAttr(e, i) : e.setAttribute(i, i), i;\n    }\n  }, S.each(S.expr.match.bool.source.match(/\\w+/g), function (e, t) {\n    var a = bt[t] || S.find.attr;\n\n    bt[t] = function (e, t, i) {\n      var n,\n          s,\n          r = t.toLowerCase();\n      return i || (s = bt[r], bt[r] = n, n = null != a(e, t, i) ? r : null, bt[r] = s), n;\n    };\n  });\n  var wt = /^(?:input|select|textarea|button)$/i,\n      xt = /^(?:a|area)$/i;\n\n  function Tt(e) {\n    return (e.match(O) || []).join(\" \");\n  }\n\n  function Ct(e) {\n    return e.getAttribute && e.getAttribute(\"class\") || \"\";\n  }\n\n  function St(e) {\n    return Array.isArray(e) ? e : \"string\" == typeof e && e.match(O) || [];\n  }\n\n  S.fn.extend({\n    prop: function prop(e, t) {\n      return R(this, S.prop, e, t, 1 < arguments.length);\n    },\n    removeProp: function removeProp(e) {\n      return this.each(function () {\n        delete this[S.propFix[e] || e];\n      });\n    }\n  }), S.extend({\n    prop: function prop(e, t, i) {\n      var n,\n          s,\n          r = e.nodeType;\n      if (3 !== r && 8 !== r && 2 !== r) return 1 === r && S.isXMLDoc(e) || (t = S.propFix[t] || t, s = S.propHooks[t]), void 0 !== i ? s && \"set\" in s && void 0 !== (n = s.set(e, i, t)) ? n : e[t] = i : s && \"get\" in s && null !== (n = s.get(e, t)) ? n : e[t];\n    },\n    propHooks: {\n      tabIndex: {\n        get: function get(e) {\n          var t = S.find.attr(e, \"tabindex\");\n          return t ? parseInt(t, 10) : wt.test(e.nodeName) || xt.test(e.nodeName) && e.href ? 0 : -1;\n        }\n      }\n    },\n    propFix: {\n      \"for\": \"htmlFor\",\n      \"class\": \"className\"\n    }\n  }), y.optSelected || (S.propHooks.selected = {\n    get: function get(e) {\n      e = e.parentNode;\n      return e && e.parentNode && e.parentNode.selectedIndex, null;\n    },\n    set: function set(e) {\n      e = e.parentNode;\n      e && (e.selectedIndex, e.parentNode && e.parentNode.selectedIndex);\n    }\n  }), S.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\n    S.propFix[this.toLowerCase()] = this;\n  }), S.fn.extend({\n    addClass: function addClass(t) {\n      var e,\n          i,\n          n,\n          s,\n          r,\n          a,\n          o = 0;\n      if (b(t)) return this.each(function (e) {\n        S(this).addClass(t.call(this, e, Ct(this)));\n      });\n      if ((e = St(t)).length) for (; i = this[o++];) {\n        if (a = Ct(i), n = 1 === i.nodeType && \" \" + Tt(a) + \" \") {\n          for (r = 0; s = e[r++];) {\n            n.indexOf(\" \" + s + \" \") < 0 && (n += s + \" \");\n          }\n\n          a !== (a = Tt(n)) && i.setAttribute(\"class\", a);\n        }\n      }\n      return this;\n    },\n    removeClass: function removeClass(t) {\n      var e,\n          i,\n          n,\n          s,\n          r,\n          a,\n          o = 0;\n      if (b(t)) return this.each(function (e) {\n        S(this).removeClass(t.call(this, e, Ct(this)));\n      });\n      if (!arguments.length) return this.attr(\"class\", \"\");\n      if ((e = St(t)).length) for (; i = this[o++];) {\n        if (a = Ct(i), n = 1 === i.nodeType && \" \" + Tt(a) + \" \") {\n          for (r = 0; s = e[r++];) {\n            for (; -1 < n.indexOf(\" \" + s + \" \");) {\n              n = n.replace(\" \" + s + \" \", \" \");\n            }\n          }\n\n          a !== (a = Tt(n)) && i.setAttribute(\"class\", a);\n        }\n      }\n      return this;\n    },\n    toggleClass: function toggleClass(s, t) {\n      var r = _typeof(s),\n          a = \"string\" == r || Array.isArray(s);\n\n      return \"boolean\" == typeof t && a ? t ? this.addClass(s) : this.removeClass(s) : b(s) ? this.each(function (e) {\n        S(this).toggleClass(s.call(this, e, Ct(this), t), t);\n      }) : this.each(function () {\n        var e, t, i, n;\n        if (a) for (t = 0, i = S(this), n = St(s); e = n[t++];) {\n          i.hasClass(e) ? i.removeClass(e) : i.addClass(e);\n        } else void 0 !== s && \"boolean\" != r || ((e = Ct(this)) && U.set(this, \"__className__\", e), this.setAttribute && this.setAttribute(\"class\", !e && !1 !== s && U.get(this, \"__className__\") || \"\"));\n      });\n    },\n    hasClass: function hasClass(e) {\n      for (var t, i = 0, n = \" \" + e + \" \"; t = this[i++];) {\n        if (1 === t.nodeType && -1 < (\" \" + Tt(Ct(t)) + \" \").indexOf(n)) return !0;\n      }\n\n      return !1;\n    }\n  });\n  var Et = /\\r/g;\n  S.fn.extend({\n    val: function val(t) {\n      var i,\n          e,\n          n,\n          s = this[0];\n      return arguments.length ? (n = b(t), this.each(function (e) {\n        1 === this.nodeType && (null == (e = n ? t.call(this, e, S(this).val()) : t) ? e = \"\" : \"number\" == typeof e ? e += \"\" : Array.isArray(e) && (e = S.map(e, function (e) {\n          return null == e ? \"\" : e + \"\";\n        })), (i = S.valHooks[this.type] || S.valHooks[this.nodeName.toLowerCase()]) && \"set\" in i && void 0 !== i.set(this, e, \"value\") || (this.value = e));\n      })) : s ? (i = S.valHooks[s.type] || S.valHooks[s.nodeName.toLowerCase()]) && \"get\" in i && void 0 !== (e = i.get(s, \"value\")) ? e : \"string\" == typeof (e = s.value) ? e.replace(Et, \"\") : null == e ? \"\" : e : void 0;\n    }\n  }), S.extend({\n    valHooks: {\n      option: {\n        get: function get(e) {\n          var t = S.find.attr(e, \"value\");\n          return null != t ? t : Tt(S.text(e));\n        }\n      },\n      select: {\n        get: function get(e) {\n          for (var t, i = e.options, n = e.selectedIndex, s = \"select-one\" === e.type, r = s ? null : [], a = s ? n + 1 : i.length, o = n < 0 ? a : s ? n : 0; o < a; o++) {\n            if (((t = i[o]).selected || o === n) && !t.disabled && (!t.parentNode.disabled || !$(t.parentNode, \"optgroup\"))) {\n              if (t = S(t).val(), s) return t;\n              r.push(t);\n            }\n          }\n\n          return r;\n        },\n        set: function set(e, t) {\n          for (var i, n, s = e.options, r = S.makeArray(t), a = s.length; a--;) {\n            ((n = s[a]).selected = -1 < S.inArray(S.valHooks.option.get(n), r)) && (i = !0);\n          }\n\n          return i || (e.selectedIndex = -1), r;\n        }\n      }\n    }\n  }), S.each([\"radio\", \"checkbox\"], function () {\n    S.valHooks[this] = {\n      set: function set(e, t) {\n        if (Array.isArray(t)) return e.checked = -1 < S.inArray(S(e).val(), t);\n      }\n    }, y.checkOn || (S.valHooks[this].get = function (e) {\n      return null === e.getAttribute(\"value\") ? \"on\" : e.value;\n    });\n  }), y.focusin = \"onfocusin\" in T;\n\n  function kt(e) {\n    e.stopPropagation();\n  }\n\n  var $t = /^(?:focusinfocus|focusoutblur)$/;\n  S.extend(S.event, {\n    trigger: function trigger(e, t, i, n) {\n      var s,\n          r,\n          a,\n          o,\n          l,\n          d,\n          c,\n          u = [i || C],\n          p = g.call(e, \"type\") ? e.type : e,\n          h = g.call(e, \"namespace\") ? e.namespace.split(\".\") : [],\n          f = c = r = i = i || C;\n\n      if (3 !== i.nodeType && 8 !== i.nodeType && !$t.test(p + S.event.triggered) && (-1 < p.indexOf(\".\") && (p = (h = p.split(\".\")).shift(), h.sort()), o = p.indexOf(\":\") < 0 && \"on\" + p, (e = e[S.expando] ? e : new S.Event(p, \"object\" == _typeof(e) && e)).isTrigger = n ? 2 : 3, e.namespace = h.join(\".\"), e.rnamespace = e.namespace ? new RegExp(\"(^|\\\\.)\" + h.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null, e.result = void 0, e.target || (e.target = i), t = null == t ? [e] : S.makeArray(t, [e]), d = S.event.special[p] || {}, n || !d.trigger || !1 !== d.trigger.apply(i, t))) {\n        if (!n && !d.noBubble && !m(i)) {\n          for (a = d.delegateType || p, $t.test(a + p) || (f = f.parentNode); f; f = f.parentNode) {\n            u.push(f), r = f;\n          }\n\n          r === (i.ownerDocument || C) && u.push(r.defaultView || r.parentWindow || T);\n        }\n\n        for (s = 0; (f = u[s++]) && !e.isPropagationStopped();) {\n          c = f, e.type = 1 < s ? a : d.bindType || p, (l = (U.get(f, \"events\") || Object.create(null))[e.type] && U.get(f, \"handle\")) && l.apply(f, t), (l = o && f[o]) && l.apply && V(f) && (e.result = l.apply(f, t), !1 === e.result && e.preventDefault());\n        }\n\n        return e.type = p, n || e.isDefaultPrevented() || d._default && !1 !== d._default.apply(u.pop(), t) || !V(i) || o && b(i[p]) && !m(i) && ((r = i[o]) && (i[o] = null), S.event.triggered = p, e.isPropagationStopped() && c.addEventListener(p, kt), i[p](), e.isPropagationStopped() && c.removeEventListener(p, kt), S.event.triggered = void 0, r && (i[o] = r)), e.result;\n      }\n    },\n    simulate: function simulate(e, t, i) {\n      e = S.extend(new S.Event(), i, {\n        type: e,\n        isSimulated: !0\n      });\n      S.event.trigger(e, null, t);\n    }\n  }), S.fn.extend({\n    trigger: function trigger(e, t) {\n      return this.each(function () {\n        S.event.trigger(e, t, this);\n      });\n    },\n    triggerHandler: function triggerHandler(e, t) {\n      var i = this[0];\n      if (i) return S.event.trigger(e, t, i, !0);\n    }\n  }), y.focusin || S.each({\n    focus: \"focusin\",\n    blur: \"focusout\"\n  }, function (i, n) {\n    function s(e) {\n      S.event.simulate(n, e.target, S.event.fix(e));\n    }\n\n    S.event.special[n] = {\n      setup: function setup() {\n        var e = this.ownerDocument || this.document || this,\n            t = U.access(e, n);\n        t || e.addEventListener(i, s, !0), U.access(e, n, (t || 0) + 1);\n      },\n      teardown: function teardown() {\n        var e = this.ownerDocument || this.document || this,\n            t = U.access(e, n) - 1;\n        t ? U.access(e, n, t) : (e.removeEventListener(i, s, !0), U.remove(e, n));\n      }\n    };\n  });\n  var Mt = T.location,\n      At = {\n    guid: Date.now()\n  },\n      Pt = /\\?/;\n\n  S.parseXML = function (e) {\n    var t;\n    if (!e || \"string\" != typeof e) return null;\n\n    try {\n      t = new T.DOMParser().parseFromString(e, \"text/xml\");\n    } catch (e) {\n      t = void 0;\n    }\n\n    return t && !t.getElementsByTagName(\"parsererror\").length || S.error(\"Invalid XML: \" + e), t;\n  };\n\n  var Lt = /\\[\\]$/,\n      zt = /\\r?\\n/g,\n      It = /^(?:submit|button|image|reset|file)$/i,\n      Dt = /^(?:input|select|textarea|keygen)/i;\n  S.param = function (e, t) {\n    function i(e, t) {\n      t = b(t) ? t() : t, s[s.length] = encodeURIComponent(e) + \"=\" + encodeURIComponent(null == t ? \"\" : t);\n    }\n\n    var n,\n        s = [];\n    if (null == e) return \"\";\n    if (Array.isArray(e) || e.jquery && !S.isPlainObject(e)) S.each(e, function () {\n      i(this.name, this.value);\n    });else for (n in e) {\n      !function i(n, e, s, r) {\n        if (Array.isArray(e)) S.each(e, function (e, t) {\n          s || Lt.test(n) ? r(n, t) : i(n + \"[\" + (\"object\" == _typeof(t) && null != t ? e : \"\") + \"]\", t, s, r);\n        });else if (s || \"object\" !== f(e)) r(n, e);else for (var t in e) {\n          i(n + \"[\" + t + \"]\", e[t], s, r);\n        }\n      }(n, e[n], t, i);\n    }\n    return s.join(\"&\");\n  }, S.fn.extend({\n    serialize: function serialize() {\n      return S.param(this.serializeArray());\n    },\n    serializeArray: function serializeArray() {\n      return this.map(function () {\n        var e = S.prop(this, \"elements\");\n        return e ? S.makeArray(e) : this;\n      }).filter(function () {\n        var e = this.type;\n        return this.name && !S(this).is(\":disabled\") && Dt.test(this.nodeName) && !It.test(e) && (this.checked || !ce.test(e));\n      }).map(function (e, t) {\n        var i = S(this).val();\n        return null == i ? null : Array.isArray(i) ? S.map(i, function (e) {\n          return {\n            name: t.name,\n            value: e.replace(zt, \"\\r\\n\")\n          };\n        }) : {\n          name: t.name,\n          value: i.replace(zt, \"\\r\\n\")\n        };\n      }).get();\n    }\n  });\n  var Ot = /%20/g,\n      Ht = /#.*$/,\n      Nt = /([?&])_=[^&]*/,\n      jt = /^(.*?):[ \\t]*([^\\r\\n]*)$/gm,\n      qt = /^(?:GET|HEAD)$/,\n      Wt = /^\\/\\//,\n      Bt = {},\n      Rt = {},\n      Ft = \"*/\".concat(\"*\"),\n      Gt = C.createElement(\"a\");\n\n  function Xt(r) {\n    return function (e, t) {\n      \"string\" != typeof e && (t = e, e = \"*\");\n      var i,\n          n = 0,\n          s = e.toLowerCase().match(O) || [];\n      if (b(t)) for (; i = s[n++];) {\n        \"+\" === i[0] ? (i = i.slice(1) || \"*\", (r[i] = r[i] || []).unshift(t)) : (r[i] = r[i] || []).push(t);\n      }\n    };\n  }\n\n  function Yt(t, n, s, r) {\n    var a = {},\n        o = t === Rt;\n\n    function l(e) {\n      var i;\n      return a[e] = !0, S.each(t[e] || [], function (e, t) {\n        t = t(n, s, r);\n        return \"string\" != typeof t || o || a[t] ? o ? !(i = t) : void 0 : (n.dataTypes.unshift(t), l(t), !1);\n      }), i;\n    }\n\n    return l(n.dataTypes[0]) || !a[\"*\"] && l(\"*\");\n  }\n\n  function Vt(e, t) {\n    var i,\n        n,\n        s = S.ajaxSettings.flatOptions || {};\n\n    for (i in t) {\n      void 0 !== t[i] && ((s[i] ? e : n = n || {})[i] = t[i]);\n    }\n\n    return n && S.extend(!0, e, n), e;\n  }\n\n  Gt.href = Mt.href, S.extend({\n    active: 0,\n    lastModified: {},\n    etag: {},\n    ajaxSettings: {\n      url: Mt.href,\n      type: \"GET\",\n      isLocal: /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Mt.protocol),\n      global: !0,\n      processData: !0,\n      async: !0,\n      contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n      accepts: {\n        \"*\": Ft,\n        text: \"text/plain\",\n        html: \"text/html\",\n        xml: \"application/xml, text/xml\",\n        json: \"application/json, text/javascript\"\n      },\n      contents: {\n        xml: /\\bxml\\b/,\n        html: /\\bhtml/,\n        json: /\\bjson\\b/\n      },\n      responseFields: {\n        xml: \"responseXML\",\n        text: \"responseText\",\n        json: \"responseJSON\"\n      },\n      converters: {\n        \"* text\": String,\n        \"text html\": !0,\n        \"text json\": JSON.parse,\n        \"text xml\": S.parseXML\n      },\n      flatOptions: {\n        url: !0,\n        context: !0\n      }\n    },\n    ajaxSetup: function ajaxSetup(e, t) {\n      return t ? Vt(Vt(e, S.ajaxSettings), t) : Vt(S.ajaxSettings, e);\n    },\n    ajaxPrefilter: Xt(Bt),\n    ajaxTransport: Xt(Rt),\n    ajax: function ajax(e, t) {\n      \"object\" == _typeof(e) && (t = e, e = void 0), t = t || {};\n      var l,\n          d,\n          c,\n          i,\n          u,\n          n,\n          p,\n          h,\n          s,\n          f = S.ajaxSetup({}, t),\n          m = f.context || f,\n          v = f.context && (m.nodeType || m.jquery) ? S(m) : S.event,\n          g = S.Deferred(),\n          y = S.Callbacks(\"once memory\"),\n          b = f.statusCode || {},\n          r = {},\n          a = {},\n          o = \"canceled\",\n          w = {\n        readyState: 0,\n        getResponseHeader: function getResponseHeader(e) {\n          var t;\n\n          if (p) {\n            if (!i) for (i = {}; t = jt.exec(c);) {\n              i[t[1].toLowerCase() + \" \"] = (i[t[1].toLowerCase() + \" \"] || []).concat(t[2]);\n            }\n            t = i[e.toLowerCase() + \" \"];\n          }\n\n          return null == t ? null : t.join(\", \");\n        },\n        getAllResponseHeaders: function getAllResponseHeaders() {\n          return p ? c : null;\n        },\n        setRequestHeader: function setRequestHeader(e, t) {\n          return null == p && (e = a[e.toLowerCase()] = a[e.toLowerCase()] || e, r[e] = t), this;\n        },\n        overrideMimeType: function overrideMimeType(e) {\n          return null == p && (f.mimeType = e), this;\n        },\n        statusCode: function statusCode(e) {\n          if (e) if (p) w.always(e[w.status]);else for (var t in e) {\n            b[t] = [b[t], e[t]];\n          }\n          return this;\n        },\n        abort: function abort(e) {\n          e = e || o;\n          return l && l.abort(e), x(0, e), this;\n        }\n      };\n\n      if (g.promise(w), f.url = ((e || f.url || Mt.href) + \"\").replace(Wt, Mt.protocol + \"//\"), f.type = t.method || t.type || f.method || f.type, f.dataTypes = (f.dataType || \"*\").toLowerCase().match(O) || [\"\"], null == f.crossDomain) {\n        n = C.createElement(\"a\");\n\n        try {\n          n.href = f.url, n.href = n.href, f.crossDomain = Gt.protocol + \"//\" + Gt.host != n.protocol + \"//\" + n.host;\n        } catch (e) {\n          f.crossDomain = !0;\n        }\n      }\n\n      if (f.data && f.processData && \"string\" != typeof f.data && (f.data = S.param(f.data, f.traditional)), Yt(Bt, f, t, w), p) return w;\n\n      for (s in (h = S.event && f.global) && 0 == S.active++ && S.event.trigger(\"ajaxStart\"), f.type = f.type.toUpperCase(), f.hasContent = !qt.test(f.type), d = f.url.replace(Ht, \"\"), f.hasContent ? f.data && f.processData && 0 === (f.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && (f.data = f.data.replace(Ot, \"+\")) : (e = f.url.slice(d.length), f.data && (f.processData || \"string\" == typeof f.data) && (d += (Pt.test(d) ? \"&\" : \"?\") + f.data, delete f.data), !1 === f.cache && (d = d.replace(Nt, \"$1\"), e = (Pt.test(d) ? \"&\" : \"?\") + \"_=\" + At.guid++ + e), f.url = d + e), f.ifModified && (S.lastModified[d] && w.setRequestHeader(\"If-Modified-Since\", S.lastModified[d]), S.etag[d] && w.setRequestHeader(\"If-None-Match\", S.etag[d])), (f.data && f.hasContent && !1 !== f.contentType || t.contentType) && w.setRequestHeader(\"Content-Type\", f.contentType), w.setRequestHeader(\"Accept\", f.dataTypes[0] && f.accepts[f.dataTypes[0]] ? f.accepts[f.dataTypes[0]] + (\"*\" !== f.dataTypes[0] ? \", \" + Ft + \"; q=0.01\" : \"\") : f.accepts[\"*\"]), f.headers) {\n        w.setRequestHeader(s, f.headers[s]);\n      }\n\n      if (f.beforeSend && (!1 === f.beforeSend.call(m, w, f) || p)) return w.abort();\n\n      if (o = \"abort\", y.add(f.complete), w.done(f.success), w.fail(f.error), l = Yt(Rt, f, t, w)) {\n        if (w.readyState = 1, h && v.trigger(\"ajaxSend\", [w, f]), p) return w;\n        f.async && 0 < f.timeout && (u = T.setTimeout(function () {\n          w.abort(\"timeout\");\n        }, f.timeout));\n\n        try {\n          p = !1, l.send(r, x);\n        } catch (e) {\n          if (p) throw e;\n          x(-1, e);\n        }\n      } else x(-1, \"No Transport\");\n\n      function x(e, t, i, n) {\n        var s,\n            r,\n            a,\n            o = t;\n        p || (p = !0, u && T.clearTimeout(u), l = void 0, c = n || \"\", w.readyState = 0 < e ? 4 : 0, n = 200 <= e && e < 300 || 304 === e, i && (a = function (e, t, i) {\n          for (var n, s, r, a, o = e.contents, l = e.dataTypes; \"*\" === l[0];) {\n            l.shift(), void 0 === n && (n = e.mimeType || t.getResponseHeader(\"Content-Type\"));\n          }\n\n          if (n) for (s in o) {\n            if (o[s] && o[s].test(n)) {\n              l.unshift(s);\n              break;\n            }\n          }\n          if (l[0] in i) r = l[0];else {\n            for (s in i) {\n              if (!l[0] || e.converters[s + \" \" + l[0]]) {\n                r = s;\n                break;\n              }\n\n              a = a || s;\n            }\n\n            r = r || a;\n          }\n          if (r) return r !== l[0] && l.unshift(r), i[r];\n        }(f, w, i)), !n && -1 < S.inArray(\"script\", f.dataTypes) && (f.converters[\"text script\"] = function () {}), a = function (e, t, i, n) {\n          var s,\n              r,\n              a,\n              o,\n              l,\n              d = {},\n              c = e.dataTypes.slice();\n          if (c[1]) for (a in e.converters) {\n            d[a.toLowerCase()] = e.converters[a];\n          }\n\n          for (r = c.shift(); r;) {\n            if (e.responseFields[r] && (i[e.responseFields[r]] = t), !l && n && e.dataFilter && (t = e.dataFilter(t, e.dataType)), l = r, r = c.shift()) if (\"*\" === r) r = l;else if (\"*\" !== l && l !== r) {\n              if (!(a = d[l + \" \" + r] || d[\"* \" + r])) for (s in d) {\n                if (o = s.split(\" \"), o[1] === r && (a = d[l + \" \" + o[0]] || d[\"* \" + o[0]])) {\n                  !0 === a ? a = d[s] : !0 !== d[s] && (r = o[0], c.unshift(o[1]));\n                  break;\n                }\n              }\n              if (!0 !== a) if (a && e[\"throws\"]) t = a(t);else try {\n                t = a(t);\n              } catch (e) {\n                return {\n                  state: \"parsererror\",\n                  error: a ? e : \"No conversion from \" + l + \" to \" + r\n                };\n              }\n            }\n          }\n\n          return {\n            state: \"success\",\n            data: t\n          };\n        }(f, a, w, n), n ? (f.ifModified && ((i = w.getResponseHeader(\"Last-Modified\")) && (S.lastModified[d] = i), (i = w.getResponseHeader(\"etag\")) && (S.etag[d] = i)), 204 === e || \"HEAD\" === f.type ? o = \"nocontent\" : 304 === e ? o = \"notmodified\" : (o = a.state, s = a.data, n = !(r = a.error))) : (r = o, !e && o || (o = \"error\", e < 0 && (e = 0))), w.status = e, w.statusText = (t || o) + \"\", n ? g.resolveWith(m, [s, o, w]) : g.rejectWith(m, [w, o, r]), w.statusCode(b), b = void 0, h && v.trigger(n ? \"ajaxSuccess\" : \"ajaxError\", [w, f, n ? s : r]), y.fireWith(m, [w, o]), h && (v.trigger(\"ajaxComplete\", [w, f]), --S.active || S.event.trigger(\"ajaxStop\")));\n      }\n\n      return w;\n    },\n    getJSON: function getJSON(e, t, i) {\n      return S.get(e, t, i, \"json\");\n    },\n    getScript: function getScript(e, t) {\n      return S.get(e, void 0, t, \"script\");\n    }\n  }), S.each([\"get\", \"post\"], function (e, s) {\n    S[s] = function (e, t, i, n) {\n      return b(t) && (n = n || i, i = t, t = void 0), S.ajax(S.extend({\n        url: e,\n        type: s,\n        dataType: n,\n        data: t,\n        success: i\n      }, S.isPlainObject(e) && e));\n    };\n  }), S.ajaxPrefilter(function (e) {\n    for (var t in e.headers) {\n      \"content-type\" === t.toLowerCase() && (e.contentType = e.headers[t] || \"\");\n    }\n  }), S._evalUrl = function (e, t, i) {\n    return S.ajax({\n      url: e,\n      type: \"GET\",\n      dataType: \"script\",\n      cache: !0,\n      async: !1,\n      global: !1,\n      converters: {\n        \"text script\": function textScript() {}\n      },\n      dataFilter: function dataFilter(e) {\n        S.globalEval(e, t, i);\n      }\n    });\n  }, S.fn.extend({\n    wrapAll: function wrapAll(e) {\n      return this[0] && (b(e) && (e = e.call(this[0])), e = S(e, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && e.insertBefore(this[0]), e.map(function () {\n        for (var e = this; e.firstElementChild;) {\n          e = e.firstElementChild;\n        }\n\n        return e;\n      }).append(this)), this;\n    },\n    wrapInner: function wrapInner(i) {\n      return b(i) ? this.each(function (e) {\n        S(this).wrapInner(i.call(this, e));\n      }) : this.each(function () {\n        var e = S(this),\n            t = e.contents();\n        t.length ? t.wrapAll(i) : e.append(i);\n      });\n    },\n    wrap: function wrap(t) {\n      var i = b(t);\n      return this.each(function (e) {\n        S(this).wrapAll(i ? t.call(this, e) : t);\n      });\n    },\n    unwrap: function unwrap(e) {\n      return this.parent(e).not(\"body\").each(function () {\n        S(this).replaceWith(this.childNodes);\n      }), this;\n    }\n  }), S.expr.pseudos.hidden = function (e) {\n    return !S.expr.pseudos.visible(e);\n  }, S.expr.pseudos.visible = function (e) {\n    return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length);\n  }, S.ajaxSettings.xhr = function () {\n    try {\n      return new T.XMLHttpRequest();\n    } catch (e) {}\n  };\n  var _t = {\n    0: 200,\n    1223: 204\n  },\n      Ut = S.ajaxSettings.xhr();\n  y.cors = !!Ut && \"withCredentials\" in Ut, y.ajax = Ut = !!Ut, S.ajaxTransport(function (s) {\n    var _r, a;\n\n    if (y.cors || Ut && !s.crossDomain) return {\n      send: function send(e, t) {\n        var i,\n            n = s.xhr();\n        if (n.open(s.type, s.url, s.async, s.username, s.password), s.xhrFields) for (i in s.xhrFields) {\n          n[i] = s.xhrFields[i];\n        }\n\n        for (i in s.mimeType && n.overrideMimeType && n.overrideMimeType(s.mimeType), s.crossDomain || e[\"X-Requested-With\"] || (e[\"X-Requested-With\"] = \"XMLHttpRequest\"), e) {\n          n.setRequestHeader(i, e[i]);\n        }\n\n        _r = function r(e) {\n          return function () {\n            _r && (_r = a = n.onload = n.onerror = n.onabort = n.ontimeout = n.onreadystatechange = null, \"abort\" === e ? n.abort() : \"error\" === e ? \"number\" != typeof n.status ? t(0, \"error\") : t(n.status, n.statusText) : t(_t[n.status] || n.status, n.statusText, \"text\" !== (n.responseType || \"text\") || \"string\" != typeof n.responseText ? {\n              binary: n.response\n            } : {\n              text: n.responseText\n            }, n.getAllResponseHeaders()));\n          };\n        }, n.onload = _r(), a = n.onerror = n.ontimeout = _r(\"error\"), void 0 !== n.onabort ? n.onabort = a : n.onreadystatechange = function () {\n          4 === n.readyState && T.setTimeout(function () {\n            _r && a();\n          });\n        }, _r = _r(\"abort\");\n\n        try {\n          n.send(s.hasContent && s.data || null);\n        } catch (e) {\n          if (_r) throw e;\n        }\n      },\n      abort: function abort() {\n        _r && _r();\n      }\n    };\n  }), S.ajaxPrefilter(function (e) {\n    e.crossDomain && (e.contents.script = !1);\n  }), S.ajaxSetup({\n    accepts: {\n      script: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"\n    },\n    contents: {\n      script: /\\b(?:java|ecma)script\\b/\n    },\n    converters: {\n      \"text script\": function textScript(e) {\n        return S.globalEval(e), e;\n      }\n    }\n  }), S.ajaxPrefilter(\"script\", function (e) {\n    void 0 === e.cache && (e.cache = !1), e.crossDomain && (e.type = \"GET\");\n  }), S.ajaxTransport(\"script\", function (i) {\n    var n, _s;\n\n    if (i.crossDomain || i.scriptAttrs) return {\n      send: function send(e, t) {\n        n = S(\"<script>\").attr(i.scriptAttrs || {}).prop({\n          charset: i.scriptCharset,\n          src: i.url\n        }).on(\"load error\", _s = function s(e) {\n          n.remove(), _s = null, e && t(\"error\" === e.type ? 404 : 200, e.type);\n        }), C.head.appendChild(n[0]);\n      },\n      abort: function abort() {\n        _s && _s();\n      }\n    };\n  });\n  var Kt = [],\n      Qt = /(=)\\?(?=&|$)|\\?\\?/;\n  S.ajaxSetup({\n    jsonp: \"callback\",\n    jsonpCallback: function jsonpCallback() {\n      var e = Kt.pop() || S.expando + \"_\" + At.guid++;\n      return this[e] = !0, e;\n    }\n  }), S.ajaxPrefilter(\"json jsonp\", function (e, t, i) {\n    var n,\n        s,\n        r,\n        a = !1 !== e.jsonp && (Qt.test(e.url) ? \"url\" : \"string\" == typeof e.data && 0 === (e.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && Qt.test(e.data) && \"data\");\n    if (a || \"jsonp\" === e.dataTypes[0]) return n = e.jsonpCallback = b(e.jsonpCallback) ? e.jsonpCallback() : e.jsonpCallback, a ? e[a] = e[a].replace(Qt, \"$1\" + n) : !1 !== e.jsonp && (e.url += (Pt.test(e.url) ? \"&\" : \"?\") + e.jsonp + \"=\" + n), e.converters[\"script json\"] = function () {\n      return r || S.error(n + \" was not called\"), r[0];\n    }, e.dataTypes[0] = \"json\", s = T[n], T[n] = function () {\n      r = arguments;\n    }, i.always(function () {\n      void 0 === s ? S(T).removeProp(n) : T[n] = s, e[n] && (e.jsonpCallback = t.jsonpCallback, Kt.push(n)), r && b(s) && s(r[0]), r = s = void 0;\n    }), \"script\";\n  }), y.createHTMLDocument = ((u = C.implementation.createHTMLDocument(\"\").body).innerHTML = \"<form></form><form></form>\", 2 === u.childNodes.length), S.parseHTML = function (e, t, i) {\n    return \"string\" != typeof e ? [] : (\"boolean\" == typeof t && (i = t, t = !1), t || (y.createHTMLDocument ? ((n = (t = C.implementation.createHTMLDocument(\"\")).createElement(\"base\")).href = C.location.href, t.head.appendChild(n)) : t = C), n = !i && [], (i = M.exec(e)) ? [t.createElement(i[1])] : (i = ge([e], t, n), n && n.length && S(n).remove(), S.merge([], i.childNodes)));\n    var n;\n  }, S.fn.load = function (e, t, i) {\n    var n,\n        s,\n        r,\n        a = this,\n        o = e.indexOf(\" \");\n    return -1 < o && (n = Tt(e.slice(o)), e = e.slice(0, o)), b(t) ? (i = t, t = void 0) : t && \"object\" == _typeof(t) && (s = \"POST\"), 0 < a.length && S.ajax({\n      url: e,\n      type: s || \"GET\",\n      dataType: \"html\",\n      data: t\n    }).done(function (e) {\n      r = arguments, a.html(n ? S(\"<div>\").append(S.parseHTML(e)).find(n) : e);\n    }).always(i && function (e, t) {\n      a.each(function () {\n        i.apply(this, r || [e.responseText, t, e]);\n      });\n    }), this;\n  }, S.expr.pseudos.animated = function (t) {\n    return S.grep(S.timers, function (e) {\n      return t === e.elem;\n    }).length;\n  }, S.offset = {\n    setOffset: function setOffset(e, t, i) {\n      var n,\n          s,\n          r,\n          a,\n          o = S.css(e, \"position\"),\n          l = S(e),\n          d = {};\n      \"static\" === o && (e.style.position = \"relative\"), r = l.offset(), n = S.css(e, \"top\"), a = S.css(e, \"left\"), a = (\"absolute\" === o || \"fixed\" === o) && -1 < (n + a).indexOf(\"auto\") ? (s = (o = l.position()).top, o.left) : (s = parseFloat(n) || 0, parseFloat(a) || 0), null != (t = b(t) ? t.call(e, i, S.extend({}, r)) : t).top && (d.top = t.top - r.top + s), null != t.left && (d.left = t.left - r.left + a), \"using\" in t ? t.using.call(e, d) : (\"number\" == typeof d.top && (d.top += \"px\"), \"number\" == typeof d.left && (d.left += \"px\"), l.css(d));\n    }\n  }, S.fn.extend({\n    offset: function offset(t) {\n      if (arguments.length) return void 0 === t ? this : this.each(function (e) {\n        S.offset.setOffset(this, t, e);\n      });\n      var e,\n          i = this[0];\n      return i ? i.getClientRects().length ? (e = i.getBoundingClientRect(), i = i.ownerDocument.defaultView, {\n        top: e.top + i.pageYOffset,\n        left: e.left + i.pageXOffset\n      }) : {\n        top: 0,\n        left: 0\n      } : void 0;\n    },\n    position: function position() {\n      if (this[0]) {\n        var e,\n            t,\n            i,\n            n = this[0],\n            s = {\n          top: 0,\n          left: 0\n        };\n        if (\"fixed\" === S.css(n, \"position\")) t = n.getBoundingClientRect();else {\n          for (t = this.offset(), i = n.ownerDocument, e = n.offsetParent || i.documentElement; e && (e === i.body || e === i.documentElement) && \"static\" === S.css(e, \"position\");) {\n            e = e.parentNode;\n          }\n\n          e && e !== n && 1 === e.nodeType && ((s = S(e).offset()).top += S.css(e, \"borderTopWidth\", !0), s.left += S.css(e, \"borderLeftWidth\", !0));\n        }\n        return {\n          top: t.top - s.top - S.css(n, \"marginTop\", !0),\n          left: t.left - s.left - S.css(n, \"marginLeft\", !0)\n        };\n      }\n    },\n    offsetParent: function offsetParent() {\n      return this.map(function () {\n        for (var e = this.offsetParent; e && \"static\" === S.css(e, \"position\");) {\n          e = e.offsetParent;\n        }\n\n        return e || ne;\n      });\n    }\n  }), S.each({\n    scrollLeft: \"pageXOffset\",\n    scrollTop: \"pageYOffset\"\n  }, function (t, s) {\n    var r = \"pageYOffset\" === s;\n\n    S.fn[t] = function (e) {\n      return R(this, function (e, t, i) {\n        var n;\n        return m(e) ? n = e : 9 === e.nodeType && (n = e.defaultView), void 0 === i ? n ? n[s] : e[t] : void (n ? n.scrollTo(r ? n.pageXOffset : i, r ? i : n.pageYOffset) : e[t] = i);\n      }, t, e, arguments.length);\n    };\n  }), S.each([\"top\", \"left\"], function (e, i) {\n    S.cssHooks[i] = Ke(y.pixelPosition, function (e, t) {\n      if (t) return t = Ue(e, i), Ge.test(t) ? S(e).position()[i] + \"px\" : t;\n    });\n  }), S.each({\n    Height: \"height\",\n    Width: \"width\"\n  }, function (a, o) {\n    S.each({\n      padding: \"inner\" + a,\n      content: o,\n      \"\": \"outer\" + a\n    }, function (n, r) {\n      S.fn[r] = function (e, t) {\n        var i = arguments.length && (n || \"boolean\" != typeof e),\n            s = n || (!0 === e || !0 === t ? \"margin\" : \"border\");\n        return R(this, function (e, t, i) {\n          var n;\n          return m(e) ? 0 === r.indexOf(\"outer\") ? e[\"inner\" + a] : e.document.documentElement[\"client\" + a] : 9 === e.nodeType ? (n = e.documentElement, Math.max(e.body[\"scroll\" + a], n[\"scroll\" + a], e.body[\"offset\" + a], n[\"offset\" + a], n[\"client\" + a])) : void 0 === i ? S.css(e, t, s) : S.style(e, t, i, s);\n        }, o, i ? e : void 0, i);\n      };\n    });\n  }), S.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (e, t) {\n    S.fn[t] = function (e) {\n      return this.on(t, e);\n    };\n  }), S.fn.extend({\n    bind: function bind(e, t, i) {\n      return this.on(e, null, t, i);\n    },\n    unbind: function unbind(e, t) {\n      return this.off(e, null, t);\n    },\n    delegate: function delegate(e, t, i, n) {\n      return this.on(t, e, i, n);\n    },\n    undelegate: function undelegate(e, t, i) {\n      return 1 === arguments.length ? this.off(e, \"**\") : this.off(t, e || \"**\", i);\n    },\n    hover: function hover(e, t) {\n      return this.mouseenter(e).mouseleave(t || e);\n    }\n  }), S.each(\"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\".split(\" \"), function (e, i) {\n    S.fn[i] = function (e, t) {\n      return 0 < arguments.length ? this.on(i, null, e, t) : this.trigger(i);\n    };\n  });\n  var Jt = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n  S.proxy = function (e, t) {\n    var i, n;\n    if (\"string\" == typeof t && (n = e[t], t = e, e = n), b(e)) return i = o.call(arguments, 2), (n = function n() {\n      return e.apply(t || this, i.concat(o.call(arguments)));\n    }).guid = e.guid = e.guid || S.guid++, n;\n  }, S.holdReady = function (e) {\n    e ? S.readyWait++ : S.ready(!0);\n  }, S.isArray = Array.isArray, S.parseJSON = JSON.parse, S.nodeName = $, S.isFunction = b, S.isWindow = m, S.camelCase = Y, S.type = f, S.now = Date.now, S.isNumeric = function (e) {\n    var t = S.type(e);\n    return (\"number\" === t || \"string\" === t) && !isNaN(e - parseFloat(e));\n  }, S.trim = function (e) {\n    return null == e ? \"\" : (e + \"\").replace(Jt, \"\");\n  },  true && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_0__ = (function () {\n    return S;\n  }).apply(__WEBPACK_LOCAL_MODULE_0__exports = {}, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_LOCAL_MODULE_0__ === undefined && (__WEBPACK_LOCAL_MODULE_0__ = __WEBPACK_LOCAL_MODULE_0__exports));\n  var Zt = T.jQuery,\n      ei = T.$;\n  return S.noConflict = function (e) {\n    return T.$ === S && (T.$ = ei), e && T.jQuery === S && (T.jQuery = Zt), S;\n  }, void 0 === e && (T.jQuery = T.$ = S), S;\n}), function (e) {\n  \"use strict\";\n\n   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_0__], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(function (d) {\n  \"use strict\";\n\n  var n,\n      a = window.Slick || {};\n  n = 0, (a = function a(e, t) {\n    var i = this;\n    i.defaults = {\n      accessibility: !0,\n      adaptiveHeight: !1,\n      appendArrows: d(e),\n      appendDots: d(e),\n      arrows: !0,\n      asNavFor: null,\n      prevArrow: '<button class=\"slick-prev\" aria-label=\"Previous\" type=\"button\">Previous</button>',\n      nextArrow: '<button class=\"slick-next\" aria-label=\"Next\" type=\"button\">Next</button>',\n      autoplay: !1,\n      autoplaySpeed: 3e3,\n      centerMode: !1,\n      centerPadding: \"50px\",\n      cssEase: \"ease\",\n      customPaging: function customPaging(e, t) {\n        return d('<button type=\"button\" />').text(t + 1);\n      },\n      dots: !1,\n      dotsClass: \"slick-dots\",\n      draggable: !0,\n      easing: \"linear\",\n      edgeFriction: .35,\n      fade: !1,\n      focusOnSelect: !1,\n      focusOnChange: !1,\n      infinite: !0,\n      initialSlide: 0,\n      lazyLoad: \"ondemand\",\n      mobileFirst: !1,\n      pauseOnHover: !0,\n      pauseOnFocus: !0,\n      pauseOnDotsHover: !1,\n      respondTo: \"window\",\n      responsive: null,\n      rows: 1,\n      rtl: !1,\n      slide: \"\",\n      slidesPerRow: 1,\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      speed: 500,\n      swipe: !0,\n      swipeToSlide: !1,\n      touchMove: !0,\n      touchThreshold: 5,\n      useCSS: !0,\n      useTransform: !0,\n      variableWidth: !1,\n      vertical: !1,\n      verticalSwiping: !1,\n      waitForAnimate: !0,\n      zIndex: 1e3\n    }, i.initials = {\n      animating: !1,\n      dragging: !1,\n      autoPlayTimer: null,\n      currentDirection: 0,\n      currentLeft: null,\n      currentSlide: 0,\n      direction: 1,\n      $dots: null,\n      listWidth: null,\n      listHeight: null,\n      loadIndex: 0,\n      $nextArrow: null,\n      $prevArrow: null,\n      scrolling: !1,\n      slideCount: null,\n      slideWidth: null,\n      $slideTrack: null,\n      $slides: null,\n      sliding: !1,\n      slideOffset: 0,\n      swipeLeft: null,\n      swiping: !1,\n      $list: null,\n      touchObject: {},\n      transformsEnabled: !1,\n      unslicked: !1\n    }, d.extend(i, i.initials), i.activeBreakpoint = null, i.animType = null, i.animProp = null, i.breakpoints = [], i.breakpointSettings = [], i.cssTransitions = !1, i.focussed = !1, i.interrupted = !1, i.hidden = \"hidden\", i.paused = !0, i.positionProp = null, i.respondTo = null, i.rowCount = 1, i.shouldClick = !0, i.$slider = d(e), i.$slidesCache = null, i.transformType = null, i.transitionType = null, i.visibilityChange = \"visibilitychange\", i.windowWidth = 0, i.windowTimer = null, e = d(e).data(\"slick\") || {}, i.options = d.extend({}, i.defaults, t, e), i.currentSlide = i.options.initialSlide, i.originalSettings = i.options, void 0 !== document.mozHidden ? (i.hidden = \"mozHidden\", i.visibilityChange = \"mozvisibilitychange\") : void 0 !== document.webkitHidden && (i.hidden = \"webkitHidden\", i.visibilityChange = \"webkitvisibilitychange\"), i.autoPlay = d.proxy(i.autoPlay, i), i.autoPlayClear = d.proxy(i.autoPlayClear, i), i.autoPlayIterator = d.proxy(i.autoPlayIterator, i), i.changeSlide = d.proxy(i.changeSlide, i), i.clickHandler = d.proxy(i.clickHandler, i), i.selectHandler = d.proxy(i.selectHandler, i), i.setPosition = d.proxy(i.setPosition, i), i.swipeHandler = d.proxy(i.swipeHandler, i), i.dragHandler = d.proxy(i.dragHandler, i), i.keyHandler = d.proxy(i.keyHandler, i), i.instanceUid = n++, i.htmlExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*)$/, i.registerBreakpoints(), i.init(!0);\n  }).prototype.activateADA = function () {\n    this.$slideTrack.find(\".slick-active\").attr({\n      \"aria-hidden\": \"false\"\n    }).find(\"a, input, button, select\").attr({\n      tabindex: \"0\"\n    });\n  }, a.prototype.addSlide = a.prototype.slickAdd = function (e, t, i) {\n    var n = this;\n    if (\"boolean\" == typeof t) i = t, t = null;else if (t < 0 || t >= n.slideCount) return !1;\n    n.unload(), \"number\" == typeof t ? 0 === t && 0 === n.$slides.length ? d(e).appendTo(n.$slideTrack) : i ? d(e).insertBefore(n.$slides.eq(t)) : d(e).insertAfter(n.$slides.eq(t)) : !0 === i ? d(e).prependTo(n.$slideTrack) : d(e).appendTo(n.$slideTrack), n.$slides = n.$slideTrack.children(this.options.slide), n.$slideTrack.children(this.options.slide).detach(), n.$slideTrack.append(n.$slides), n.$slides.each(function (e, t) {\n      d(t).attr(\"data-slick-index\", e);\n    }), n.$slidesCache = n.$slides, n.reinit();\n  }, a.prototype.animateHeight = function () {\n    var e,\n        t = this;\n    1 === t.options.slidesToShow && !0 === t.options.adaptiveHeight && !1 === t.options.vertical && (e = t.$slides.eq(t.currentSlide).outerHeight(!0), t.$list.animate({\n      height: e\n    }, t.options.speed));\n  }, a.prototype.animateSlide = function (e, t) {\n    var i = {},\n        n = this;\n    n.animateHeight(), !0 === n.options.rtl && !1 === n.options.vertical && (e = -e), !1 === n.transformsEnabled ? !1 === n.options.vertical ? n.$slideTrack.animate({\n      left: e\n    }, n.options.speed, n.options.easing, t) : n.$slideTrack.animate({\n      top: e\n    }, n.options.speed, n.options.easing, t) : !1 === n.cssTransitions ? (!0 === n.options.rtl && (n.currentLeft = -n.currentLeft), d({\n      animStart: n.currentLeft\n    }).animate({\n      animStart: e\n    }, {\n      duration: n.options.speed,\n      easing: n.options.easing,\n      step: function step(e) {\n        e = Math.ceil(e), !1 === n.options.vertical ? i[n.animType] = \"translate(\" + e + \"px, 0px)\" : i[n.animType] = \"translate(0px,\" + e + \"px)\", n.$slideTrack.css(i);\n      },\n      complete: function complete() {\n        t && t.call();\n      }\n    })) : (n.applyTransition(), e = Math.ceil(e), !1 === n.options.vertical ? i[n.animType] = \"translate3d(\" + e + \"px, 0px, 0px)\" : i[n.animType] = \"translate3d(0px,\" + e + \"px, 0px)\", n.$slideTrack.css(i), t && setTimeout(function () {\n      n.disableTransition(), t.call();\n    }, n.options.speed));\n  }, a.prototype.getNavTarget = function () {\n    var e = this.options.asNavFor;\n    return e = e && null !== e ? d(e).not(this.$slider) : e;\n  }, a.prototype.asNavFor = function (t) {\n    var e = this.getNavTarget();\n    null !== e && \"object\" == _typeof(e) && e.each(function () {\n      var e = d(this).slick(\"getSlick\");\n      e.unslicked || e.slideHandler(t, !0);\n    });\n  }, a.prototype.applyTransition = function (e) {\n    var t = this,\n        i = {};\n    !1 === t.options.fade ? i[t.transitionType] = t.transformType + \" \" + t.options.speed + \"ms \" + t.options.cssEase : i[t.transitionType] = \"opacity \" + t.options.speed + \"ms \" + t.options.cssEase, (!1 === t.options.fade ? t.$slideTrack : t.$slides.eq(e)).css(i);\n  }, a.prototype.autoPlay = function () {\n    var e = this;\n    e.autoPlayClear(), e.slideCount > e.options.slidesToShow && (e.autoPlayTimer = setInterval(e.autoPlayIterator, e.options.autoplaySpeed));\n  }, a.prototype.autoPlayClear = function () {\n    this.autoPlayTimer && clearInterval(this.autoPlayTimer);\n  }, a.prototype.autoPlayIterator = function () {\n    var e = this,\n        t = e.currentSlide + e.options.slidesToScroll;\n    e.paused || e.interrupted || e.focussed || (!1 === e.options.infinite && (1 === e.direction && e.currentSlide + 1 === e.slideCount - 1 ? e.direction = 0 : 0 === e.direction && (t = e.currentSlide - e.options.slidesToScroll, e.currentSlide - 1 == 0 && (e.direction = 1))), e.slideHandler(t));\n  }, a.prototype.buildArrows = function () {\n    var e = this;\n    !0 === e.options.arrows && (e.$prevArrow = d(e.options.prevArrow).addClass(\"slick-arrow\"), e.$nextArrow = d(e.options.nextArrow).addClass(\"slick-arrow\"), e.slideCount > e.options.slidesToShow ? (e.$prevArrow.removeClass(\"slick-hidden\").removeAttr(\"aria-hidden tabindex\"), e.$nextArrow.removeClass(\"slick-hidden\").removeAttr(\"aria-hidden tabindex\"), e.htmlExpr.test(e.options.prevArrow) && e.$prevArrow.prependTo(e.options.appendArrows), e.htmlExpr.test(e.options.nextArrow) && e.$nextArrow.appendTo(e.options.appendArrows), !0 !== e.options.infinite && e.$prevArrow.addClass(\"slick-disabled\").attr(\"aria-disabled\", \"true\")) : e.$prevArrow.add(e.$nextArrow).addClass(\"slick-hidden\").attr({\n      \"aria-disabled\": \"true\",\n      tabindex: \"-1\"\n    }));\n  }, a.prototype.buildDots = function () {\n    var e,\n        t,\n        i = this;\n\n    if (!0 === i.options.dots && i.slideCount > i.options.slidesToShow) {\n      for (i.$slider.addClass(\"slick-dotted\"), t = d(\"<ul />\").addClass(i.options.dotsClass), e = 0; e <= i.getDotCount(); e += 1) {\n        t.append(d(\"<li />\").append(i.options.customPaging.call(this, i, e)));\n      }\n\n      i.$dots = t.appendTo(i.options.appendDots), i.$dots.find(\"li\").first().addClass(\"slick-active\");\n    }\n  }, a.prototype.buildOut = function () {\n    var e = this;\n    e.$slides = e.$slider.children(e.options.slide + \":not(.slick-cloned)\").addClass(\"slick-slide\"), e.slideCount = e.$slides.length, e.$slides.each(function (e, t) {\n      d(t).attr(\"data-slick-index\", e).data(\"originalStyling\", d(t).attr(\"style\") || \"\");\n    }), e.$slider.addClass(\"slick-slider\"), e.$slideTrack = 0 === e.slideCount ? d('<div class=\"slick-track\"/>').appendTo(e.$slider) : e.$slides.wrapAll('<div class=\"slick-track\"/>').parent(), e.$list = e.$slideTrack.wrap('<div class=\"slick-list\"/>').parent(), e.$slideTrack.css(\"opacity\", 0), !0 !== e.options.centerMode && !0 !== e.options.swipeToSlide || (e.options.slidesToScroll = 1), d(\"img[data-lazy]\", e.$slider).not(\"[src]\").addClass(\"slick-loading\"), e.setupInfinite(), e.buildArrows(), e.buildDots(), e.updateDots(), e.setSlideClasses(\"number\" == typeof e.currentSlide ? e.currentSlide : 0), !0 === e.options.draggable && e.$list.addClass(\"draggable\");\n  }, a.prototype.buildRows = function () {\n    var e,\n        t,\n        i,\n        n = this,\n        s = document.createDocumentFragment(),\n        r = n.$slider.children();\n\n    if (0 < n.options.rows) {\n      for (i = n.options.slidesPerRow * n.options.rows, t = Math.ceil(r.length / i), e = 0; e < t; e++) {\n        for (var a = document.createElement(\"div\"), o = 0; o < n.options.rows; o++) {\n          for (var l = document.createElement(\"div\"), d = 0; d < n.options.slidesPerRow; d++) {\n            var c = e * i + (o * n.options.slidesPerRow + d);\n            r.get(c) && l.appendChild(r.get(c));\n          }\n\n          a.appendChild(l);\n        }\n\n        s.appendChild(a);\n      }\n\n      n.$slider.empty().append(s), n.$slider.children().children().children().css({\n        width: 100 / n.options.slidesPerRow + \"%\",\n        display: \"inline-block\"\n      });\n    }\n  }, a.prototype.checkResponsive = function (e, t) {\n    var i,\n        n,\n        s,\n        r = this,\n        a = !1,\n        o = r.$slider.width(),\n        l = window.innerWidth || d(window).width();\n\n    if (\"window\" === r.respondTo ? s = l : \"slider\" === r.respondTo ? s = o : \"min\" === r.respondTo && (s = Math.min(l, o)), r.options.responsive && r.options.responsive.length && null !== r.options.responsive) {\n      for (i in n = null, r.breakpoints) {\n        r.breakpoints.hasOwnProperty(i) && (!1 === r.originalSettings.mobileFirst ? s < r.breakpoints[i] && (n = r.breakpoints[i]) : s > r.breakpoints[i] && (n = r.breakpoints[i]));\n      }\n\n      null !== n ? null !== r.activeBreakpoint && n === r.activeBreakpoint && !t || (r.activeBreakpoint = n, \"unslick\" === r.breakpointSettings[n] ? r.unslick(n) : (r.options = d.extend({}, r.originalSettings, r.breakpointSettings[n]), !0 === e && (r.currentSlide = r.options.initialSlide), r.refresh(e)), a = n) : null !== r.activeBreakpoint && (r.activeBreakpoint = null, r.options = r.originalSettings, !0 === e && (r.currentSlide = r.options.initialSlide), r.refresh(e), a = n), e || !1 === a || r.$slider.trigger(\"breakpoint\", [r, a]);\n    }\n  }, a.prototype.changeSlide = function (e, t) {\n    var i,\n        n = this,\n        s = d(e.currentTarget);\n\n    switch (s.is(\"a\") && e.preventDefault(), s.is(\"li\") || (s = s.closest(\"li\")), i = n.slideCount % n.options.slidesToScroll != 0 ? 0 : (n.slideCount - n.currentSlide) % n.options.slidesToScroll, e.data.message) {\n      case \"previous\":\n        r = 0 == i ? n.options.slidesToScroll : n.options.slidesToShow - i, n.slideCount > n.options.slidesToShow && n.slideHandler(n.currentSlide - r, !1, t);\n        break;\n\n      case \"next\":\n        r = 0 == i ? n.options.slidesToScroll : i, n.slideCount > n.options.slidesToShow && n.slideHandler(n.currentSlide + r, !1, t);\n        break;\n\n      case \"index\":\n        var r = 0 === e.data.index ? 0 : e.data.index || s.index() * n.options.slidesToScroll;\n        n.slideHandler(n.checkNavigable(r), !1, t), s.children().trigger(\"focus\");\n        break;\n\n      default:\n        return;\n    }\n  }, a.prototype.checkNavigable = function (e) {\n    var t = this.getNavigableIndexes(),\n        i = 0;\n    if (e > t[t.length - 1]) e = t[t.length - 1];else for (var n in t) {\n      if (e < t[n]) {\n        e = i;\n        break;\n      }\n\n      i = t[n];\n    }\n    return e;\n  }, a.prototype.cleanUpEvents = function () {\n    var e = this;\n    e.options.dots && null !== e.$dots && (d(\"li\", e.$dots).off(\"click.slick\", e.changeSlide).off(\"mouseenter.slick\", d.proxy(e.interrupt, e, !0)).off(\"mouseleave.slick\", d.proxy(e.interrupt, e, !1)), !0 === e.options.accessibility && e.$dots.off(\"keydown.slick\", e.keyHandler)), e.$slider.off(\"focus.slick blur.slick\"), !0 === e.options.arrows && e.slideCount > e.options.slidesToShow && (e.$prevArrow && e.$prevArrow.off(\"click.slick\", e.changeSlide), e.$nextArrow && e.$nextArrow.off(\"click.slick\", e.changeSlide), !0 === e.options.accessibility && (e.$prevArrow && e.$prevArrow.off(\"keydown.slick\", e.keyHandler), e.$nextArrow && e.$nextArrow.off(\"keydown.slick\", e.keyHandler))), e.$list.off(\"touchstart.slick mousedown.slick\", e.swipeHandler), e.$list.off(\"touchmove.slick mousemove.slick\", e.swipeHandler), e.$list.off(\"touchend.slick mouseup.slick\", e.swipeHandler), e.$list.off(\"touchcancel.slick mouseleave.slick\", e.swipeHandler), e.$list.off(\"click.slick\", e.clickHandler), d(document).off(e.visibilityChange, e.visibility), e.cleanUpSlideEvents(), !0 === e.options.accessibility && e.$list.off(\"keydown.slick\", e.keyHandler), !0 === e.options.focusOnSelect && d(e.$slideTrack).children().off(\"click.slick\", e.selectHandler), d(window).off(\"orientationchange.slick.slick-\" + e.instanceUid, e.orientationChange), d(window).off(\"resize.slick.slick-\" + e.instanceUid, e.resize), d(\"[draggable!=true]\", e.$slideTrack).off(\"dragstart\", e.preventDefault), d(window).off(\"load.slick.slick-\" + e.instanceUid, e.setPosition);\n  }, a.prototype.cleanUpSlideEvents = function () {\n    var e = this;\n    e.$list.off(\"mouseenter.slick\", d.proxy(e.interrupt, e, !0)), e.$list.off(\"mouseleave.slick\", d.proxy(e.interrupt, e, !1));\n  }, a.prototype.cleanUpRows = function () {\n    var e;\n    0 < this.options.rows && ((e = this.$slides.children().children()).removeAttr(\"style\"), this.$slider.empty().append(e));\n  }, a.prototype.clickHandler = function (e) {\n    !1 === this.shouldClick && (e.stopImmediatePropagation(), e.stopPropagation(), e.preventDefault());\n  }, a.prototype.destroy = function (e) {\n    var t = this;\n    t.autoPlayClear(), t.touchObject = {}, t.cleanUpEvents(), d(\".slick-cloned\", t.$slider).detach(), t.$dots && t.$dots.remove(), t.$prevArrow && t.$prevArrow.length && (t.$prevArrow.removeClass(\"slick-disabled slick-arrow slick-hidden\").removeAttr(\"aria-hidden aria-disabled tabindex\").css(\"display\", \"\"), t.htmlExpr.test(t.options.prevArrow) && t.$prevArrow.remove()), t.$nextArrow && t.$nextArrow.length && (t.$nextArrow.removeClass(\"slick-disabled slick-arrow slick-hidden\").removeAttr(\"aria-hidden aria-disabled tabindex\").css(\"display\", \"\"), t.htmlExpr.test(t.options.nextArrow) && t.$nextArrow.remove()), t.$slides && (t.$slides.removeClass(\"slick-slide slick-active slick-center slick-visible slick-current\").removeAttr(\"aria-hidden\").removeAttr(\"data-slick-index\").each(function () {\n      d(this).attr(\"style\", d(this).data(\"originalStyling\"));\n    }), t.$slideTrack.children(this.options.slide).detach(), t.$slideTrack.detach(), t.$list.detach(), t.$slider.append(t.$slides)), t.cleanUpRows(), t.$slider.removeClass(\"slick-slider\"), t.$slider.removeClass(\"slick-initialized\"), t.$slider.removeClass(\"slick-dotted\"), t.unslicked = !0, e || t.$slider.trigger(\"destroy\", [t]);\n  }, a.prototype.disableTransition = function (e) {\n    var t = {};\n    t[this.transitionType] = \"\", (!1 === this.options.fade ? this.$slideTrack : this.$slides.eq(e)).css(t);\n  }, a.prototype.fadeSlide = function (e, t) {\n    var i = this;\n    !1 === i.cssTransitions ? (i.$slides.eq(e).css({\n      zIndex: i.options.zIndex\n    }), i.$slides.eq(e).animate({\n      opacity: 1\n    }, i.options.speed, i.options.easing, t)) : (i.applyTransition(e), i.$slides.eq(e).css({\n      opacity: 1,\n      zIndex: i.options.zIndex\n    }), t && setTimeout(function () {\n      i.disableTransition(e), t.call();\n    }, i.options.speed));\n  }, a.prototype.fadeSlideOut = function (e) {\n    var t = this;\n    !1 === t.cssTransitions ? t.$slides.eq(e).animate({\n      opacity: 0,\n      zIndex: t.options.zIndex - 2\n    }, t.options.speed, t.options.easing) : (t.applyTransition(e), t.$slides.eq(e).css({\n      opacity: 0,\n      zIndex: t.options.zIndex - 2\n    }));\n  }, a.prototype.filterSlides = a.prototype.slickFilter = function (e) {\n    var t = this;\n    null !== e && (t.$slidesCache = t.$slides, t.unload(), t.$slideTrack.children(this.options.slide).detach(), t.$slidesCache.filter(e).appendTo(t.$slideTrack), t.reinit());\n  }, a.prototype.focusHandler = function () {\n    var i = this;\n    i.$slider.off(\"focus.slick blur.slick\").on(\"focus.slick blur.slick\", \"*\", function (e) {\n      e.stopImmediatePropagation();\n      var t = d(this);\n      setTimeout(function () {\n        i.options.pauseOnFocus && (i.focussed = t.is(\":focus\"), i.autoPlay());\n      }, 0);\n    });\n  }, a.prototype.getCurrent = a.prototype.slickCurrentSlide = function () {\n    return this.currentSlide;\n  }, a.prototype.getDotCount = function () {\n    var e = this,\n        t = 0,\n        i = 0,\n        n = 0;\n    if (!0 === e.options.infinite) {\n      if (e.slideCount <= e.options.slidesToShow) ++n;else for (; t < e.slideCount;) {\n        ++n, t = i + e.options.slidesToScroll, i += e.options.slidesToScroll <= e.options.slidesToShow ? e.options.slidesToScroll : e.options.slidesToShow;\n      }\n    } else if (!0 === e.options.centerMode) n = e.slideCount;else if (e.options.asNavFor) for (; t < e.slideCount;) {\n      ++n, t = i + e.options.slidesToScroll, i += e.options.slidesToScroll <= e.options.slidesToShow ? e.options.slidesToScroll : e.options.slidesToShow;\n    } else n = 1 + Math.ceil((e.slideCount - e.options.slidesToShow) / e.options.slidesToScroll);\n    return n - 1;\n  }, a.prototype.getLeft = function (e) {\n    var t,\n        i,\n        n = this,\n        s = 0;\n    return n.slideOffset = 0, t = n.$slides.first().outerHeight(!0), !0 === n.options.infinite ? (n.slideCount > n.options.slidesToShow && (n.slideOffset = n.slideWidth * n.options.slidesToShow * -1, i = -1, !0 === n.options.vertical && !0 === n.options.centerMode && (2 === n.options.slidesToShow ? i = -1.5 : 1 === n.options.slidesToShow && (i = -2)), s = t * n.options.slidesToShow * i), n.slideCount % n.options.slidesToScroll != 0 && e + n.options.slidesToScroll > n.slideCount && n.slideCount > n.options.slidesToShow && (s = e > n.slideCount ? (n.slideOffset = (n.options.slidesToShow - (e - n.slideCount)) * n.slideWidth * -1, (n.options.slidesToShow - (e - n.slideCount)) * t * -1) : (n.slideOffset = n.slideCount % n.options.slidesToScroll * n.slideWidth * -1, n.slideCount % n.options.slidesToScroll * t * -1))) : e + n.options.slidesToShow > n.slideCount && (n.slideOffset = (e + n.options.slidesToShow - n.slideCount) * n.slideWidth, s = (e + n.options.slidesToShow - n.slideCount) * t), n.slideCount <= n.options.slidesToShow && (s = n.slideOffset = 0), !0 === n.options.centerMode && n.slideCount <= n.options.slidesToShow ? n.slideOffset = n.slideWidth * Math.floor(n.options.slidesToShow) / 2 - n.slideWidth * n.slideCount / 2 : !0 === n.options.centerMode && !0 === n.options.infinite ? n.slideOffset += n.slideWidth * Math.floor(n.options.slidesToShow / 2) - n.slideWidth : !0 === n.options.centerMode && (n.slideOffset = 0, n.slideOffset += n.slideWidth * Math.floor(n.options.slidesToShow / 2)), t = !1 === n.options.vertical ? e * n.slideWidth * -1 + n.slideOffset : e * t * -1 + s, !0 === n.options.variableWidth && (s = n.slideCount <= n.options.slidesToShow || !1 === n.options.infinite ? n.$slideTrack.children(\".slick-slide\").eq(e) : n.$slideTrack.children(\".slick-slide\").eq(e + n.options.slidesToShow), t = !0 === n.options.rtl ? s[0] ? -1 * (n.$slideTrack.width() - s[0].offsetLeft - s.width()) : 0 : s[0] ? -1 * s[0].offsetLeft : 0, !0 === n.options.centerMode && (s = n.slideCount <= n.options.slidesToShow || !1 === n.options.infinite ? n.$slideTrack.children(\".slick-slide\").eq(e) : n.$slideTrack.children(\".slick-slide\").eq(e + n.options.slidesToShow + 1), t = !0 === n.options.rtl ? s[0] ? -1 * (n.$slideTrack.width() - s[0].offsetLeft - s.width()) : 0 : s[0] ? -1 * s[0].offsetLeft : 0, t += (n.$list.width() - s.outerWidth()) / 2)), t;\n  }, a.prototype.getOption = a.prototype.slickGetOption = function (e) {\n    return this.options[e];\n  }, a.prototype.getNavigableIndexes = function () {\n    for (var e = this, t = 0, i = 0, n = [], s = !1 === e.options.infinite ? e.slideCount : (t = -1 * e.options.slidesToScroll, i = -1 * e.options.slidesToScroll, 2 * e.slideCount); t < s;) {\n      n.push(t), t = i + e.options.slidesToScroll, i += e.options.slidesToScroll <= e.options.slidesToShow ? e.options.slidesToScroll : e.options.slidesToShow;\n    }\n\n    return n;\n  }, a.prototype.getSlick = function () {\n    return this;\n  }, a.prototype.getSlideCount = function () {\n    var i,\n        n = this,\n        s = !0 === n.options.centerMode ? n.slideWidth * Math.floor(n.options.slidesToShow / 2) : 0;\n    return !0 === n.options.swipeToSlide ? (n.$slideTrack.find(\".slick-slide\").each(function (e, t) {\n      if (t.offsetLeft - s + d(t).outerWidth() / 2 > -1 * n.swipeLeft) return i = t, !1;\n    }), Math.abs(d(i).attr(\"data-slick-index\") - n.currentSlide) || 1) : n.options.slidesToScroll;\n  }, a.prototype.goTo = a.prototype.slickGoTo = function (e, t) {\n    this.changeSlide({\n      data: {\n        message: \"index\",\n        index: parseInt(e)\n      }\n    }, t);\n  }, a.prototype.init = function (e) {\n    var t = this;\n    d(t.$slider).hasClass(\"slick-initialized\") || (d(t.$slider).addClass(\"slick-initialized\"), t.buildRows(), t.buildOut(), t.setProps(), t.startLoad(), t.loadSlider(), t.initializeEvents(), t.updateArrows(), t.updateDots(), t.checkResponsive(!0), t.focusHandler()), e && t.$slider.trigger(\"init\", [t]), !0 === t.options.accessibility && t.initADA(), t.options.autoplay && (t.paused = !1, t.autoPlay());\n  }, a.prototype.initADA = function () {\n    var i = this,\n        n = Math.ceil(i.slideCount / i.options.slidesToShow),\n        s = i.getNavigableIndexes().filter(function (e) {\n      return 0 <= e && e < i.slideCount;\n    });\n    i.$slides.add(i.$slideTrack.find(\".slick-cloned\")).attr({\n      \"aria-hidden\": \"true\",\n      tabindex: \"-1\"\n    }).find(\"a, input, button, select\").attr({\n      tabindex: \"-1\"\n    }), null !== i.$dots && (i.$slides.not(i.$slideTrack.find(\".slick-cloned\")).each(function (e) {\n      var t = s.indexOf(e);\n      d(this).attr({\n        role: \"tabpanel\",\n        id: \"slick-slide\" + i.instanceUid + e,\n        tabindex: -1\n      }), -1 !== t && (t = \"slick-slide-control\" + i.instanceUid + t, d(\"#\" + t).length && d(this).attr({\n        \"aria-describedby\": t\n      }));\n    }), i.$dots.attr(\"role\", \"tablist\").find(\"li\").each(function (e) {\n      var t = s[e];\n      d(this).attr({\n        role: \"presentation\"\n      }), d(this).find(\"button\").first().attr({\n        role: \"tab\",\n        id: \"slick-slide-control\" + i.instanceUid + e,\n        \"aria-controls\": \"slick-slide\" + i.instanceUid + t,\n        \"aria-label\": e + 1 + \" of \" + n,\n        \"aria-selected\": null,\n        tabindex: \"-1\"\n      });\n    }).eq(i.currentSlide).find(\"button\").attr({\n      \"aria-selected\": \"true\",\n      tabindex: \"0\"\n    }).end());\n\n    for (var e = i.currentSlide, t = e + i.options.slidesToShow; e < t; e++) {\n      i.options.focusOnChange ? i.$slides.eq(e).attr({\n        tabindex: \"0\"\n      }) : i.$slides.eq(e).removeAttr(\"tabindex\");\n    }\n\n    i.activateADA();\n  }, a.prototype.initArrowEvents = function () {\n    var e = this;\n    !0 === e.options.arrows && e.slideCount > e.options.slidesToShow && (e.$prevArrow.off(\"click.slick\").on(\"click.slick\", {\n      message: \"previous\"\n    }, e.changeSlide), e.$nextArrow.off(\"click.slick\").on(\"click.slick\", {\n      message: \"next\"\n    }, e.changeSlide), !0 === e.options.accessibility && (e.$prevArrow.on(\"keydown.slick\", e.keyHandler), e.$nextArrow.on(\"keydown.slick\", e.keyHandler)));\n  }, a.prototype.initDotEvents = function () {\n    var e = this;\n    !0 === e.options.dots && e.slideCount > e.options.slidesToShow && (d(\"li\", e.$dots).on(\"click.slick\", {\n      message: \"index\"\n    }, e.changeSlide), !0 === e.options.accessibility && e.$dots.on(\"keydown.slick\", e.keyHandler)), !0 === e.options.dots && !0 === e.options.pauseOnDotsHover && e.slideCount > e.options.slidesToShow && d(\"li\", e.$dots).on(\"mouseenter.slick\", d.proxy(e.interrupt, e, !0)).on(\"mouseleave.slick\", d.proxy(e.interrupt, e, !1));\n  }, a.prototype.initSlideEvents = function () {\n    var e = this;\n    e.options.pauseOnHover && (e.$list.on(\"mouseenter.slick\", d.proxy(e.interrupt, e, !0)), e.$list.on(\"mouseleave.slick\", d.proxy(e.interrupt, e, !1)));\n  }, a.prototype.initializeEvents = function () {\n    var e = this;\n    e.initArrowEvents(), e.initDotEvents(), e.initSlideEvents(), e.$list.on(\"touchstart.slick mousedown.slick\", {\n      action: \"start\"\n    }, e.swipeHandler), e.$list.on(\"touchmove.slick mousemove.slick\", {\n      action: \"move\"\n    }, e.swipeHandler), e.$list.on(\"touchend.slick mouseup.slick\", {\n      action: \"end\"\n    }, e.swipeHandler), e.$list.on(\"touchcancel.slick mouseleave.slick\", {\n      action: \"end\"\n    }, e.swipeHandler), e.$list.on(\"click.slick\", e.clickHandler), d(document).on(e.visibilityChange, d.proxy(e.visibility, e)), !0 === e.options.accessibility && e.$list.on(\"keydown.slick\", e.keyHandler), !0 === e.options.focusOnSelect && d(e.$slideTrack).children().on(\"click.slick\", e.selectHandler), d(window).on(\"orientationchange.slick.slick-\" + e.instanceUid, d.proxy(e.orientationChange, e)), d(window).on(\"resize.slick.slick-\" + e.instanceUid, d.proxy(e.resize, e)), d(\"[draggable!=true]\", e.$slideTrack).on(\"dragstart\", e.preventDefault), d(window).on(\"load.slick.slick-\" + e.instanceUid, e.setPosition), d(e.setPosition);\n  }, a.prototype.initUI = function () {\n    var e = this;\n    !0 === e.options.arrows && e.slideCount > e.options.slidesToShow && (e.$prevArrow.show(), e.$nextArrow.show()), !0 === e.options.dots && e.slideCount > e.options.slidesToShow && e.$dots.show();\n  }, a.prototype.keyHandler = function (e) {\n    var t = this;\n    e.target.tagName.match(\"TEXTAREA|INPUT|SELECT\") || (37 === e.keyCode && !0 === t.options.accessibility ? t.changeSlide({\n      data: {\n        message: !0 === t.options.rtl ? \"next\" : \"previous\"\n      }\n    }) : 39 === e.keyCode && !0 === t.options.accessibility && t.changeSlide({\n      data: {\n        message: !0 === t.options.rtl ? \"previous\" : \"next\"\n      }\n    }));\n  }, a.prototype.lazyLoad = function () {\n    var e,\n        t,\n        i,\n        r = this;\n\n    function n(e) {\n      d(\"img[data-lazy]\", e).each(function () {\n        var e = d(this),\n            t = d(this).attr(\"data-lazy\"),\n            i = d(this).attr(\"data-srcset\"),\n            n = d(this).attr(\"data-sizes\") || r.$slider.attr(\"data-sizes\"),\n            s = document.createElement(\"img\");\n        s.onload = function () {\n          e.animate({\n            opacity: 0\n          }, 100, function () {\n            i && (e.attr(\"srcset\", i), n && e.attr(\"sizes\", n)), e.attr(\"src\", t).animate({\n              opacity: 1\n            }, 200, function () {\n              e.removeAttr(\"data-lazy data-srcset data-sizes\").removeClass(\"slick-loading\");\n            }), r.$slider.trigger(\"lazyLoaded\", [r, e, t]);\n          });\n        }, s.onerror = function () {\n          e.removeAttr(\"data-lazy\").removeClass(\"slick-loading\").addClass(\"slick-lazyload-error\"), r.$slider.trigger(\"lazyLoadError\", [r, e, t]);\n        }, s.src = t;\n      });\n    }\n\n    if (!0 === r.options.centerMode ? i = !0 === r.options.infinite ? (t = r.currentSlide + (r.options.slidesToShow / 2 + 1)) + r.options.slidesToShow + 2 : (t = Math.max(0, r.currentSlide - (r.options.slidesToShow / 2 + 1)), r.options.slidesToShow / 2 + 1 + 2 + r.currentSlide) : (t = r.options.infinite ? r.options.slidesToShow + r.currentSlide : r.currentSlide, i = Math.ceil(t + r.options.slidesToShow), !0 === r.options.fade && (0 < t && t--, i <= r.slideCount && i++)), e = r.$slider.find(\".slick-slide\").slice(t, i), \"anticipated\" === r.options.lazyLoad) for (var s = t - 1, a = i, o = r.$slider.find(\".slick-slide\"), l = 0; l < r.options.slidesToScroll; l++) {\n      s < 0 && (s = r.slideCount - 1), e = (e = e.add(o.eq(s))).add(o.eq(a)), s--, a++;\n    }\n    n(e), r.slideCount <= r.options.slidesToShow ? n(r.$slider.find(\".slick-slide\")) : r.currentSlide >= r.slideCount - r.options.slidesToShow ? n(r.$slider.find(\".slick-cloned\").slice(0, r.options.slidesToShow)) : 0 === r.currentSlide && n(r.$slider.find(\".slick-cloned\").slice(-1 * r.options.slidesToShow));\n  }, a.prototype.loadSlider = function () {\n    var e = this;\n    e.setPosition(), e.$slideTrack.css({\n      opacity: 1\n    }), e.$slider.removeClass(\"slick-loading\"), e.initUI(), \"progressive\" === e.options.lazyLoad && e.progressiveLazyLoad();\n  }, a.prototype.next = a.prototype.slickNext = function () {\n    this.changeSlide({\n      data: {\n        message: \"next\"\n      }\n    });\n  }, a.prototype.orientationChange = function () {\n    this.checkResponsive(), this.setPosition();\n  }, a.prototype.pause = a.prototype.slickPause = function () {\n    this.autoPlayClear(), this.paused = !0;\n  }, a.prototype.play = a.prototype.slickPlay = function () {\n    var e = this;\n    e.autoPlay(), e.options.autoplay = !0, e.paused = !1, e.focussed = !1, e.interrupted = !1;\n  }, a.prototype.postSlide = function (e) {\n    var t = this;\n    t.unslicked || (t.$slider.trigger(\"afterChange\", [t, e]), t.animating = !1, t.slideCount > t.options.slidesToShow && t.setPosition(), t.swipeLeft = null, t.options.autoplay && t.autoPlay(), !0 === t.options.accessibility && (t.initADA(), t.options.focusOnChange && d(t.$slides.get(t.currentSlide)).attr(\"tabindex\", 0).focus()));\n  }, a.prototype.prev = a.prototype.slickPrev = function () {\n    this.changeSlide({\n      data: {\n        message: \"previous\"\n      }\n    });\n  }, a.prototype.preventDefault = function (e) {\n    e.preventDefault();\n  }, a.prototype.progressiveLazyLoad = function (e) {\n    e = e || 1;\n    var t,\n        i,\n        n,\n        s,\n        r = this,\n        a = d(\"img[data-lazy]\", r.$slider);\n    a.length ? (t = a.first(), i = t.attr(\"data-lazy\"), n = t.attr(\"data-srcset\"), s = t.attr(\"data-sizes\") || r.$slider.attr(\"data-sizes\"), (a = document.createElement(\"img\")).onload = function () {\n      n && (t.attr(\"srcset\", n), s && t.attr(\"sizes\", s)), t.attr(\"src\", i).removeAttr(\"data-lazy data-srcset data-sizes\").removeClass(\"slick-loading\"), !0 === r.options.adaptiveHeight && r.setPosition(), r.$slider.trigger(\"lazyLoaded\", [r, t, i]), r.progressiveLazyLoad();\n    }, a.onerror = function () {\n      e < 3 ? setTimeout(function () {\n        r.progressiveLazyLoad(e + 1);\n      }, 500) : (t.removeAttr(\"data-lazy\").removeClass(\"slick-loading\").addClass(\"slick-lazyload-error\"), r.$slider.trigger(\"lazyLoadError\", [r, t, i]), r.progressiveLazyLoad());\n    }, a.src = i) : r.$slider.trigger(\"allImagesLoaded\", [r]);\n  }, a.prototype.refresh = function (e) {\n    var t = this,\n        i = t.slideCount - t.options.slidesToShow;\n    !t.options.infinite && t.currentSlide > i && (t.currentSlide = i), t.slideCount <= t.options.slidesToShow && (t.currentSlide = 0), i = t.currentSlide, t.destroy(!0), d.extend(t, t.initials, {\n      currentSlide: i\n    }), t.init(), e || t.changeSlide({\n      data: {\n        message: \"index\",\n        index: i\n      }\n    }, !1);\n  }, a.prototype.registerBreakpoints = function () {\n    var e,\n        t,\n        i,\n        n = this,\n        s = n.options.responsive || null;\n\n    if (\"array\" === d.type(s) && s.length) {\n      for (e in n.respondTo = n.options.respondTo || \"window\", s) {\n        if (i = n.breakpoints.length - 1, s.hasOwnProperty(e)) {\n          for (t = s[e].breakpoint; 0 <= i;) {\n            n.breakpoints[i] && n.breakpoints[i] === t && n.breakpoints.splice(i, 1), i--;\n          }\n\n          n.breakpoints.push(t), n.breakpointSettings[t] = s[e].settings;\n        }\n      }\n\n      n.breakpoints.sort(function (e, t) {\n        return n.options.mobileFirst ? e - t : t - e;\n      });\n    }\n  }, a.prototype.reinit = function () {\n    var e = this;\n    e.$slides = e.$slideTrack.children(e.options.slide).addClass(\"slick-slide\"), e.slideCount = e.$slides.length, e.currentSlide >= e.slideCount && 0 !== e.currentSlide && (e.currentSlide = e.currentSlide - e.options.slidesToScroll), e.slideCount <= e.options.slidesToShow && (e.currentSlide = 0), e.registerBreakpoints(), e.setProps(), e.setupInfinite(), e.buildArrows(), e.updateArrows(), e.initArrowEvents(), e.buildDots(), e.updateDots(), e.initDotEvents(), e.cleanUpSlideEvents(), e.initSlideEvents(), e.checkResponsive(!1, !0), !0 === e.options.focusOnSelect && d(e.$slideTrack).children().on(\"click.slick\", e.selectHandler), e.setSlideClasses(\"number\" == typeof e.currentSlide ? e.currentSlide : 0), e.setPosition(), e.focusHandler(), e.paused = !e.options.autoplay, e.autoPlay(), e.$slider.trigger(\"reInit\", [e]);\n  }, a.prototype.resize = function () {\n    var e = this;\n    d(window).width() !== e.windowWidth && (clearTimeout(e.windowDelay), e.windowDelay = window.setTimeout(function () {\n      e.windowWidth = d(window).width(), e.checkResponsive(), e.unslicked || e.setPosition();\n    }, 50));\n  }, a.prototype.removeSlide = a.prototype.slickRemove = function (e, t, i) {\n    var n = this;\n    if (e = \"boolean\" == typeof e ? !0 === (t = e) ? 0 : n.slideCount - 1 : !0 === t ? --e : e, n.slideCount < 1 || e < 0 || e > n.slideCount - 1) return !1;\n    n.unload(), (!0 === i ? n.$slideTrack.children() : n.$slideTrack.children(this.options.slide).eq(e)).remove(), n.$slides = n.$slideTrack.children(this.options.slide), n.$slideTrack.children(this.options.slide).detach(), n.$slideTrack.append(n.$slides), n.$slidesCache = n.$slides, n.reinit();\n  }, a.prototype.setCSS = function (e) {\n    var t,\n        i,\n        n = this,\n        s = {};\n    !0 === n.options.rtl && (e = -e), t = \"left\" == n.positionProp ? Math.ceil(e) + \"px\" : \"0px\", i = \"top\" == n.positionProp ? Math.ceil(e) + \"px\" : \"0px\", s[n.positionProp] = e, !1 === n.transformsEnabled || (!(s = {}) === n.cssTransitions ? s[n.animType] = \"translate(\" + t + \", \" + i + \")\" : s[n.animType] = \"translate3d(\" + t + \", \" + i + \", 0px)\"), n.$slideTrack.css(s);\n  }, a.prototype.setDimensions = function () {\n    var e = this;\n    !1 === e.options.vertical ? !0 === e.options.centerMode && e.$list.css({\n      padding: \"0px \" + e.options.centerPadding\n    }) : (e.$list.height(e.$slides.first().outerHeight(!0) * e.options.slidesToShow), !0 === e.options.centerMode && e.$list.css({\n      padding: e.options.centerPadding + \" 0px\"\n    })), e.listWidth = e.$list.width(), e.listHeight = e.$list.height(), !1 === e.options.vertical && !1 === e.options.variableWidth ? (e.slideWidth = Math.ceil(e.listWidth / e.options.slidesToShow), e.$slideTrack.width(Math.ceil(e.slideWidth * e.$slideTrack.children(\".slick-slide\").length))) : !0 === e.options.variableWidth ? e.$slideTrack.width(5e3 * e.slideCount) : (e.slideWidth = Math.ceil(e.listWidth), e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0) * e.$slideTrack.children(\".slick-slide\").length)));\n    var t = e.$slides.first().outerWidth(!0) - e.$slides.first().width();\n    !1 === e.options.variableWidth && e.$slideTrack.children(\".slick-slide\").width(e.slideWidth - t);\n  }, a.prototype.setFade = function () {\n    var i,\n        n = this;\n    n.$slides.each(function (e, t) {\n      i = n.slideWidth * e * -1, !0 === n.options.rtl ? d(t).css({\n        position: \"relative\",\n        right: i,\n        top: 0,\n        zIndex: n.options.zIndex - 2,\n        opacity: 0\n      }) : d(t).css({\n        position: \"relative\",\n        left: i,\n        top: 0,\n        zIndex: n.options.zIndex - 2,\n        opacity: 0\n      });\n    }), n.$slides.eq(n.currentSlide).css({\n      zIndex: n.options.zIndex - 1,\n      opacity: 1\n    });\n  }, a.prototype.setHeight = function () {\n    var e,\n        t = this;\n    1 === t.options.slidesToShow && !0 === t.options.adaptiveHeight && !1 === t.options.vertical && (e = t.$slides.eq(t.currentSlide).outerHeight(!0), t.$list.css(\"height\", e));\n  }, a.prototype.setOption = a.prototype.slickSetOption = function () {\n    var e,\n        t,\n        i,\n        n,\n        s,\n        r = this,\n        a = !1;\n    if (\"object\" === d.type(arguments[0]) ? (i = arguments[0], a = arguments[1], s = \"multiple\") : \"string\" === d.type(arguments[0]) && (i = arguments[0], n = arguments[1], a = arguments[2], \"responsive\" === arguments[0] && \"array\" === d.type(arguments[1]) ? s = \"responsive\" : void 0 !== arguments[1] && (s = \"single\")), \"single\" === s) r.options[i] = n;else if (\"multiple\" === s) d.each(i, function (e, t) {\n      r.options[e] = t;\n    });else if (\"responsive\" === s) for (t in n) {\n      if (\"array\" !== d.type(r.options.responsive)) r.options.responsive = [n[t]];else {\n        for (e = r.options.responsive.length - 1; 0 <= e;) {\n          r.options.responsive[e].breakpoint === n[t].breakpoint && r.options.responsive.splice(e, 1), e--;\n        }\n\n        r.options.responsive.push(n[t]);\n      }\n    }\n    a && (r.unload(), r.reinit());\n  }, a.prototype.setPosition = function () {\n    var e = this;\n    e.setDimensions(), e.setHeight(), !1 === e.options.fade ? e.setCSS(e.getLeft(e.currentSlide)) : e.setFade(), e.$slider.trigger(\"setPosition\", [e]);\n  }, a.prototype.setProps = function () {\n    var e = this,\n        t = document.body.style;\n    e.positionProp = !0 === e.options.vertical ? \"top\" : \"left\", \"top\" === e.positionProp ? e.$slider.addClass(\"slick-vertical\") : e.$slider.removeClass(\"slick-vertical\"), void 0 === t.WebkitTransition && void 0 === t.MozTransition && void 0 === t.msTransition || !0 === e.options.useCSS && (e.cssTransitions = !0), e.options.fade && (\"number\" == typeof e.options.zIndex ? e.options.zIndex < 3 && (e.options.zIndex = 3) : e.options.zIndex = e.defaults.zIndex), void 0 !== t.OTransform && (e.animType = \"OTransform\", e.transformType = \"-o-transform\", e.transitionType = \"OTransition\", void 0 === t.perspectiveProperty && void 0 === t.webkitPerspective && (e.animType = !1)), void 0 !== t.MozTransform && (e.animType = \"MozTransform\", e.transformType = \"-moz-transform\", e.transitionType = \"MozTransition\", void 0 === t.perspectiveProperty && void 0 === t.MozPerspective && (e.animType = !1)), void 0 !== t.webkitTransform && (e.animType = \"webkitTransform\", e.transformType = \"-webkit-transform\", e.transitionType = \"webkitTransition\", void 0 === t.perspectiveProperty && void 0 === t.webkitPerspective && (e.animType = !1)), void 0 !== t.msTransform && (e.animType = \"msTransform\", e.transformType = \"-ms-transform\", e.transitionType = \"msTransition\", void 0 === t.msTransform && (e.animType = !1)), void 0 !== t.transform && !1 !== e.animType && (e.animType = \"transform\", e.transformType = \"transform\", e.transitionType = \"transition\"), e.transformsEnabled = e.options.useTransform && null !== e.animType && !1 !== e.animType;\n  }, a.prototype.setSlideClasses = function (e) {\n    var t,\n        i,\n        n,\n        s = this,\n        r = s.$slider.find(\".slick-slide\").removeClass(\"slick-active slick-center slick-current\").attr(\"aria-hidden\", \"true\");\n    s.$slides.eq(e).addClass(\"slick-current\"), !0 === s.options.centerMode ? (i = s.options.slidesToShow % 2 == 0 ? 1 : 0, n = Math.floor(s.options.slidesToShow / 2), !0 === s.options.infinite && (n <= e && e <= s.slideCount - 1 - n ? s.$slides.slice(e - n + i, e + n + 1).addClass(\"slick-active\").attr(\"aria-hidden\", \"false\") : (t = s.options.slidesToShow + e, r.slice(t - n + 1 + i, t + n + 2).addClass(\"slick-active\").attr(\"aria-hidden\", \"false\")), 0 === e ? r.eq(r.length - 1 - s.options.slidesToShow).addClass(\"slick-center\") : e === s.slideCount - 1 && r.eq(s.options.slidesToShow).addClass(\"slick-center\")), s.$slides.eq(e).addClass(\"slick-center\")) : 0 <= e && e <= s.slideCount - s.options.slidesToShow ? s.$slides.slice(e, e + s.options.slidesToShow).addClass(\"slick-active\").attr(\"aria-hidden\", \"false\") : r.length <= s.options.slidesToShow ? r.addClass(\"slick-active\").attr(\"aria-hidden\", \"false\") : (n = s.slideCount % s.options.slidesToShow, t = !0 === s.options.infinite ? s.options.slidesToShow + e : e, (s.options.slidesToShow == s.options.slidesToScroll && s.slideCount - e < s.options.slidesToShow ? r.slice(t - (s.options.slidesToShow - n), t + n) : r.slice(t, t + s.options.slidesToShow)).addClass(\"slick-active\").attr(\"aria-hidden\", \"false\")), \"ondemand\" !== s.options.lazyLoad && \"anticipated\" !== s.options.lazyLoad || s.lazyLoad();\n  }, a.prototype.setupInfinite = function () {\n    var e,\n        t,\n        i,\n        n = this;\n\n    if (!0 === n.options.fade && (n.options.centerMode = !1), !0 === n.options.infinite && !1 === n.options.fade && (t = null, n.slideCount > n.options.slidesToShow)) {\n      for (i = !0 === n.options.centerMode ? n.options.slidesToShow + 1 : n.options.slidesToShow, e = n.slideCount; e > n.slideCount - i; --e) {\n        t = e - 1, d(n.$slides[t]).clone(!0).attr(\"id\", \"\").attr(\"data-slick-index\", t - n.slideCount).prependTo(n.$slideTrack).addClass(\"slick-cloned\");\n      }\n\n      for (e = 0; e < i + n.slideCount; e += 1) {\n        t = e, d(n.$slides[t]).clone(!0).attr(\"id\", \"\").attr(\"data-slick-index\", t + n.slideCount).appendTo(n.$slideTrack).addClass(\"slick-cloned\");\n      }\n\n      n.$slideTrack.find(\".slick-cloned\").find(\"[id]\").each(function () {\n        d(this).attr(\"id\", \"\");\n      });\n    }\n  }, a.prototype.interrupt = function (e) {\n    e || this.autoPlay(), this.interrupted = e;\n  }, a.prototype.selectHandler = function (e) {\n    e = d(e.target).is(\".slick-slide\") ? d(e.target) : d(e.target).parents(\".slick-slide\"), e = (e = parseInt(e.attr(\"data-slick-index\"))) || 0;\n    this.slideCount <= this.options.slidesToShow ? this.slideHandler(e, !1, !0) : this.slideHandler(e);\n  }, a.prototype.slideHandler = function (e, t, i) {\n    var n,\n        s,\n        r,\n        a,\n        o = this;\n    if (t = t || !1, !(!0 === o.animating && !0 === o.options.waitForAnimate || !0 === o.options.fade && o.currentSlide === e)) if (!1 === t && o.asNavFor(e), n = e, r = o.getLeft(n), t = o.getLeft(o.currentSlide), o.currentLeft = null === o.swipeLeft ? t : o.swipeLeft, !1 === o.options.infinite && !1 === o.options.centerMode && (e < 0 || e > o.getDotCount() * o.options.slidesToScroll)) !1 === o.options.fade && (n = o.currentSlide, !0 !== i && o.slideCount > o.options.slidesToShow ? o.animateSlide(t, function () {\n      o.postSlide(n);\n    }) : o.postSlide(n));else if (!1 === o.options.infinite && !0 === o.options.centerMode && (e < 0 || e > o.slideCount - o.options.slidesToScroll)) !1 === o.options.fade && (n = o.currentSlide, !0 !== i && o.slideCount > o.options.slidesToShow ? o.animateSlide(t, function () {\n      o.postSlide(n);\n    }) : o.postSlide(n));else {\n      if (o.options.autoplay && clearInterval(o.autoPlayTimer), s = n < 0 ? o.slideCount % o.options.slidesToScroll != 0 ? o.slideCount - o.slideCount % o.options.slidesToScroll : o.slideCount + n : n >= o.slideCount ? o.slideCount % o.options.slidesToScroll != 0 ? 0 : n - o.slideCount : n, o.animating = !0, o.$slider.trigger(\"beforeChange\", [o, o.currentSlide, s]), t = o.currentSlide, o.currentSlide = s, o.setSlideClasses(o.currentSlide), o.options.asNavFor && (a = (a = o.getNavTarget()).slick(\"getSlick\")).slideCount <= a.options.slidesToShow && a.setSlideClasses(o.currentSlide), o.updateDots(), o.updateArrows(), !0 === o.options.fade) return !0 !== i ? (o.fadeSlideOut(t), o.fadeSlide(s, function () {\n        o.postSlide(s);\n      })) : o.postSlide(s), void o.animateHeight();\n      !0 !== i && o.slideCount > o.options.slidesToShow ? o.animateSlide(r, function () {\n        o.postSlide(s);\n      }) : o.postSlide(s);\n    }\n  }, a.prototype.startLoad = function () {\n    var e = this;\n    !0 === e.options.arrows && e.slideCount > e.options.slidesToShow && (e.$prevArrow.hide(), e.$nextArrow.hide()), !0 === e.options.dots && e.slideCount > e.options.slidesToShow && e.$dots.hide(), e.$slider.addClass(\"slick-loading\");\n  }, a.prototype.swipeDirection = function () {\n    var e = this,\n        t = e.touchObject.startX - e.touchObject.curX,\n        i = e.touchObject.startY - e.touchObject.curY,\n        t = Math.atan2(i, t),\n        t = Math.round(180 * t / Math.PI);\n    return (t = t < 0 ? 360 - Math.abs(t) : t) <= 45 && 0 <= t || t <= 360 && 315 <= t ? !1 === e.options.rtl ? \"left\" : \"right\" : 135 <= t && t <= 225 ? !1 === e.options.rtl ? \"right\" : \"left\" : !0 === e.options.verticalSwiping ? 35 <= t && t <= 135 ? \"down\" : \"up\" : \"vertical\";\n  }, a.prototype.swipeEnd = function (e) {\n    var t,\n        i,\n        n = this;\n    if (n.dragging = !1, n.swiping = !1, n.scrolling) return n.scrolling = !1;\n    if (n.interrupted = !1, n.shouldClick = !(10 < n.touchObject.swipeLength), void 0 === n.touchObject.curX) return !1;\n\n    if (!0 === n.touchObject.edgeHit && n.$slider.trigger(\"edge\", [n, n.swipeDirection()]), n.touchObject.swipeLength >= n.touchObject.minSwipe) {\n      switch (i = n.swipeDirection()) {\n        case \"left\":\n        case \"down\":\n          t = n.options.swipeToSlide ? n.checkNavigable(n.currentSlide + n.getSlideCount()) : n.currentSlide + n.getSlideCount(), n.currentDirection = 0;\n          break;\n\n        case \"right\":\n        case \"up\":\n          t = n.options.swipeToSlide ? n.checkNavigable(n.currentSlide - n.getSlideCount()) : n.currentSlide - n.getSlideCount(), n.currentDirection = 1;\n      }\n\n      \"vertical\" != i && (n.slideHandler(t), n.touchObject = {}, n.$slider.trigger(\"swipe\", [n, i]));\n    } else n.touchObject.startX !== n.touchObject.curX && (n.slideHandler(n.currentSlide), n.touchObject = {});\n  }, a.prototype.swipeHandler = function (e) {\n    var t = this;\n    if (!(!1 === t.options.swipe || \"ontouchend\" in document && !1 === t.options.swipe || !1 === t.options.draggable && -1 !== e.type.indexOf(\"mouse\"))) switch (t.touchObject.fingerCount = e.originalEvent && void 0 !== e.originalEvent.touches ? e.originalEvent.touches.length : 1, t.touchObject.minSwipe = t.listWidth / t.options.touchThreshold, !0 === t.options.verticalSwiping && (t.touchObject.minSwipe = t.listHeight / t.options.touchThreshold), e.data.action) {\n      case \"start\":\n        t.swipeStart(e);\n        break;\n\n      case \"move\":\n        t.swipeMove(e);\n        break;\n\n      case \"end\":\n        t.swipeEnd(e);\n    }\n  }, a.prototype.swipeMove = function (e) {\n    var t,\n        i,\n        n = this,\n        s = void 0 !== e.originalEvent ? e.originalEvent.touches : null;\n    return !(!n.dragging || n.scrolling || s && 1 !== s.length) && (t = n.getLeft(n.currentSlide), n.touchObject.curX = void 0 !== s ? s[0].pageX : e.clientX, n.touchObject.curY = void 0 !== s ? s[0].pageY : e.clientY, n.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(n.touchObject.curX - n.touchObject.startX, 2))), i = Math.round(Math.sqrt(Math.pow(n.touchObject.curY - n.touchObject.startY, 2))), !n.options.verticalSwiping && !n.swiping && 4 < i ? !(n.scrolling = !0) : (!0 === n.options.verticalSwiping && (n.touchObject.swipeLength = i), s = n.swipeDirection(), void 0 !== e.originalEvent && 4 < n.touchObject.swipeLength && (n.swiping = !0, e.preventDefault()), i = (!1 === n.options.rtl ? 1 : -1) * (n.touchObject.curX > n.touchObject.startX ? 1 : -1), !0 === n.options.verticalSwiping && (i = n.touchObject.curY > n.touchObject.startY ? 1 : -1), e = n.touchObject.swipeLength, (n.touchObject.edgeHit = !1) === n.options.infinite && (0 === n.currentSlide && \"right\" === s || n.currentSlide >= n.getDotCount() && \"left\" === s) && (e = n.touchObject.swipeLength * n.options.edgeFriction, n.touchObject.edgeHit = !0), !1 === n.options.vertical ? n.swipeLeft = t + e * i : n.swipeLeft = t + e * (n.$list.height() / n.listWidth) * i, !0 === n.options.verticalSwiping && (n.swipeLeft = t + e * i), !0 !== n.options.fade && !1 !== n.options.touchMove && (!0 === n.animating ? (n.swipeLeft = null, !1) : void n.setCSS(n.swipeLeft))));\n  }, a.prototype.swipeStart = function (e) {\n    var t,\n        i = this;\n    if (i.interrupted = !0, 1 !== i.touchObject.fingerCount || i.slideCount <= i.options.slidesToShow) return !(i.touchObject = {});\n    void 0 !== e.originalEvent && void 0 !== e.originalEvent.touches && (t = e.originalEvent.touches[0]), i.touchObject.startX = i.touchObject.curX = void 0 !== t ? t.pageX : e.clientX, i.touchObject.startY = i.touchObject.curY = void 0 !== t ? t.pageY : e.clientY, i.dragging = !0;\n  }, a.prototype.unfilterSlides = a.prototype.slickUnfilter = function () {\n    var e = this;\n    null !== e.$slidesCache && (e.unload(), e.$slideTrack.children(this.options.slide).detach(), e.$slidesCache.appendTo(e.$slideTrack), e.reinit());\n  }, a.prototype.unload = function () {\n    var e = this;\n    d(\".slick-cloned\", e.$slider).remove(), e.$dots && e.$dots.remove(), e.$prevArrow && e.htmlExpr.test(e.options.prevArrow) && e.$prevArrow.remove(), e.$nextArrow && e.htmlExpr.test(e.options.nextArrow) && e.$nextArrow.remove(), e.$slides.removeClass(\"slick-slide slick-active slick-visible slick-current\").attr(\"aria-hidden\", \"true\").css(\"width\", \"\");\n  }, a.prototype.unslick = function (e) {\n    this.$slider.trigger(\"unslick\", [this, e]), this.destroy();\n  }, a.prototype.updateArrows = function () {\n    var e = this;\n    Math.floor(e.options.slidesToShow / 2);\n    !0 === e.options.arrows && e.slideCount > e.options.slidesToShow && !e.options.infinite && (e.$prevArrow.removeClass(\"slick-disabled\").attr(\"aria-disabled\", \"false\"), e.$nextArrow.removeClass(\"slick-disabled\").attr(\"aria-disabled\", \"false\"), 0 === e.currentSlide ? (e.$prevArrow.addClass(\"slick-disabled\").attr(\"aria-disabled\", \"true\"), e.$nextArrow.removeClass(\"slick-disabled\").attr(\"aria-disabled\", \"false\")) : (e.currentSlide >= e.slideCount - e.options.slidesToShow && !1 === e.options.centerMode || e.currentSlide >= e.slideCount - 1 && !0 === e.options.centerMode) && (e.$nextArrow.addClass(\"slick-disabled\").attr(\"aria-disabled\", \"true\"), e.$prevArrow.removeClass(\"slick-disabled\").attr(\"aria-disabled\", \"false\")));\n  }, a.prototype.updateDots = function () {\n    var e = this;\n    null !== e.$dots && (e.$dots.find(\"li\").removeClass(\"slick-active\").end(), e.$dots.find(\"li\").eq(Math.floor(e.currentSlide / e.options.slidesToScroll)).addClass(\"slick-active\"));\n  }, a.prototype.visibility = function () {\n    this.options.autoplay && (document[this.hidden] ? this.interrupted = !0 : this.interrupted = !1);\n  }, d.fn.slick = function () {\n    for (var e, t = this, i = arguments[0], n = Array.prototype.slice.call(arguments, 1), s = t.length, r = 0; r < s; r++) {\n      if (\"object\" == _typeof(i) || void 0 === i ? t[r].slick = new a(t[r], i) : e = t[r].slick[i].apply(t[r].slick, n), void 0 !== e) return e;\n    }\n\n    return t;\n  };\n}), i = function i(c) {\n  \"use strict\";\n\n  function i(e, t) {\n    var i = this;\n    i.element = e, i.$element = c(e), i.state = {\n      multiple: !!i.$element.attr(\"multiple\"),\n      enabled: !1,\n      opened: !1,\n      currValue: -1,\n      selectedIdx: -1,\n      highlightedIdx: -1\n    }, i.eventTriggers = {\n      open: i.open,\n      close: i.close,\n      destroy: i.destroy,\n      refresh: i.refresh,\n      init: i.init\n    }, i.init(t);\n  }\n\n  var t = c(document),\n      s = c(window),\n      l = \"selectric\",\n      n = \".sl\",\n      r = [\"a\", \"e\", \"i\", \"o\", \"u\", \"n\", \"c\", \"y\"],\n      a = [/[\\xE0-\\xE5]/g, /[\\xE8-\\xEB]/g, /[\\xEC-\\xEF]/g, /[\\xF2-\\xF6]/g, /[\\xF9-\\xFC]/g, /[\\xF1]/g, /[\\xE7]/g, /[\\xFD-\\xFF]/g];\n  i.prototype = {\n    utils: {\n      isMobile: function isMobile() {\n        return /android|ip(hone|od|ad)/i.test(navigator.userAgent);\n      },\n      escapeRegExp: function escapeRegExp(e) {\n        return e.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n      },\n      replaceDiacritics: function replaceDiacritics(e) {\n        for (var t = a.length; t--;) {\n          e = e.toLowerCase().replace(a[t], r[t]);\n        }\n\n        return e;\n      },\n      format: function format(e) {\n        var n = arguments;\n        return (\"\" + e).replace(/\\{(?:(\\d+)|(\\w+))\\}/g, function (e, t, i) {\n          return i && n[1] ? n[1][i] : n[t];\n        });\n      },\n      nextEnabledItem: function nextEnabledItem(e, t) {\n        for (; e[t = (t + 1) % e.length].disabled;) {\n          ;\n        }\n\n        return t;\n      },\n      previousEnabledItem: function previousEnabledItem(e, t) {\n        for (; e[t = (0 < t ? t : e.length) - 1].disabled;) {\n          ;\n        }\n\n        return t;\n      },\n      toDash: function toDash(e) {\n        return e.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\n      },\n      triggerCallback: function triggerCallback(e, t) {\n        var i = t.element,\n            n = t.options[\"on\" + e],\n            t = [i].concat([].slice.call(arguments).slice(1));\n        c.isFunction(n) && n.apply(i, t), c(i).trigger(l + \"-\" + this.toDash(e), t);\n      },\n      arrayToClassname: function arrayToClassname(e) {\n        e = c.grep(e, function (e) {\n          return !!e;\n        });\n        return c.trim(e.join(\" \"));\n      }\n    },\n    init: function init(e) {\n      var t,\n          i,\n          n,\n          s,\n          r,\n          a,\n          o = this;\n      o.options = c.extend(!0, {}, c.fn[l].defaults, o.options, e), o.utils.triggerCallback(\"BeforeInit\", o), o.destroy(!0), o.options.disableOnMobile && o.utils.isMobile() ? o.disableOnMobile = !0 : (o.classes = o.getClassNames(), t = c(\"<input/>\", {\n        \"class\": o.classes.input,\n        readonly: o.utils.isMobile()\n      }), i = c(\"<div/>\", {\n        \"class\": o.classes.items,\n        tabindex: -1\n      }), n = c(\"<div/>\", {\n        \"class\": o.classes.scroll\n      }), s = c(\"<div/>\", {\n        \"class\": o.classes.prefix,\n        html: o.options.arrowButtonMarkup\n      }), r = c(\"<span/>\", {\n        \"class\": \"label\"\n      }), a = o.$element.wrap(\"<div/>\").parent().append(s.prepend(r), i, t), e = c(\"<div/>\", {\n        \"class\": o.classes.hideselect\n      }), o.elements = {\n        input: t,\n        items: i,\n        itemsScroll: n,\n        wrapper: s,\n        label: r,\n        outerWrapper: a\n      }, o.options.nativeOnMobile && o.utils.isMobile() && (o.elements.input = void 0, e.addClass(o.classes.prefix + \"-is-native\"), o.$element.on(\"change\", function () {\n        o.refresh();\n      })), o.$element.on(o.eventTriggers).wrap(e), o.originalTabindex = o.$element.prop(\"tabindex\"), o.$element.prop(\"tabindex\", -1), o.populate(), o.activate(), o.utils.triggerCallback(\"Init\", o));\n    },\n    activate: function activate() {\n      var e = this,\n          t = e.elements.items.closest(\":visible\").children(\":hidden\").addClass(e.classes.tempshow),\n          i = e.$element.width();\n      t.removeClass(e.classes.tempshow), e.utils.triggerCallback(\"BeforeActivate\", e), e.elements.outerWrapper.prop(\"class\", e.utils.arrayToClassname([e.classes.wrapper, e.$element.prop(\"class\").replace(/\\S+/g, e.classes.prefix + \"-$&\"), e.options.responsive ? e.classes.responsive : \"\"])), e.options.inheritOriginalWidth && 0 < i && e.elements.outerWrapper.width(i), e.unbindEvents(), e.$element.prop(\"disabled\") ? (e.elements.outerWrapper.addClass(e.classes.disabled), e.elements.input && e.elements.input.prop(\"disabled\", !0)) : (e.state.enabled = !0, e.elements.outerWrapper.removeClass(e.classes.disabled), e.$li = e.elements.items.removeAttr(\"style\").find(\"li\"), e.bindEvents()), e.utils.triggerCallback(\"Activate\", e);\n    },\n    getClassNames: function getClassNames() {\n      var n = this,\n          s = n.options.customClass,\n          r = {};\n      return c.each(\"Input Items Open Disabled TempShow HideSelect Wrapper Focus Hover Responsive Above Below Scroll Group GroupLabel\".split(\" \"), function (e, t) {\n        var i = s.prefix + t;\n        r[t.toLowerCase()] = s.camelCase ? i : n.utils.toDash(i);\n      }), r.prefix = s.prefix, r;\n    },\n    setLabel: function setLabel() {\n      var t,\n          e,\n          i = this,\n          n = i.options.labelBuilder;\n      i.state.multiple ? (e = 0 === (e = c.isArray(i.state.currValue) ? i.state.currValue : [i.state.currValue]).length ? [0] : e, t = c.map(e, function (t) {\n        return c.grep(i.lookupItems, function (e) {\n          return e.index === t;\n        })[0];\n      }), t = c.grep(t, function (e) {\n        return 1 < t.length || 0 === t.length ? \"\" !== c.trim(e.value) : e;\n      }), t = c.map(t, function (e) {\n        return c.isFunction(n) ? n(e) : i.utils.format(n, e);\n      }), i.options.multiple.maxLabelEntries && (t.length >= i.options.multiple.maxLabelEntries + 1 ? (t = t.slice(0, i.options.multiple.maxLabelEntries)).push(c.isFunction(n) ? n({\n        text: \"...\"\n      }) : i.utils.format(n, {\n        text: \"...\"\n      })) : t.slice(t.length - 1)), i.elements.label.html(t.join(i.options.multiple.separator))) : (e = i.lookupItems[i.state.currValue], i.elements.label.html(c.isFunction(n) ? n(e) : i.utils.format(n, e)));\n    },\n    populate: function populate() {\n      var n = this,\n          e = n.$element.children(),\n          t = n.$element.find(\"option\"),\n          i = t.filter(\":selected\"),\n          s = t.index(i),\n          r = 0,\n          t = n.state.multiple ? [] : 0;\n      1 < i.length && n.state.multiple && (s = [], i.each(function () {\n        s.push(c(this).index());\n      })), n.state.currValue = ~s ? s : t, n.state.selectedIdx = n.state.currValue, n.state.highlightedIdx = n.state.currValue, n.items = [], n.lookupItems = [], e.length && (e.each(function (e) {\n        var i,\n            t = c(this);\n        t.is(\"optgroup\") ? (i = {\n          element: t,\n          label: t.prop(\"label\"),\n          groupDisabled: t.prop(\"disabled\"),\n          items: []\n        }, t.children().each(function (e) {\n          var t = c(this);\n          i.items[e] = n.getItemData(r, t, i.groupDisabled || t.prop(\"disabled\")), n.lookupItems[r] = i.items[e], r++;\n        }), n.items[e] = i) : (n.items[e] = n.getItemData(r, t, t.prop(\"disabled\")), n.lookupItems[r] = n.items[e], r++);\n      }), n.setLabel(), n.elements.items.append(n.elements.itemsScroll.html(n.getItemsMarkup(n.items))));\n    },\n    getItemData: function getItemData(e, t, i) {\n      return {\n        index: e,\n        element: t,\n        value: t.val(),\n        className: t.prop(\"class\"),\n        text: t.html(),\n        slug: c.trim(this.utils.replaceDiacritics(t.html())),\n        alt: t.attr(\"data-alt\"),\n        selected: t.prop(\"selected\"),\n        disabled: i\n      };\n    },\n    getItemsMarkup: function getItemsMarkup(e) {\n      var i = this,\n          n = \"<ul>\";\n      return c.isFunction(i.options.listBuilder) && i.options.listBuilder && (e = i.options.listBuilder(e)), c.each(e, function (e, t) {\n        void 0 !== t.label ? (n += i.utils.format('<ul class=\"{1}\"><li class=\"{2}\">{3}</li>', i.utils.arrayToClassname([i.classes.group, t.groupDisabled ? \"disabled\" : \"\", t.element.prop(\"class\")]), i.classes.grouplabel, t.element.prop(\"label\")), c.each(t.items, function (e, t) {\n          n += i.getItemMarkup(t.index, t);\n        }), n += \"</ul>\") : n += i.getItemMarkup(t.index, t);\n      }), n + \"</ul>\";\n    },\n    getItemMarkup: function getItemMarkup(e, t) {\n      var i = this,\n          n = i.options.optionsItemBuilder,\n          s = {\n        value: t.value,\n        text: t.text,\n        slug: t.slug,\n        index: t.index\n      };\n      return i.utils.format('<li data-index=\"{1}\" class=\"{2}\">{3}</li>', e, i.utils.arrayToClassname([t.className, e === i.items.length - 1 ? \"last\" : \"\", t.disabled ? \"disabled\" : \"\", t.selected ? \"selected\" : \"\"]), c.isFunction(n) ? i.utils.format(n(t, this.$element, e), t) : i.utils.format(n, s));\n    },\n    unbindEvents: function unbindEvents() {\n      this.elements.wrapper.add(this.$element).add(this.elements.outerWrapper).add(this.elements.input).off(n);\n    },\n    bindEvents: function bindEvents() {\n      var r = this;\n      r.elements.outerWrapper.on(\"mouseenter.sl mouseleave.sl\", function (e) {\n        c(this).toggleClass(r.classes.hover, \"mouseenter\" === e.type), r.options.openOnHover && (clearTimeout(r.closeTimer), \"mouseleave\" === e.type ? r.closeTimer = setTimeout(c.proxy(r.close, r), r.options.hoverIntentTimeout) : r.open());\n      }), r.elements.wrapper.on(\"click.sl\", function (e) {\n        r.state.opened ? r.close() : r.open(e);\n      }), r.options.nativeOnMobile && r.utils.isMobile() || (r.$element.on(\"focus.sl\", function () {\n        r.elements.input.focus();\n      }), r.elements.input.prop({\n        tabindex: r.originalTabindex,\n        disabled: !1\n      }).on(\"keydown.sl\", c.proxy(r.handleKeys, r)).on(\"focusin.sl\", function (e) {\n        r.elements.outerWrapper.addClass(r.classes.focus), r.elements.input.one(\"blur\", function () {\n          r.elements.input.blur();\n        }), r.options.openOnFocus && !r.state.opened && r.open(e);\n      }).on(\"focusout.sl\", function () {\n        r.elements.outerWrapper.removeClass(r.classes.focus);\n      }).on(\"input propertychange\", function () {\n        var e = r.elements.input.val(),\n            s = new RegExp(\"^\" + r.utils.escapeRegExp(e), \"i\");\n        clearTimeout(r.resetStr), r.resetStr = setTimeout(function () {\n          r.elements.input.val(\"\");\n        }, r.options.keySearchTimeout), e.length && c.each(r.items, function (e, t) {\n          if (!t.disabled) {\n            if (s.test(t.text) || s.test(t.slug)) return r.highlight(e), !1;\n            if (t.alt) for (var i = t.alt.split(\"|\"), n = 0; n < i.length && i[n]; n++) {\n              if (s.test(i[n].trim())) return r.highlight(e), !1;\n            }\n          }\n        });\n      })), r.$li.on({\n        mousedown: function mousedown(e) {\n          e.preventDefault(), e.stopPropagation();\n        },\n        click: function click() {\n          return r.select(c(this).data(\"index\")), !1;\n        }\n      });\n    },\n    handleKeys: function handleKeys(e) {\n      var t = this,\n          i = e.which,\n          n = t.options.keys,\n          s = -1 < c.inArray(i, n.previous),\n          r = -1 < c.inArray(i, n.next),\n          a = -1 < c.inArray(i, n.select),\n          o = -1 < c.inArray(i, n.open),\n          l = t.state.highlightedIdx,\n          d = s && 0 === l || r && l + 1 === t.items.length,\n          n = 0;\n\n      if (13 !== i && 32 !== i || e.preventDefault(), s || r) {\n        if (!t.options.allowWrap && d) return;\n        s && (n = t.utils.previousEnabledItem(t.lookupItems, l)), r && (n = t.utils.nextEnabledItem(t.lookupItems, l)), t.highlight(n);\n      }\n\n      if (a && t.state.opened) return t.select(l), void (t.state.multiple && t.options.multiple.keepMenuOpen || t.close());\n      o && !t.state.opened && t.open();\n    },\n    refresh: function refresh() {\n      this.populate(), this.activate(), this.utils.triggerCallback(\"Refresh\", this);\n    },\n    setOptionsDimensions: function setOptionsDimensions() {\n      var e = this,\n          t = e.elements.items.closest(\":visible\").children(\":hidden\").addClass(e.classes.tempshow),\n          i = e.options.maxHeight,\n          n = e.elements.items.outerWidth(),\n          s = e.elements.wrapper.outerWidth() - (n - e.elements.items.width());\n      !e.options.expandToItemText || n < s ? e.finalWidth = s : (e.elements.items.css(\"overflow\", \"scroll\"), e.elements.outerWrapper.width(9e4), e.finalWidth = e.elements.items.width(), e.elements.items.css(\"overflow\", \"\"), e.elements.outerWrapper.width(\"\")), e.elements.items.width(e.finalWidth).height() > i && e.elements.items.height(i), t.removeClass(e.classes.tempshow);\n    },\n    isInViewport: function isInViewport() {\n      var e,\n          t,\n          i,\n          n = this;\n      !0 === n.options.forceRenderAbove ? n.elements.outerWrapper.addClass(n.classes.above) : !0 === n.options.forceRenderBelow ? n.elements.outerWrapper.addClass(n.classes.below) : (i = s.scrollTop(), t = s.height(), t = (e = n.elements.outerWrapper.offset().top) + n.elements.outerWrapper.outerHeight() + n.itemsHeight <= i + t, i = e - n.itemsHeight > i, i = !(t = !t && i), n.elements.outerWrapper.toggleClass(n.classes.above, t), n.elements.outerWrapper.toggleClass(n.classes.below, i));\n    },\n    detectItemVisibility: function detectItemVisibility(e) {\n      var t = this,\n          i = t.$li.filter(\"[data-index]\");\n      t.state.multiple && (e = c.isArray(e) && 0 === e.length ? 0 : e, e = c.isArray(e) ? Math.min.apply(Math, e) : e);\n      var n = i.eq(e).outerHeight(),\n          s = i[e].offsetTop,\n          i = t.elements.itemsScroll.scrollTop(),\n          e = s + 2 * n;\n      t.elements.itemsScroll.scrollTop(e > i + t.itemsHeight ? e - t.itemsHeight : s - n < i ? s - n : i);\n    },\n    open: function open(e) {\n      var s = this;\n      if (s.options.nativeOnMobile && s.utils.isMobile()) return !1;\n      s.utils.triggerCallback(\"BeforeOpen\", s), e && (e.preventDefault(), s.options.stopPropagation && e.stopPropagation()), s.state.enabled && (s.setOptionsDimensions(), c(\".\" + s.classes.hideselect, \".\" + s.classes.open).children()[l](\"close\"), s.state.opened = !0, s.itemsHeight = s.elements.items.outerHeight(), s.itemsInnerHeight = s.elements.items.height(), s.elements.outerWrapper.addClass(s.classes.open), s.elements.input.val(\"\"), e && \"focusin\" !== e.type && s.elements.input.focus(), setTimeout(function () {\n        t.on(\"click.sl\", c.proxy(s.close, s)).on(\"scroll.sl\", c.proxy(s.isInViewport, s));\n      }, 1), s.isInViewport(), s.options.preventWindowScroll && t.on(\"mousewheel.sl DOMMouseScroll.sl\", \".\" + s.classes.scroll, function (e) {\n        var t = e.originalEvent,\n            i = c(this).scrollTop(),\n            n = 0;\n        \"detail\" in t && (n = -1 * t.detail), \"wheelDelta\" in t && (n = t.wheelDelta), \"wheelDeltaY\" in t && (n = t.wheelDeltaY), \"deltaY\" in t && (n = -1 * t.deltaY), (i === this.scrollHeight - s.itemsInnerHeight && n < 0 || 0 === i && 0 < n) && e.preventDefault();\n      }), s.detectItemVisibility(s.state.selectedIdx), s.highlight(s.state.multiple ? -1 : s.state.selectedIdx), s.utils.triggerCallback(\"Open\", s));\n    },\n    close: function close() {\n      var e = this;\n      e.utils.triggerCallback(\"BeforeClose\", e), t.off(n), e.elements.outerWrapper.removeClass(e.classes.open), e.state.opened = !1, e.utils.triggerCallback(\"Close\", e);\n    },\n    change: function change() {\n      var i = this;\n      i.utils.triggerCallback(\"BeforeChange\", i), i.state.multiple ? (c.each(i.lookupItems, function (e) {\n        i.lookupItems[e].selected = !1, i.$element.find(\"option\").prop(\"selected\", !1);\n      }), c.each(i.state.selectedIdx, function (e, t) {\n        i.lookupItems[t].selected = !0, i.$element.find(\"option\").eq(t).prop(\"selected\", !0);\n      }), i.state.currValue = i.state.selectedIdx, i.setLabel(), i.utils.triggerCallback(\"Change\", i)) : i.state.currValue !== i.state.selectedIdx && (i.$element.prop(\"selectedIndex\", i.state.currValue = i.state.selectedIdx).data(\"value\", i.lookupItems[i.state.selectedIdx].text), i.setLabel(), i.utils.triggerCallback(\"Change\", i));\n    },\n    highlight: function highlight(e) {\n      var t = this,\n          i = t.$li.filter(\"[data-index]\").removeClass(\"highlighted\");\n      t.utils.triggerCallback(\"BeforeHighlight\", t), void 0 === e || -1 === e || t.lookupItems[e].disabled || (i.eq(t.state.highlightedIdx = e).addClass(\"highlighted\"), t.detectItemVisibility(e), t.utils.triggerCallback(\"Highlight\", t));\n    },\n    select: function select(e) {\n      var t,\n          i = this,\n          n = i.$li.filter(\"[data-index]\");\n      i.utils.triggerCallback(\"BeforeSelect\", i, e), void 0 === e || -1 === e || i.lookupItems[e].disabled || (i.state.multiple ? (i.state.selectedIdx = c.isArray(i.state.selectedIdx) ? i.state.selectedIdx : [i.state.selectedIdx], -1 !== (t = c.inArray(e, i.state.selectedIdx)) ? i.state.selectedIdx.splice(t, 1) : i.state.selectedIdx.push(e), n.removeClass(\"selected\").filter(function (e) {\n        return -1 !== c.inArray(e, i.state.selectedIdx);\n      }).addClass(\"selected\")) : n.removeClass(\"selected\").eq(i.state.selectedIdx = e).addClass(\"selected\"), i.state.multiple && i.options.multiple.keepMenuOpen || i.close(), i.change(), i.utils.triggerCallback(\"Select\", i, e));\n    },\n    destroy: function destroy(e) {\n      var t = this;\n      t.state && t.state.enabled && (t.elements.items.add(t.elements.wrapper).add(t.elements.input).remove(), e || t.$element.removeData(l).removeData(\"value\"), t.$element.prop(\"tabindex\", t.originalTabindex).off(n).off(t.eventTriggers).unwrap().unwrap(), t.state.enabled = !1);\n    }\n  }, c.fn[l] = function (t) {\n    return this.each(function () {\n      var e = c.data(this, l);\n      e && !e.disableOnMobile ? \"string\" == typeof t && e[t] ? e[t]() : e.init(t) : c.data(this, l, new i(this, t));\n    });\n  }, c.fn[l].defaults = {\n    onChange: function onChange(e) {\n      c(e).change();\n    },\n    maxHeight: 300,\n    keySearchTimeout: 500,\n    arrowButtonMarkup: '<b class=\"button\">&#x25be;</b>',\n    disableOnMobile: !1,\n    nativeOnMobile: !0,\n    openOnFocus: !0,\n    openOnHover: !1,\n    hoverIntentTimeout: 500,\n    expandToItemText: !1,\n    responsive: !1,\n    preventWindowScroll: !0,\n    inheritOriginalWidth: !1,\n    allowWrap: !0,\n    forceRenderAbove: !1,\n    forceRenderBelow: !1,\n    stopPropagation: !0,\n    optionsItemBuilder: \"{text}\",\n    labelBuilder: \"{text}\",\n    listBuilder: !1,\n    keys: {\n      previous: [37, 38],\n      next: [39, 40],\n      select: [9, 13, 27],\n      open: [13, 32, 37, 38, 39, 40],\n      close: [9, 27]\n    },\n    customClass: {\n      prefix: l,\n      camelCase: !1\n    },\n    multiple: {\n      separator: \", \",\n      keepMenuOpen: !0,\n      maxLabelEntries: !1\n    }\n  };\n},  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_0__], __WEBPACK_AMD_DEFINE_FACTORY__ = (i),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0, e = this, t = function t() {\n  \"use strict\";\n\n  function e(e, t) {\n    for (var i = 0; i < t.length; i++) {\n      var n = t[i];\n      n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n    }\n  }\n\n  function t() {\n    return (t = Object.assign || function (e) {\n      for (var t = 1; t < arguments.length; t++) {\n        var i,\n            n = arguments[t];\n\n        for (i in n) {\n          Object.prototype.hasOwnProperty.call(n, i) && (e[i] = n[i]);\n        }\n      }\n\n      return e;\n    }).apply(this, arguments);\n  }\n\n  function n(e) {\n    return null !== e && \"object\" == _typeof(e) && \"constructor\" in e && e.constructor === Object;\n  }\n\n  function s(t, i) {\n    void 0 === t && (t = {}), void 0 === i && (i = {}), Object.keys(i).forEach(function (e) {\n      void 0 === t[e] ? t[e] = i[e] : n(i[e]) && n(t[e]) && 0 < Object.keys(i[e]).length && s(t[e], i[e]);\n    });\n  }\n\n  var i = {\n    body: {},\n    addEventListener: function addEventListener() {},\n    removeEventListener: function removeEventListener() {},\n    activeElement: {\n      blur: function blur() {},\n      nodeName: \"\"\n    },\n    querySelector: function querySelector() {\n      return null;\n    },\n    querySelectorAll: function querySelectorAll() {\n      return [];\n    },\n    getElementById: function getElementById() {\n      return null;\n    },\n    createEvent: function createEvent() {\n      return {\n        initEvent: function initEvent() {}\n      };\n    },\n    createElement: function createElement() {\n      return {\n        children: [],\n        childNodes: [],\n        style: {},\n        setAttribute: function setAttribute() {},\n        getElementsByTagName: function getElementsByTagName() {\n          return [];\n        }\n      };\n    },\n    createElementNS: function createElementNS() {\n      return {};\n    },\n    importNode: function importNode() {\n      return null;\n    },\n    location: {\n      hash: \"\",\n      host: \"\",\n      hostname: \"\",\n      href: \"\",\n      origin: \"\",\n      pathname: \"\",\n      protocol: \"\",\n      search: \"\"\n    }\n  };\n\n  function y() {\n    var e = \"undefined\" != typeof document ? document : {};\n    return s(e, i), e;\n  }\n\n  var r = {\n    document: i,\n    navigator: {\n      userAgent: \"\"\n    },\n    location: {\n      hash: \"\",\n      host: \"\",\n      hostname: \"\",\n      href: \"\",\n      origin: \"\",\n      pathname: \"\",\n      protocol: \"\",\n      search: \"\"\n    },\n    history: {\n      replaceState: function replaceState() {},\n      pushState: function pushState() {},\n      go: function go() {},\n      back: function back() {}\n    },\n    CustomEvent: function CustomEvent() {\n      return this;\n    },\n    addEventListener: function addEventListener() {},\n    removeEventListener: function removeEventListener() {},\n    getComputedStyle: function getComputedStyle() {\n      return {\n        getPropertyValue: function getPropertyValue() {\n          return \"\";\n        }\n      };\n    },\n    Image: function Image() {},\n    Date: function Date() {},\n    screen: {},\n    setTimeout: function setTimeout() {},\n    clearTimeout: function clearTimeout() {},\n    matchMedia: function matchMedia() {\n      return {};\n    },\n    requestAnimationFrame: function requestAnimationFrame(e) {\n      return \"undefined\" == typeof setTimeout ? (e(), null) : setTimeout(e, 0);\n    },\n    cancelAnimationFrame: function cancelAnimationFrame(e) {\n      \"undefined\" != typeof setTimeout && clearTimeout(e);\n    }\n  };\n\n  function U() {\n    var e = \"undefined\" != typeof window ? window : {};\n    return s(e, r), e;\n  }\n\n  function a(e) {\n    return (a = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) {\n      return e.__proto__ || Object.getPrototypeOf(e);\n    })(e);\n  }\n\n  function o(e, t) {\n    return (o = Object.setPrototypeOf || function (e, t) {\n      return e.__proto__ = t, e;\n    })(e, t);\n  }\n\n  function l(e, t, i) {\n    return (l = function () {\n      if (\"undefined\" != typeof Reflect && Reflect.construct && !Reflect.construct.sham) {\n        if (\"function\" == typeof Proxy) return 1;\n\n        try {\n          return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), 1;\n        } catch (e) {\n          return;\n        }\n      }\n    }() ? Reflect.construct : function (e, t, i) {\n      var n = [null];\n      n.push.apply(n, t);\n      n = new (Function.bind.apply(e, n))();\n      return i && o(n, i.prototype), n;\n    }).apply(null, arguments);\n  }\n\n  function d(e) {\n    var i = \"function\" == typeof Map ? new Map() : void 0;\n    return (d = function d(e) {\n      if (null === e || -1 === Function.toString.call(e).indexOf(\"[native code]\")) return e;\n      if (\"function\" != typeof e) throw new TypeError(\"Super expression must either be null or a function\");\n\n      if (void 0 !== i) {\n        if (i.has(e)) return i.get(e);\n        i.set(e, t);\n      }\n\n      function t() {\n        return l(e, arguments, a(this).constructor);\n      }\n\n      return t.prototype = Object.create(e.prototype, {\n        constructor: {\n          value: t,\n          enumerable: !1,\n          writable: !0,\n          configurable: !0\n        }\n      }), o(t, e);\n    })(e);\n  }\n\n  var c,\n      u = (c = d(Array), D = c, (I = p).prototype = Object.create(D.prototype), (I.prototype.constructor = I).__proto__ = D, p);\n\n  function p(e) {\n    var t = c.call.apply(c, [this].concat(e)) || this,\n        e = function (e) {\n      if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n      return e;\n    }(t),\n        i = e.__proto__;\n\n    return Object.defineProperty(e, \"__proto__\", {\n      get: function get() {\n        return i;\n      },\n      set: function set(e) {\n        i.__proto__ = e;\n      }\n    }), t;\n  }\n\n  function h(e) {\n    var t = [];\n    return (e = void 0 === e ? [] : e).forEach(function (e) {\n      Array.isArray(e) ? t.push.apply(t, h(e)) : t.push(e);\n    }), t;\n  }\n\n  function f(e, t) {\n    return Array.prototype.filter.call(e, t);\n  }\n\n  function S(e, s) {\n    var t = U(),\n        r = y(),\n        i = [];\n    if (!s && e instanceof u) return e;\n    if (!e) return new u(i);\n\n    if (\"string\" == typeof e) {\n      var n = e.trim();\n\n      if (0 <= n.indexOf(\"<\") && 0 <= n.indexOf(\">\")) {\n        var a = \"div\";\n        0 === n.indexOf(\"<li\") && (a = \"ul\"), 0 === n.indexOf(\"<tr\") && (a = \"tbody\"), 0 !== n.indexOf(\"<td\") && 0 !== n.indexOf(\"<th\") || (a = \"tr\"), 0 === n.indexOf(\"<tbody\") && (a = \"table\"), 0 === n.indexOf(\"<option\") && (a = \"select\");\n        var o = r.createElement(a);\n        o.innerHTML = n;\n\n        for (var l = 0; l < o.childNodes.length; l += 1) {\n          i.push(o.childNodes[l]);\n        }\n      } else i = function (e) {\n        if (\"string\" != typeof e) return [e];\n\n        for (var t = [], i = (s || r).querySelectorAll(e), n = 0; n < i.length; n += 1) {\n          t.push(i[n]);\n        }\n\n        return t;\n      }(e.trim());\n    } else if (e.nodeType || e === t || e === r) i.push(e);else if (Array.isArray(e)) {\n      if (e instanceof u) return e;\n      i = e;\n    }\n\n    return new u(function (e) {\n      for (var t = [], i = 0; i < e.length; i += 1) {\n        -1 === t.indexOf(e[i]) && t.push(e[i]);\n      }\n\n      return t;\n    }(i));\n  }\n\n  S.fn = u.prototype;\n  var m,\n      b,\n      w,\n      v = {\n    addClass: function addClass() {\n      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {\n        t[i] = arguments[i];\n      }\n\n      var n = h(t.map(function (e) {\n        return e.split(\" \");\n      }));\n      return this.forEach(function (e) {\n        (e = e.classList).add.apply(e, n);\n      }), this;\n    },\n    removeClass: function removeClass() {\n      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {\n        t[i] = arguments[i];\n      }\n\n      var n = h(t.map(function (e) {\n        return e.split(\" \");\n      }));\n      return this.forEach(function (e) {\n        (e = e.classList).remove.apply(e, n);\n      }), this;\n    },\n    hasClass: function hasClass() {\n      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {\n        t[i] = arguments[i];\n      }\n\n      var n = h(t.map(function (e) {\n        return e.split(\" \");\n      }));\n      return 0 < f(this, function (t) {\n        return 0 < n.filter(function (e) {\n          return t.classList.contains(e);\n        }).length;\n      }).length;\n    },\n    toggleClass: function toggleClass() {\n      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {\n        t[i] = arguments[i];\n      }\n\n      var n = h(t.map(function (e) {\n        return e.split(\" \");\n      }));\n      this.forEach(function (t) {\n        n.forEach(function (e) {\n          t.classList.toggle(e);\n        });\n      });\n    },\n    attr: function attr(e, t) {\n      if (1 === arguments.length && \"string\" == typeof e) return this[0] ? this[0].getAttribute(e) : void 0;\n\n      for (var i = 0; i < this.length; i += 1) {\n        if (2 === arguments.length) this[i].setAttribute(e, t);else for (var n in e) {\n          this[i][n] = e[n], this[i].setAttribute(n, e[n]);\n        }\n      }\n\n      return this;\n    },\n    removeAttr: function removeAttr(e) {\n      for (var t = 0; t < this.length; t += 1) {\n        this[t].removeAttribute(e);\n      }\n\n      return this;\n    },\n    transform: function transform(e) {\n      for (var t = 0; t < this.length; t += 1) {\n        this[t].style.transform = e;\n      }\n\n      return this;\n    },\n    transition: function transition(e) {\n      for (var t = 0; t < this.length; t += 1) {\n        this[t].style.transitionDuration = \"string\" != typeof e ? e + \"ms\" : e;\n      }\n\n      return this;\n    },\n    on: function on() {\n      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {\n        t[i] = arguments[i];\n      }\n\n      var n = t[0],\n          r = t[1],\n          a = t[2],\n          s = t[3];\n\n      function o(e) {\n        var t = e.target;\n\n        if (t) {\n          var i = e.target.dom7EventData || [];\n          if (i.indexOf(e) < 0 && i.unshift(e), S(t).is(r)) a.apply(t, i);else for (var n = S(t).parents(), s = 0; s < n.length; s += 1) {\n            S(n[s]).is(r) && a.apply(n[s], i);\n          }\n        }\n      }\n\n      function l(e) {\n        var t = e && e.target && e.target.dom7EventData || [];\n        t.indexOf(e) < 0 && t.unshift(e), a.apply(this, t);\n      }\n\n      \"function\" == typeof t[1] && (n = t[0], a = t[1], s = t[2], r = void 0);\n\n      for (var d, s = s || !1, c = n.split(\" \"), u = 0; u < this.length; u += 1) {\n        var p = this[u];\n        if (r) for (d = 0; d < c.length; d += 1) {\n          var h = c[d];\n          p.dom7LiveListeners || (p.dom7LiveListeners = {}), p.dom7LiveListeners[h] || (p.dom7LiveListeners[h] = []), p.dom7LiveListeners[h].push({\n            listener: a,\n            proxyListener: o\n          }), p.addEventListener(h, o, s);\n        } else for (d = 0; d < c.length; d += 1) {\n          var f = c[d];\n          p.dom7Listeners || (p.dom7Listeners = {}), p.dom7Listeners[f] || (p.dom7Listeners[f] = []), p.dom7Listeners[f].push({\n            listener: a,\n            proxyListener: l\n          }), p.addEventListener(f, l, s);\n        }\n      }\n\n      return this;\n    },\n    off: function off() {\n      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {\n        t[i] = arguments[i];\n      }\n\n      var n = t[0],\n          s = t[1],\n          r = t[2],\n          a = t[3];\n      \"function\" == typeof t[1] && (n = t[0], r = t[1], a = t[2], s = void 0);\n\n      for (var a = a || !1, o = n.split(\" \"), l = 0; l < o.length; l += 1) {\n        for (var d = o[l], c = 0; c < this.length; c += 1) {\n          var u = this[c],\n              p = void 0;\n          if (!s && u.dom7Listeners ? p = u.dom7Listeners[d] : s && u.dom7LiveListeners && (p = u.dom7LiveListeners[d]), p && p.length) for (var h = p.length - 1; 0 <= h; --h) {\n            var f = p[h];\n            !(r && f.listener === r || r && f.listener && f.listener.dom7proxy && f.listener.dom7proxy === r) && r || (u.removeEventListener(d, f.proxyListener, a), p.splice(h, 1));\n          }\n        }\n      }\n\n      return this;\n    },\n    trigger: function trigger() {\n      for (var e = U(), t = arguments.length, i = new Array(t), n = 0; n < t; n++) {\n        i[n] = arguments[n];\n      }\n\n      for (var s = i[0].split(\" \"), r = i[1], a = 0; a < s.length; a += 1) {\n        for (var o = s[a], l = 0; l < this.length; l += 1) {\n          var d,\n              c = this[l];\n          e.CustomEvent && (d = new e.CustomEvent(o, {\n            detail: r,\n            bubbles: !0,\n            cancelable: !0\n          }), c.dom7EventData = i.filter(function (e, t) {\n            return 0 < t;\n          }), c.dispatchEvent(d), c.dom7EventData = [], delete c.dom7EventData);\n        }\n      }\n\n      return this;\n    },\n    transitionEnd: function transitionEnd(i) {\n      var n = this;\n      return i && n.on(\"transitionend\", function e(t) {\n        t.target === this && (i.call(this, t), n.off(\"transitionend\", e));\n      }), this;\n    },\n    outerWidth: function outerWidth(e) {\n      if (0 < this.length) {\n        if (e) {\n          e = this.styles();\n          return this[0].offsetWidth + parseFloat(e.getPropertyValue(\"margin-right\")) + parseFloat(e.getPropertyValue(\"margin-left\"));\n        }\n\n        return this[0].offsetWidth;\n      }\n\n      return null;\n    },\n    outerHeight: function outerHeight(e) {\n      if (0 < this.length) {\n        if (e) {\n          e = this.styles();\n          return this[0].offsetHeight + parseFloat(e.getPropertyValue(\"margin-top\")) + parseFloat(e.getPropertyValue(\"margin-bottom\"));\n        }\n\n        return this[0].offsetHeight;\n      }\n\n      return null;\n    },\n    styles: function styles() {\n      var e = U();\n      return this[0] ? e.getComputedStyle(this[0], null) : {};\n    },\n    offset: function offset() {\n      if (0 < this.length) {\n        var e = U(),\n            t = y(),\n            i = this[0],\n            n = i.getBoundingClientRect(),\n            s = t.body,\n            r = i.clientTop || s.clientTop || 0,\n            t = i.clientLeft || s.clientLeft || 0,\n            s = i === e ? e.scrollY : i.scrollTop,\n            i = i === e ? e.scrollX : i.scrollLeft;\n        return {\n          top: n.top + s - r,\n          left: n.left + i - t\n        };\n      }\n\n      return null;\n    },\n    css: function css(e, t) {\n      var i,\n          n = U();\n\n      if (1 === arguments.length) {\n        if (\"string\" != typeof e) {\n          for (i = 0; i < this.length; i += 1) {\n            for (var s in e) {\n              this[i].style[s] = e[s];\n            }\n          }\n\n          return this;\n        }\n\n        if (this[0]) return n.getComputedStyle(this[0], null).getPropertyValue(e);\n      }\n\n      if (2 !== arguments.length || \"string\" != typeof e) return this;\n\n      for (i = 0; i < this.length; i += 1) {\n        this[i].style[e] = t;\n      }\n\n      return this;\n    },\n    each: function each(i) {\n      return i && this.forEach(function (e, t) {\n        i.apply(e, [e, t]);\n      }), this;\n    },\n    html: function html(e) {\n      if (void 0 === e) return this[0] ? this[0].innerHTML : null;\n\n      for (var t = 0; t < this.length; t += 1) {\n        this[t].innerHTML = e;\n      }\n\n      return this;\n    },\n    text: function text(e) {\n      if (void 0 === e) return this[0] ? this[0].textContent.trim() : null;\n\n      for (var t = 0; t < this.length; t += 1) {\n        this[t].textContent = e;\n      }\n\n      return this;\n    },\n    is: function is(e) {\n      var t,\n          i,\n          n = U(),\n          s = y(),\n          r = this[0];\n      if (!r || void 0 === e) return !1;\n\n      if (\"string\" == typeof e) {\n        if (r.matches) return r.matches(e);\n        if (r.webkitMatchesSelector) return r.webkitMatchesSelector(e);\n        if (r.msMatchesSelector) return r.msMatchesSelector(e);\n\n        for (t = S(e), i = 0; i < t.length; i += 1) {\n          if (t[i] === r) return !0;\n        }\n\n        return !1;\n      }\n\n      if (e === s) return r === s;\n      if (e === n) return r === n;\n\n      if (e.nodeType || e instanceof u) {\n        for (t = e.nodeType ? [e] : e, i = 0; i < t.length; i += 1) {\n          if (t[i] === r) return !0;\n        }\n\n        return !1;\n      }\n\n      return !1;\n    },\n    index: function index() {\n      var e,\n          t = this[0];\n\n      if (t) {\n        for (e = 0; null !== (t = t.previousSibling);) {\n          1 === t.nodeType && (e += 1);\n        }\n\n        return e;\n      }\n    },\n    eq: function eq(e) {\n      if (void 0 === e) return this;\n      var t = this.length;\n      if (t - 1 < e) return S([]);\n\n      if (e < 0) {\n        t = t + e;\n        return S(t < 0 ? [] : [this[t]]);\n      }\n\n      return S([this[e]]);\n    },\n    append: function append() {\n      for (var e = y(), t = 0; t < arguments.length; t += 1) {\n        for (var i = t < 0 || arguments.length <= t ? void 0 : arguments[t], n = 0; n < this.length; n += 1) {\n          if (\"string\" == typeof i) {\n            var s = e.createElement(\"div\");\n\n            for (s.innerHTML = i; s.firstChild;) {\n              this[n].appendChild(s.firstChild);\n            }\n          } else if (i instanceof u) for (var r = 0; r < i.length; r += 1) {\n            this[n].appendChild(i[r]);\n          } else this[n].appendChild(i);\n        }\n      }\n\n      return this;\n    },\n    prepend: function prepend(e) {\n      for (var t, i = y(), n = 0; n < this.length; n += 1) {\n        if (\"string\" == typeof e) {\n          var s = i.createElement(\"div\");\n\n          for (s.innerHTML = e, t = s.childNodes.length - 1; 0 <= t; --t) {\n            this[n].insertBefore(s.childNodes[t], this[n].childNodes[0]);\n          }\n        } else if (e instanceof u) for (t = 0; t < e.length; t += 1) {\n          this[n].insertBefore(e[t], this[n].childNodes[0]);\n        } else this[n].insertBefore(e, this[n].childNodes[0]);\n      }\n\n      return this;\n    },\n    next: function next(e) {\n      return 0 < this.length ? e ? this[0].nextElementSibling && S(this[0].nextElementSibling).is(e) ? S([this[0].nextElementSibling]) : S([]) : this[0].nextElementSibling ? S([this[0].nextElementSibling]) : S([]) : S([]);\n    },\n    nextAll: function nextAll(e) {\n      var t = [],\n          i = this[0];\n      if (!i) return S([]);\n\n      for (; i.nextElementSibling;) {\n        var n = i.nextElementSibling;\n        e && !S(n).is(e) || t.push(n), i = n;\n      }\n\n      return S(t);\n    },\n    prev: function prev(e) {\n      if (0 < this.length) {\n        var t = this[0];\n        return e ? t.previousElementSibling && S(t.previousElementSibling).is(e) ? S([t.previousElementSibling]) : S([]) : t.previousElementSibling ? S([t.previousElementSibling]) : S([]);\n      }\n\n      return S([]);\n    },\n    prevAll: function prevAll(e) {\n      var t = [],\n          i = this[0];\n      if (!i) return S([]);\n\n      for (; i.previousElementSibling;) {\n        var n = i.previousElementSibling;\n        e && !S(n).is(e) || t.push(n), i = n;\n      }\n\n      return S(t);\n    },\n    parent: function parent(e) {\n      for (var t = [], i = 0; i < this.length; i += 1) {\n        null === this[i].parentNode || e && !S(this[i].parentNode).is(e) || t.push(this[i].parentNode);\n      }\n\n      return S(t);\n    },\n    parents: function parents(e) {\n      for (var t = [], i = 0; i < this.length; i += 1) {\n        for (var n = this[i].parentNode; n;) {\n          e && !S(n).is(e) || t.push(n), n = n.parentNode;\n        }\n      }\n\n      return S(t);\n    },\n    closest: function closest(e) {\n      var t = this;\n      return void 0 === e ? S([]) : t = !t.is(e) ? t.parents(e).eq(0) : t;\n    },\n    find: function find(e) {\n      for (var t = [], i = 0; i < this.length; i += 1) {\n        for (var n = this[i].querySelectorAll(e), s = 0; s < n.length; s += 1) {\n          t.push(n[s]);\n        }\n      }\n\n      return S(t);\n    },\n    children: function children(e) {\n      for (var t = [], i = 0; i < this.length; i += 1) {\n        for (var n = this[i].children, s = 0; s < n.length; s += 1) {\n          e && !S(n[s]).is(e) || t.push(n[s]);\n        }\n      }\n\n      return S(t);\n    },\n    filter: function filter(e) {\n      return S(f(this, e));\n    },\n    remove: function remove() {\n      for (var e = 0; e < this.length; e += 1) {\n        this[e].parentNode && this[e].parentNode.removeChild(this[e]);\n      }\n\n      return this;\n    }\n  };\n\n  function E(e, t) {\n    return void 0 === t && (t = 0), setTimeout(e, t);\n  }\n\n  function k() {\n    return Date.now();\n  }\n\n  function g(e, t) {\n    void 0 === t && (t = \"x\");\n    var i,\n        n,\n        s,\n        r = U(),\n        e = r.getComputedStyle(e, null);\n    return r.WebKitCSSMatrix ? (6 < (n = e.transform || e.webkitTransform).split(\",\").length && (n = n.split(\", \").map(function (e) {\n      return e.replace(\",\", \".\");\n    }).join(\", \")), s = new r.WebKitCSSMatrix(\"none\" === n ? \"\" : n)) : i = (s = e.MozTransform || e.OTransform || e.MsTransform || e.msTransform || e.transform || e.getPropertyValue(\"transform\").replace(\"translate(\", \"matrix(1, 0, 0, 1,\")).toString().split(\",\"), \"x\" === t && (n = r.WebKitCSSMatrix ? s.m41 : 16 === i.length ? parseFloat(i[12]) : parseFloat(i[4])), (n = \"y\" === t ? r.WebKitCSSMatrix ? s.m42 : 16 === i.length ? parseFloat(i[13]) : parseFloat(i[5]) : n) || 0;\n  }\n\n  function x(e) {\n    return \"object\" == _typeof(e) && null !== e && e.constructor && e.constructor === Object;\n  }\n\n  function K(e) {\n    for (var t = Object(arguments.length <= 0 ? void 0 : e), i = 1; i < arguments.length; i += 1) {\n      var n = i < 0 || arguments.length <= i ? void 0 : arguments[i];\n      if (null != n) for (var s = Object.keys(Object(n)), r = 0, a = s.length; r < a; r += 1) {\n        var o = s[r],\n            l = Object.getOwnPropertyDescriptor(n, o);\n        void 0 !== l && l.enumerable && (x(t[o]) && x(n[o]) ? K(t[o], n[o]) : !x(t[o]) && x(n[o]) ? (t[o] = {}, K(t[o], n[o])) : t[o] = n[o]);\n      }\n    }\n\n    return t;\n  }\n\n  function T(i, n) {\n    Object.keys(n).forEach(function (t) {\n      x(n[t]) && Object.keys(n[t]).forEach(function (e) {\n        \"function\" == typeof n[t][e] && (n[t][e] = n[t][e].bind(i));\n      }), i[t] = n[t];\n    });\n  }\n\n  function C() {\n    return m || (i = U(), e = y(), m = {\n      touch: !!(\"ontouchstart\" in i || i.DocumentTouch && e instanceof i.DocumentTouch),\n      pointerEvents: !!i.PointerEvent && \"maxTouchPoints\" in i.navigator && 0 <= i.navigator.maxTouchPoints,\n      observer: \"MutationObserver\" in i || \"WebkitMutationObserver\" in i,\n      passiveListener: function () {\n        var e = !1;\n\n        try {\n          var t = Object.defineProperty({}, \"passive\", {\n            get: function get() {\n              e = !0;\n            }\n          });\n          i.addEventListener(\"testPassiveListener\", null, t);\n        } catch (e) {}\n\n        return e;\n      }(),\n      gestures: \"ongesturestart\" in i\n    }), m;\n    var i, e;\n  }\n\n  Object.keys(v).forEach(function (e) {\n    S.fn[e] = v[e];\n  });\n  var $ = {\n    name: \"resize\",\n    create: function create() {\n      var e = this;\n      K(e, {\n        resize: {\n          resizeHandler: function resizeHandler() {\n            e && !e.destroyed && e.initialized && (e.emit(\"beforeResize\"), e.emit(\"resize\"));\n          },\n          orientationChangeHandler: function orientationChangeHandler() {\n            e && !e.destroyed && e.initialized && e.emit(\"orientationchange\");\n          }\n        }\n      });\n    },\n    on: {\n      init: function init(e) {\n        var t = U();\n        t.addEventListener(\"resize\", e.resize.resizeHandler), t.addEventListener(\"orientationchange\", e.resize.orientationChangeHandler);\n      },\n      destroy: function destroy(e) {\n        var t = U();\n        t.removeEventListener(\"resize\", e.resize.resizeHandler), t.removeEventListener(\"orientationchange\", e.resize.orientationChangeHandler);\n      }\n    }\n  },\n      M = {\n    attach: function attach(e, t) {\n      void 0 === t && (t = {});\n      var i = U(),\n          n = this,\n          s = new (i.MutationObserver || i.WebkitMutationObserver)(function (e) {\n        var t;\n        1 !== e.length ? (t = function t() {\n          n.emit(\"observerUpdate\", e[0]);\n        }, i.requestAnimationFrame ? i.requestAnimationFrame(t) : i.setTimeout(t, 0)) : n.emit(\"observerUpdate\", e[0]);\n      });\n      s.observe(e, {\n        attributes: void 0 === t.attributes || t.attributes,\n        childList: void 0 === t.childList || t.childList,\n        characterData: void 0 === t.characterData || t.characterData\n      }), n.observer.observers.push(s);\n    },\n    init: function init() {\n      var e = this;\n\n      if (e.support.observer && e.params.observer) {\n        if (e.params.observeParents) for (var t = e.$el.parents(), i = 0; i < t.length; i += 1) {\n          e.observer.attach(t[i]);\n        }\n        e.observer.attach(e.$el[0], {\n          childList: e.params.observeSlideChildren\n        }), e.observer.attach(e.$wrapperEl[0], {\n          attributes: !1\n        });\n      }\n    },\n    destroy: function destroy() {\n      this.observer.observers.forEach(function (e) {\n        e.disconnect();\n      }), this.observer.observers = [];\n    }\n  },\n      A = {\n    name: \"observer\",\n    params: {\n      observer: !1,\n      observeParents: !1,\n      observeSlideChildren: !1\n    },\n    create: function create() {\n      T(this, {\n        observer: t({}, M, {\n          observers: []\n        })\n      });\n    },\n    on: {\n      init: function init(e) {\n        e.observer.init();\n      },\n      destroy: function destroy(e) {\n        e.observer.destroy();\n      }\n    }\n  };\n\n  function P() {\n    var e,\n        t,\n        i = this,\n        n = i.params,\n        s = i.el;\n    s && 0 === s.offsetWidth || (n.breakpoints && i.setBreakpoint(), e = i.allowSlideNext, t = i.allowSlidePrev, s = i.snapGrid, i.allowSlideNext = !0, i.allowSlidePrev = !0, i.updateSize(), i.updateSlides(), i.updateSlidesClasses(), (\"auto\" === n.slidesPerView || 1 < n.slidesPerView) && i.isEnd && !i.isBeginning && !i.params.centeredSlides ? i.slideTo(i.slides.length - 1, 0, !1, !0) : i.slideTo(i.activeIndex, 0, !1, !0), i.autoplay && i.autoplay.running && i.autoplay.paused && i.autoplay.run(), i.allowSlidePrev = t, i.allowSlideNext = e, i.params.watchOverflow && s !== i.snapGrid && i.checkOverflow());\n  }\n\n  var L = !1;\n\n  function z() {}\n\n  var I,\n      D,\n      O,\n      H = {\n    init: !0,\n    direction: \"horizontal\",\n    touchEventsTarget: \"container\",\n    initialSlide: 0,\n    speed: 300,\n    cssMode: !1,\n    updateOnWindowResize: !0,\n    nested: !1,\n    width: null,\n    height: null,\n    preventInteractionOnTransition: !1,\n    userAgent: null,\n    url: null,\n    edgeSwipeDetection: !1,\n    edgeSwipeThreshold: 20,\n    freeMode: !1,\n    freeModeMomentum: !0,\n    freeModeMomentumRatio: 1,\n    freeModeMomentumBounce: !0,\n    freeModeMomentumBounceRatio: 1,\n    freeModeMomentumVelocityRatio: 1,\n    freeModeSticky: !1,\n    freeModeMinimumVelocity: .02,\n    autoHeight: !1,\n    setWrapperSize: !1,\n    virtualTranslate: !1,\n    effect: \"slide\",\n    breakpoints: void 0,\n    spaceBetween: 0,\n    slidesPerView: 1,\n    slidesPerColumn: 1,\n    slidesPerColumnFill: \"column\",\n    slidesPerGroup: 1,\n    slidesPerGroupSkip: 0,\n    centeredSlides: !1,\n    centeredSlidesBounds: !1,\n    slidesOffsetBefore: 0,\n    slidesOffsetAfter: 0,\n    normalizeSlideIndex: !0,\n    centerInsufficientSlides: !1,\n    watchOverflow: !1,\n    roundLengths: !1,\n    touchRatio: 1,\n    touchAngle: 45,\n    simulateTouch: !0,\n    shortSwipes: !0,\n    longSwipes: !0,\n    longSwipesRatio: .5,\n    longSwipesMs: 300,\n    followFinger: !0,\n    allowTouchMove: !0,\n    threshold: 0,\n    touchMoveStopPropagation: !1,\n    touchStartPreventDefault: !0,\n    touchStartForcePreventDefault: !1,\n    touchReleaseOnEdges: !1,\n    uniqueNavElements: !0,\n    resistance: !0,\n    resistanceRatio: .85,\n    watchSlidesProgress: !1,\n    watchSlidesVisibility: !1,\n    grabCursor: !1,\n    preventClicks: !0,\n    preventClicksPropagation: !0,\n    slideToClickedSlide: !1,\n    preloadImages: !0,\n    updateOnImagesReady: !0,\n    loop: !1,\n    loopAdditionalSlides: 0,\n    loopedSlides: null,\n    loopFillGroupWithBlank: !1,\n    loopPreventsSlide: !0,\n    allowSlidePrev: !0,\n    allowSlideNext: !0,\n    swipeHandler: null,\n    noSwiping: !0,\n    noSwipingClass: \"swiper-no-swiping\",\n    noSwipingSelector: null,\n    passiveListeners: !0,\n    containerModifierClass: \"swiper-container-\",\n    slideClass: \"swiper-slide\",\n    slideBlankClass: \"swiper-slide-invisible-blank\",\n    slideActiveClass: \"swiper-slide-active\",\n    slideDuplicateActiveClass: \"swiper-slide-duplicate-active\",\n    slideVisibleClass: \"swiper-slide-visible\",\n    slideDuplicateClass: \"swiper-slide-duplicate\",\n    slideNextClass: \"swiper-slide-next\",\n    slideDuplicateNextClass: \"swiper-slide-duplicate-next\",\n    slidePrevClass: \"swiper-slide-prev\",\n    slideDuplicatePrevClass: \"swiper-slide-duplicate-prev\",\n    wrapperClass: \"swiper-wrapper\",\n    runCallbacksOnInit: !0,\n    _emitClasses: !1\n  },\n      N = {\n    modular: {\n      useParams: function useParams(t) {\n        var i = this;\n        i.modules && Object.keys(i.modules).forEach(function (e) {\n          e = i.modules[e];\n          e.params && K(t, e.params);\n        });\n      },\n      useModules: function useModules(i) {\n        void 0 === i && (i = {});\n        var n = this;\n        n.modules && Object.keys(n.modules).forEach(function (e) {\n          var t = n.modules[e],\n              e = i[e] || {};\n          t.on && n.on && Object.keys(t.on).forEach(function (e) {\n            n.on(e, t.on[e]);\n          }), t.create && t.create.bind(n)(e);\n        });\n      }\n    },\n    eventsEmitter: {\n      on: function on(e, t, i) {\n        var n = this;\n        if (\"function\" != typeof t) return n;\n        var s = i ? \"unshift\" : \"push\";\n        return e.split(\" \").forEach(function (e) {\n          n.eventsListeners[e] || (n.eventsListeners[e] = []), n.eventsListeners[e][s](t);\n        }), n;\n      },\n      once: function once(n, s, e) {\n        var r = this;\n        return \"function\" != typeof s ? r : (a.__emitterProxy = s, r.on(n, a, e));\n\n        function a() {\n          r.off(n, a), a.__emitterProxy && delete a.__emitterProxy;\n\n          for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) {\n            t[i] = arguments[i];\n          }\n\n          s.apply(r, t);\n        }\n      },\n      onAny: function onAny(e, t) {\n        if (\"function\" != typeof e) return this;\n        t = t ? \"unshift\" : \"push\";\n        return this.eventsAnyListeners.indexOf(e) < 0 && this.eventsAnyListeners[t](e), this;\n      },\n      offAny: function offAny(e) {\n        var t = this;\n        if (!t.eventsAnyListeners) return t;\n        e = t.eventsAnyListeners.indexOf(e);\n        return 0 <= e && t.eventsAnyListeners.splice(e, 1), t;\n      },\n      off: function off(e, n) {\n        var s = this;\n        return s.eventsListeners && e.split(\" \").forEach(function (i) {\n          void 0 === n ? s.eventsListeners[i] = [] : s.eventsListeners[i] && s.eventsListeners[i].forEach(function (e, t) {\n            (e === n || e.__emitterProxy && e.__emitterProxy === n) && s.eventsListeners[i].splice(t, 1);\n          });\n        }), s;\n      },\n      emit: function emit() {\n        var e,\n            i,\n            n,\n            s = this;\n        if (!s.eventsListeners) return s;\n\n        for (var t = arguments.length, r = new Array(t), a = 0; a < t; a++) {\n          r[a] = arguments[a];\n        }\n\n        return n = \"string\" == typeof r[0] || Array.isArray(r[0]) ? (e = r[0], i = r.slice(1, r.length), s) : (e = r[0].events, i = r[0].data, r[0].context || s), i.unshift(n), (Array.isArray(e) ? e : e.split(\" \")).forEach(function (t) {\n          s.eventsAnyListeners && s.eventsAnyListeners.length && s.eventsAnyListeners.forEach(function (e) {\n            e.apply(n, [t].concat(i));\n          }), s.eventsListeners && s.eventsListeners[t] && s.eventsListeners[t].forEach(function (e) {\n            e.apply(n, i);\n          });\n        }), s;\n      }\n    },\n    update: {\n      updateSize: function updateSize() {\n        var e = this,\n            t = e.$el,\n            i = void 0 !== e.params.width && null !== e.params.width ? e.params.width : t[0].clientWidth,\n            n = void 0 !== e.params.height && null !== e.params.height ? e.params.height : t[0].clientHeight;\n        0 === i && e.isHorizontal() || 0 === n && e.isVertical() || (i = i - parseInt(t.css(\"padding-left\") || 0, 10) - parseInt(t.css(\"padding-right\") || 0, 10), n = n - parseInt(t.css(\"padding-top\") || 0, 10) - parseInt(t.css(\"padding-bottom\") || 0, 10), K(e, {\n          width: i = Number.isNaN(i) ? 0 : i,\n          height: n = Number.isNaN(n) ? 0 : n,\n          size: e.isHorizontal() ? i : n\n        }));\n      },\n      updateSlides: function updateSlides() {\n        function i(e) {\n          return t.isHorizontal() ? e : {\n            width: \"height\",\n            \"margin-top\": \"margin-left\",\n            \"margin-bottom \": \"margin-right\",\n            \"margin-left\": \"margin-top\",\n            \"margin-right\": \"margin-bottom\",\n            \"padding-left\": \"padding-top\",\n            \"padding-right\": \"padding-bottom\",\n            marginRight: \"marginBottom\"\n          }[e];\n        }\n\n        function e(e, t) {\n          return parseFloat(e.getPropertyValue(i(t)) || 0);\n        }\n\n        var t = this,\n            n = U(),\n            s = t.params,\n            r = t.$wrapperEl,\n            a = t.size,\n            o = t.rtlTranslate,\n            l = t.wrongRTL,\n            d = t.virtual && s.virtual.enabled,\n            c = (d ? t.virtual : t).slides.length,\n            u = r.children(\".\" + t.params.slideClass),\n            p = (d ? t.virtual.slides : u).length,\n            h = [],\n            f = [],\n            m = [],\n            v = s.slidesOffsetBefore;\n        \"function\" == typeof v && (v = s.slidesOffsetBefore.call(t));\n        var g = s.slidesOffsetAfter;\n        \"function\" == typeof g && (g = s.slidesOffsetAfter.call(t));\n        var y,\n            b = t.snapGrid.length,\n            d = t.slidesGrid.length,\n            w = s.spaceBetween,\n            x = -v,\n            T = 0,\n            C = 0;\n\n        if (void 0 !== a) {\n          \"string\" == typeof w && 0 <= w.indexOf(\"%\") && (w = parseFloat(w.replace(\"%\", \"\")) / 100 * a), t.virtualSize = -w, o ? u.css({\n            marginLeft: \"\",\n            marginTop: \"\"\n          }) : u.css({\n            marginRight: \"\",\n            marginBottom: \"\"\n          }), 1 < s.slidesPerColumn && (y = Math.floor(p / s.slidesPerColumn) === p / t.params.slidesPerColumn ? p : Math.ceil(p / s.slidesPerColumn) * s.slidesPerColumn, \"auto\" !== s.slidesPerView && \"row\" === s.slidesPerColumnFill && (y = Math.max(y, s.slidesPerView * s.slidesPerColumn)));\n\n          for (var S, E, k, $, M, A = s.slidesPerColumn, P = y / A, L = Math.floor(p / s.slidesPerColumn), z = 0; z < p; z += 1) {\n            R = 0;\n            var I,\n                D,\n                O,\n                H,\n                N,\n                j,\n                q,\n                W,\n                B,\n                R,\n                F = u.eq(z);\n            1 < s.slidesPerColumn && (B = q = j = void 0, \"row\" === s.slidesPerColumnFill && 1 < s.slidesPerGroup ? (N = Math.floor(z / (s.slidesPerGroup * s.slidesPerColumn)), O = z - s.slidesPerColumn * s.slidesPerGroup * N, H = 0 === N ? s.slidesPerGroup : Math.min(Math.ceil((p - N * A * s.slidesPerGroup) / A), s.slidesPerGroup), j = (q = O - (B = Math.floor(O / H)) * H + N * s.slidesPerGroup) + B * y / A, F.css({\n              \"-webkit-box-ordinal-group\": j,\n              \"-moz-box-ordinal-group\": j,\n              \"-ms-flex-order\": j,\n              \"-webkit-order\": j,\n              order: j\n            })) : \"column\" === s.slidesPerColumnFill ? (B = z - (q = Math.floor(z / A)) * A, (L < q || q === L && B === A - 1) && (B += 1) >= A && (B = 0, q += 1)) : q = z - (B = Math.floor(z / P)) * P, F.css(i(\"margin-top\"), 0 !== B && s.spaceBetween && s.spaceBetween + \"px\")), \"none\" !== F.css(\"display\") && (\"auto\" === s.slidesPerView ? (W = n.getComputedStyle(F[0], null), I = F[0].style.transform, D = F[0].style.webkitTransform, I && (F[0].style.transform = \"none\"), D && (F[0].style.webkitTransform = \"none\"), R = s.roundLengths ? t.isHorizontal() ? F.outerWidth(!0) : F.outerHeight(!0) : (O = e(W, \"width\"), H = e(W, \"padding-left\"), N = e(W, \"padding-right\"), j = e(W, \"margin-left\"), q = e(W, \"margin-right\"), (B = W.getPropertyValue(W, \"box-sizing\")) && \"border-box\" === B ? O + j + q : (B = (W = F[0]).clientWidth, O + H + N + j + q + (W.offsetWidth - B))), I && (F[0].style.transform = I), D && (F[0].style.webkitTransform = D), s.roundLengths && (R = Math.floor(R))) : (R = (a - (s.slidesPerView - 1) * w) / s.slidesPerView, s.roundLengths && (R = Math.floor(R)), u[z] && (u[z].style[i(\"width\")] = R + \"px\")), u[z] && (u[z].swiperSlideSize = R), m.push(R), s.centeredSlides ? (x = x + R / 2 + T / 2 + w, 0 === T && 0 !== z && (x = x - a / 2 - w), 0 === z && (x = x - a / 2 - w), Math.abs(x) < .001 && (x = 0), s.roundLengths && (x = Math.floor(x)), C % s.slidesPerGroup == 0 && h.push(x), f.push(x)) : (s.roundLengths && (x = Math.floor(x)), (C - Math.min(t.params.slidesPerGroupSkip, C)) % t.params.slidesPerGroup == 0 && h.push(x), f.push(x), x = x + R + w), t.virtualSize += R + w, T = R, C += 1);\n          }\n\n          if (t.virtualSize = Math.max(t.virtualSize, a) + g, o && l && (\"slide\" === s.effect || \"coverflow\" === s.effect) && r.css({\n            width: t.virtualSize + s.spaceBetween + \"px\"\n          }), s.setWrapperSize && r.css(((l = {})[i(\"width\")] = t.virtualSize + s.spaceBetween + \"px\", l)), 1 < s.slidesPerColumn && (t.virtualSize = (R + s.spaceBetween) * y, t.virtualSize = Math.ceil(t.virtualSize / s.slidesPerColumn) - s.spaceBetween, r.css(((S = {})[i(\"width\")] = t.virtualSize + s.spaceBetween + \"px\", S)), s.centeredSlides)) {\n            for (var G = [], X = 0; X < h.length; X += 1) {\n              var Y = h[X];\n              s.roundLengths && (Y = Math.floor(Y)), h[X] < t.virtualSize + h[0] && G.push(Y);\n            }\n\n            h = G;\n          }\n\n          if (!s.centeredSlides) {\n            G = [];\n\n            for (var V = 0; V < h.length; V += 1) {\n              var _ = h[V];\n              s.roundLengths && (_ = Math.floor(_)), h[V] <= t.virtualSize - a && G.push(_);\n            }\n\n            h = G, 1 < Math.floor(t.virtualSize - a) - Math.floor(h[h.length - 1]) && h.push(t.virtualSize - a);\n          }\n\n          0 === h.length && (h = [0]), 0 !== s.spaceBetween && (S = t.isHorizontal() && o ? \"marginLeft\" : i(\"marginRight\"), u.filter(function (e, t) {\n            return !s.cssMode || t !== u.length - 1;\n          }).css(((o = {})[S] = w + \"px\", o))), s.centeredSlides && s.centeredSlidesBounds && (E = 0, m.forEach(function (e) {\n            E += e + (s.spaceBetween || 0);\n          }), k = (E -= s.spaceBetween) - a, h = h.map(function (e) {\n            return e < 0 ? -v : k < e ? k + g : e;\n          })), s.centerInsufficientSlides && ($ = 0, m.forEach(function (e) {\n            $ += e + (s.spaceBetween || 0);\n          }), ($ -= s.spaceBetween) < a && (M = (a - $) / 2, h.forEach(function (e, t) {\n            h[t] = e - M;\n          }), f.forEach(function (e, t) {\n            f[t] = e + M;\n          }))), K(t, {\n            slides: u,\n            snapGrid: h,\n            slidesGrid: f,\n            slidesSizesGrid: m\n          }), p !== c && t.emit(\"slidesLengthChange\"), h.length !== b && (t.params.watchOverflow && t.checkOverflow(), t.emit(\"snapGridLengthChange\")), f.length !== d && t.emit(\"slidesGridLengthChange\"), (s.watchSlidesProgress || s.watchSlidesVisibility) && t.updateSlidesOffset();\n        }\n      },\n      updateAutoHeight: function updateAutoHeight(e) {\n        var t,\n            i,\n            n = this,\n            s = [],\n            r = 0;\n        if (\"number\" == typeof e ? n.setTransition(e) : !0 === e && n.setTransition(n.params.speed), \"auto\" !== n.params.slidesPerView && 1 < n.params.slidesPerView) {\n          if (n.params.centeredSlides) n.visibleSlides.each(function (e) {\n            s.push(e);\n          });else for (t = 0; t < Math.ceil(n.params.slidesPerView); t += 1) {\n            var a = n.activeIndex + t;\n            if (a > n.slides.length) break;\n            s.push(n.slides.eq(a)[0]);\n          }\n        } else s.push(n.slides.eq(n.activeIndex)[0]);\n\n        for (t = 0; t < s.length; t += 1) {\n          void 0 !== s[t] && (r = r < (i = s[t].offsetHeight) ? i : r);\n        }\n\n        r && n.$wrapperEl.css(\"height\", r + \"px\");\n      },\n      updateSlidesOffset: function updateSlidesOffset() {\n        for (var e = this.slides, t = 0; t < e.length; t += 1) {\n          e[t].swiperSlideOffset = this.isHorizontal() ? e[t].offsetLeft : e[t].offsetTop;\n        }\n      },\n      updateSlidesProgress: function updateSlidesProgress(e) {\n        void 0 === e && (e = this && this.translate || 0);\n        var t = this,\n            i = t.params,\n            n = t.slides,\n            s = t.rtlTranslate;\n\n        if (0 !== n.length) {\n          void 0 === n[0].swiperSlideOffset && t.updateSlidesOffset();\n          var r = s ? e : -e;\n          n.removeClass(i.slideVisibleClass), t.visibleSlidesIndexes = [], t.visibleSlides = [];\n\n          for (var a = 0; a < n.length; a += 1) {\n            var o,\n                l,\n                d = n[a],\n                c = (r + (i.centeredSlides ? t.minTranslate() : 0) - d.swiperSlideOffset) / (d.swiperSlideSize + i.spaceBetween);\n            (i.watchSlidesVisibility || i.centeredSlides && i.autoHeight) && (l = (o = -(r - d.swiperSlideOffset)) + t.slidesSizesGrid[a], (0 <= o && o < t.size - 1 || 1 < l && l <= t.size || o <= 0 && l >= t.size) && (t.visibleSlides.push(d), t.visibleSlidesIndexes.push(a), n.eq(a).addClass(i.slideVisibleClass))), d.progress = s ? -c : c;\n          }\n\n          t.visibleSlides = S(t.visibleSlides);\n        }\n      },\n      updateProgress: function updateProgress(e) {\n        var t = this;\n        void 0 === e && (o = t.rtlTranslate ? -1 : 1, e = t && t.translate && t.translate * o || 0);\n        var i = t.params,\n            n = t.maxTranslate() - t.minTranslate(),\n            s = t.progress,\n            r = t.isBeginning,\n            a = r,\n            o = l = t.isEnd,\n            l = 0 == n ? r = !(s = 0) : (r = (s = (e - t.minTranslate()) / n) <= 0, 1 <= s);\n        K(t, {\n          progress: s,\n          isBeginning: r,\n          isEnd: l\n        }), (i.watchSlidesProgress || i.watchSlidesVisibility || i.centeredSlides && i.autoHeight) && t.updateSlidesProgress(e), r && !a && t.emit(\"reachBeginning toEdge\"), l && !o && t.emit(\"reachEnd toEdge\"), (a && !r || o && !l) && t.emit(\"fromEdge\"), t.emit(\"progress\", s);\n      },\n      updateSlidesClasses: function updateSlidesClasses() {\n        var e = this,\n            t = e.slides,\n            i = e.params,\n            n = e.$wrapperEl,\n            s = e.activeIndex,\n            r = e.realIndex,\n            a = e.virtual && i.virtual.enabled;\n        t.removeClass(i.slideActiveClass + \" \" + i.slideNextClass + \" \" + i.slidePrevClass + \" \" + i.slideDuplicateActiveClass + \" \" + i.slideDuplicateNextClass + \" \" + i.slideDuplicatePrevClass), (s = a ? e.$wrapperEl.find(\".\" + i.slideClass + '[data-swiper-slide-index=\"' + s + '\"]') : t.eq(s)).addClass(i.slideActiveClass), i.loop && (s.hasClass(i.slideDuplicateClass) ? n.children(\".\" + i.slideClass + \":not(.\" + i.slideDuplicateClass + ')[data-swiper-slide-index=\"' + r + '\"]') : n.children(\".\" + i.slideClass + \".\" + i.slideDuplicateClass + '[data-swiper-slide-index=\"' + r + '\"]')).addClass(i.slideDuplicateActiveClass);\n        r = s.nextAll(\".\" + i.slideClass).eq(0).addClass(i.slideNextClass);\n        i.loop && 0 === r.length && (r = t.eq(0)).addClass(i.slideNextClass);\n        s = s.prevAll(\".\" + i.slideClass).eq(0).addClass(i.slidePrevClass);\n        i.loop && 0 === s.length && (s = t.eq(-1)).addClass(i.slidePrevClass), i.loop && ((r.hasClass(i.slideDuplicateClass) ? n.children(\".\" + i.slideClass + \":not(.\" + i.slideDuplicateClass + ')[data-swiper-slide-index=\"' + r.attr(\"data-swiper-slide-index\") + '\"]') : n.children(\".\" + i.slideClass + \".\" + i.slideDuplicateClass + '[data-swiper-slide-index=\"' + r.attr(\"data-swiper-slide-index\") + '\"]')).addClass(i.slideDuplicateNextClass), (s.hasClass(i.slideDuplicateClass) ? n.children(\".\" + i.slideClass + \":not(.\" + i.slideDuplicateClass + ')[data-swiper-slide-index=\"' + s.attr(\"data-swiper-slide-index\") + '\"]') : n.children(\".\" + i.slideClass + \".\" + i.slideDuplicateClass + '[data-swiper-slide-index=\"' + s.attr(\"data-swiper-slide-index\") + '\"]')).addClass(i.slideDuplicatePrevClass)), e.emitSlidesClasses();\n      },\n      updateActiveIndex: function updateActiveIndex(e) {\n        var t = this,\n            i = t.rtlTranslate ? t.translate : -t.translate,\n            n = t.slidesGrid,\n            s = t.snapGrid,\n            r = t.params,\n            a = t.activeIndex,\n            o = t.realIndex,\n            l = t.snapIndex,\n            d = e;\n\n        if (void 0 === d) {\n          for (var c = 0; c < n.length; c += 1) {\n            void 0 !== n[c + 1] ? i >= n[c] && i < n[c + 1] - (n[c + 1] - n[c]) / 2 ? d = c : i >= n[c] && i < n[c + 1] && (d = c + 1) : i >= n[c] && (d = c);\n          }\n\n          r.normalizeSlideIndex && (d < 0 || void 0 === d) && (d = 0);\n        }\n\n        (r = 0 <= s.indexOf(i) ? s.indexOf(i) : (e = Math.min(r.slidesPerGroupSkip, d)) + Math.floor((d - e) / r.slidesPerGroup)) >= s.length && (r = s.length - 1), d !== a ? (s = parseInt(t.slides.eq(d).attr(\"data-swiper-slide-index\") || d, 10), K(t, {\n          snapIndex: r,\n          realIndex: s,\n          previousIndex: a,\n          activeIndex: d\n        }), t.emit(\"activeIndexChange\"), t.emit(\"snapIndexChange\"), o !== s && t.emit(\"realIndexChange\"), (t.initialized || t.params.runCallbacksOnInit) && t.emit(\"slideChange\")) : r !== l && (t.snapIndex = r, t.emit(\"snapIndexChange\"));\n      },\n      updateClickedSlide: function updateClickedSlide(e) {\n        var t = this,\n            i = t.params,\n            n = S(e.target).closest(\".\" + i.slideClass)[0],\n            s = !1;\n        if (n) for (var r = 0; r < t.slides.length; r += 1) {\n          t.slides[r] === n && (s = !0);\n        }\n        if (!n || !s) return t.clickedSlide = void 0, void (t.clickedIndex = void 0);\n        t.clickedSlide = n, t.virtual && t.params.virtual.enabled ? t.clickedIndex = parseInt(S(n).attr(\"data-swiper-slide-index\"), 10) : t.clickedIndex = S(n).index(), i.slideToClickedSlide && void 0 !== t.clickedIndex && t.clickedIndex !== t.activeIndex && t.slideToClickedSlide();\n      }\n    },\n    translate: {\n      getTranslate: function getTranslate(e) {\n        void 0 === e && (e = this.isHorizontal() ? \"x\" : \"y\");\n        var t = this.params,\n            i = this.rtlTranslate,\n            n = this.translate,\n            s = this.$wrapperEl;\n        if (t.virtualTranslate) return i ? -n : n;\n        if (t.cssMode) return n;\n        e = g(s[0], e);\n        return (e = i ? -e : e) || 0;\n      },\n      setTranslate: function setTranslate(e, t) {\n        var i = this,\n            n = i.rtlTranslate,\n            s = i.params,\n            r = i.$wrapperEl,\n            a = i.wrapperEl,\n            o = i.progress,\n            l = 0,\n            d = 0;\n        i.isHorizontal() ? l = n ? -e : e : d = e, s.roundLengths && (l = Math.floor(l), d = Math.floor(d)), s.cssMode ? a[i.isHorizontal() ? \"scrollLeft\" : \"scrollTop\"] = i.isHorizontal() ? -l : -d : s.virtualTranslate || r.transform(\"translate3d(\" + l + \"px, \" + d + \"px, 0px)\"), i.previousTranslate = i.translate, i.translate = i.isHorizontal() ? l : d;\n        d = i.maxTranslate() - i.minTranslate();\n        (0 == d ? 0 : (e - i.minTranslate()) / d) !== o && i.updateProgress(e), i.emit(\"setTranslate\", i.translate, t);\n      },\n      minTranslate: function minTranslate() {\n        return -this.snapGrid[0];\n      },\n      maxTranslate: function maxTranslate() {\n        return -this.snapGrid[this.snapGrid.length - 1];\n      },\n      translateTo: function translateTo(e, t, i, n, s) {\n        void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === i && (i = !0), void 0 === n && (n = !0);\n        var r = this,\n            a = r.params,\n            o = r.wrapperEl;\n        if (r.animating && a.preventInteractionOnTransition) return !1;\n        var l = r.minTranslate(),\n            d = r.maxTranslate(),\n            d = n && l < e ? l : n && e < d ? d : e;\n\n        if (r.updateProgress(d), a.cssMode) {\n          e = r.isHorizontal();\n          return 0 !== t && o.scrollTo ? o.scrollTo(((a = {})[e ? \"left\" : \"top\"] = -d, a.behavior = \"smooth\", a)) : o[e ? \"scrollLeft\" : \"scrollTop\"] = -d, !0;\n        }\n\n        return 0 === t ? (r.setTransition(0), r.setTranslate(d), i && (r.emit(\"beforeTransitionStart\", t, s), r.emit(\"transitionEnd\"))) : (r.setTransition(t), r.setTranslate(d), i && (r.emit(\"beforeTransitionStart\", t, s), r.emit(\"transitionStart\")), r.animating || (r.animating = !0, r.onTranslateToWrapperTransitionEnd || (r.onTranslateToWrapperTransitionEnd = function (e) {\n          r && !r.destroyed && e.target === this && (r.$wrapperEl[0].removeEventListener(\"transitionend\", r.onTranslateToWrapperTransitionEnd), r.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\", r.onTranslateToWrapperTransitionEnd), r.onTranslateToWrapperTransitionEnd = null, delete r.onTranslateToWrapperTransitionEnd, i && r.emit(\"transitionEnd\"));\n        }), r.$wrapperEl[0].addEventListener(\"transitionend\", r.onTranslateToWrapperTransitionEnd), r.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\", r.onTranslateToWrapperTransitionEnd))), !0;\n      }\n    },\n    transition: {\n      setTransition: function setTransition(e, t) {\n        this.params.cssMode || this.$wrapperEl.transition(e), this.emit(\"setTransition\", e, t);\n      },\n      transitionStart: function transitionStart(e, t) {\n        void 0 === e && (e = !0);\n        var i = this,\n            n = i.activeIndex,\n            s = i.params,\n            r = i.previousIndex;\n        s.cssMode || (s.autoHeight && i.updateAutoHeight(), t = (t = t) || (r < n ? \"next\" : n < r ? \"prev\" : \"reset\"), i.emit(\"transitionStart\"), e && n !== r && (\"reset\" !== t ? (i.emit(\"slideChangeTransitionStart\"), \"next\" === t ? i.emit(\"slideNextTransitionStart\") : i.emit(\"slidePrevTransitionStart\")) : i.emit(\"slideResetTransitionStart\")));\n      },\n      transitionEnd: function transitionEnd(e, t) {\n        void 0 === e && (e = !0);\n        var i = this,\n            n = i.activeIndex,\n            s = i.previousIndex,\n            r = i.params;\n        i.animating = !1, r.cssMode || (i.setTransition(0), t = (t = t) || (s < n ? \"next\" : n < s ? \"prev\" : \"reset\"), i.emit(\"transitionEnd\"), e && n !== s && (\"reset\" !== t ? (i.emit(\"slideChangeTransitionEnd\"), \"next\" === t ? i.emit(\"slideNextTransitionEnd\") : i.emit(\"slidePrevTransitionEnd\")) : i.emit(\"slideResetTransitionEnd\")));\n      }\n    },\n    slide: {\n      slideTo: function slideTo(e, t, i, n) {\n        if (void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === i && (i = !0), \"number\" != typeof e && \"string\" != typeof e) throw new Error(\"The 'index' argument cannot have type other than 'number' or 'string'. [\" + _typeof(e) + \"] given.\");\n\n        if (\"string\" == typeof e) {\n          var s = parseInt(e, 10);\n          if (!isFinite(s)) throw new Error(\"The passed-in 'index' (string) couldn't be converted to 'number'. [\" + e + \"] given.\");\n          e = s;\n        }\n\n        var r = this,\n            a = e;\n        a < 0 && (a = 0);\n        var o = r.params,\n            l = r.snapGrid,\n            d = r.slidesGrid,\n            c = r.previousIndex,\n            u = r.activeIndex,\n            p = r.rtlTranslate,\n            s = r.wrapperEl;\n        if (r.animating && o.preventInteractionOnTransition) return !1;\n        e = Math.min(r.params.slidesPerGroupSkip, a), e += Math.floor((a - e) / r.params.slidesPerGroup);\n        e >= l.length && (e = l.length - 1), (u || o.initialSlide || 0) === (c || 0) && i && r.emit(\"beforeSlideChangeStart\");\n        var h,\n            f = -l[e];\n        if (r.updateProgress(f), o.normalizeSlideIndex) for (var m = 0; m < d.length; m += 1) {\n          var v = -Math.floor(100 * f),\n              g = Math.floor(100 * d[m]),\n              y = Math.floor(100 * d[m + 1]);\n          void 0 !== d[m + 1] ? g <= v && v < y - (y - g) / 2 ? a = m : g <= v && v < y && (a = m + 1) : g <= v && (a = m);\n        }\n\n        if (r.initialized && a !== u) {\n          if (!r.allowSlideNext && f < r.translate && f < r.minTranslate()) return !1;\n          if (!r.allowSlidePrev && f > r.translate && f > r.maxTranslate() && (u || 0) !== a) return !1;\n        }\n\n        if (h = u < a ? \"next\" : a < u ? \"prev\" : \"reset\", p && -f === r.translate || !p && f === r.translate) return r.updateActiveIndex(a), o.autoHeight && r.updateAutoHeight(), r.updateSlidesClasses(), \"slide\" !== o.effect && r.setTranslate(f), \"reset\" != h && (r.transitionStart(i, h), r.transitionEnd(i, h)), !1;\n\n        if (o.cssMode) {\n          u = r.isHorizontal(), o = -f;\n          return p && (o = s.scrollWidth - s.offsetWidth - o), 0 !== t && s.scrollTo ? s.scrollTo(((p = {})[u ? \"left\" : \"top\"] = o, p.behavior = \"smooth\", p)) : s[u ? \"scrollLeft\" : \"scrollTop\"] = o, !0;\n        }\n\n        return 0 === t ? (r.setTransition(0), r.setTranslate(f), r.updateActiveIndex(a), r.updateSlidesClasses(), r.emit(\"beforeTransitionStart\", t, n), r.transitionStart(i, h), r.transitionEnd(i, h)) : (r.setTransition(t), r.setTranslate(f), r.updateActiveIndex(a), r.updateSlidesClasses(), r.emit(\"beforeTransitionStart\", t, n), r.transitionStart(i, h), r.animating || (r.animating = !0, r.onSlideToWrapperTransitionEnd || (r.onSlideToWrapperTransitionEnd = function (e) {\n          r && !r.destroyed && e.target === this && (r.$wrapperEl[0].removeEventListener(\"transitionend\", r.onSlideToWrapperTransitionEnd), r.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\", r.onSlideToWrapperTransitionEnd), r.onSlideToWrapperTransitionEnd = null, delete r.onSlideToWrapperTransitionEnd, r.transitionEnd(i, h));\n        }), r.$wrapperEl[0].addEventListener(\"transitionend\", r.onSlideToWrapperTransitionEnd), r.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\", r.onSlideToWrapperTransitionEnd))), !0;\n      },\n      slideToLoop: function slideToLoop(e, t, i, n) {\n        void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === i && (i = !0);\n        return this.params.loop && (e += this.loopedSlides), this.slideTo(e, t, i, n);\n      },\n      slideNext: function slideNext(e, t, i) {\n        void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);\n        var n = this,\n            s = n.params,\n            r = n.animating,\n            a = n.activeIndex < s.slidesPerGroupSkip ? 1 : s.slidesPerGroup;\n\n        if (s.loop) {\n          if (r && s.loopPreventsSlide) return !1;\n          n.loopFix(), n._clientLeft = n.$wrapperEl[0].clientLeft;\n        }\n\n        return n.slideTo(n.activeIndex + a, e, t, i);\n      },\n      slidePrev: function slidePrev(e, t, i) {\n        void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);\n        var n = this,\n            s = n.params,\n            r = n.animating,\n            a = n.snapGrid,\n            o = n.slidesGrid,\n            l = n.rtlTranslate;\n\n        if (s.loop) {\n          if (r && s.loopPreventsSlide) return !1;\n          n.loopFix(), n._clientLeft = n.$wrapperEl[0].clientLeft;\n        }\n\n        function d(e) {\n          return e < 0 ? -Math.floor(Math.abs(e)) : Math.floor(e);\n        }\n\n        var c = d(l ? n.translate : -n.translate),\n            l = a.map(d);\n        a[l.indexOf(c)];\n        var u,\n            p = a[l.indexOf(c) - 1];\n        return void 0 === p && s.cssMode && a.forEach(function (e) {\n          !p && e <= c && (p = e);\n        }), void 0 !== p && (u = o.indexOf(p)) < 0 && (u = n.activeIndex - 1), n.slideTo(u, e, t, i);\n      },\n      slideReset: function slideReset(e, t, i) {\n        return void 0 === e && (e = this.params.speed), void 0 === t && (t = !0), this.slideTo(this.activeIndex, e, t, i);\n      },\n      slideToClosest: function slideToClosest(e, t, i, n) {\n        void 0 === e && (e = this.params.speed), void 0 === t && (t = !0), void 0 === n && (n = .5);\n        var s = this,\n            r = s.activeIndex,\n            a = Math.min(s.params.slidesPerGroupSkip, r),\n            o = a + Math.floor((r - a) / s.params.slidesPerGroup),\n            l = s.rtlTranslate ? s.translate : -s.translate;\n        return l >= s.snapGrid[o] ? l - (a = s.snapGrid[o]) > (s.snapGrid[o + 1] - a) * n && (r += s.params.slidesPerGroup) : l - (l = s.snapGrid[o - 1]) <= (s.snapGrid[o] - l) * n && (r -= s.params.slidesPerGroup), r = Math.max(r, 0), r = Math.min(r, s.slidesGrid.length - 1), s.slideTo(r, e, t, i);\n      },\n      slideToClickedSlide: function slideToClickedSlide() {\n        var e,\n            t = this,\n            i = t.params,\n            n = t.$wrapperEl,\n            s = \"auto\" === i.slidesPerView ? t.slidesPerViewDynamic() : i.slidesPerView,\n            r = t.clickedIndex;\n        i.loop ? t.animating || (e = parseInt(S(t.clickedSlide).attr(\"data-swiper-slide-index\"), 10), i.centeredSlides ? r < t.loopedSlides - s / 2 || r > t.slides.length - t.loopedSlides + s / 2 ? (t.loopFix(), r = n.children(\".\" + i.slideClass + '[data-swiper-slide-index=\"' + e + '\"]:not(.' + i.slideDuplicateClass + \")\").eq(0).index(), E(function () {\n          t.slideTo(r);\n        })) : t.slideTo(r) : r > t.slides.length - s ? (t.loopFix(), r = n.children(\".\" + i.slideClass + '[data-swiper-slide-index=\"' + e + '\"]:not(.' + i.slideDuplicateClass + \")\").eq(0).index(), E(function () {\n          t.slideTo(r);\n        })) : t.slideTo(r)) : t.slideTo(r);\n      }\n    },\n    loop: {\n      loopCreate: function loopCreate() {\n        var n = this,\n            e = y(),\n            t = n.params,\n            i = n.$wrapperEl;\n        i.children(\".\" + t.slideClass + \".\" + t.slideDuplicateClass).remove();\n        var s = i.children(\".\" + t.slideClass);\n\n        if (t.loopFillGroupWithBlank) {\n          var r = t.slidesPerGroup - s.length % t.slidesPerGroup;\n\n          if (r !== t.slidesPerGroup) {\n            for (var a = 0; a < r; a += 1) {\n              var o = S(e.createElement(\"div\")).addClass(t.slideClass + \" \" + t.slideBlankClass);\n              i.append(o);\n            }\n\n            s = i.children(\".\" + t.slideClass);\n          }\n        }\n\n        \"auto\" !== t.slidesPerView || t.loopedSlides || (t.loopedSlides = s.length), n.loopedSlides = Math.ceil(parseFloat(t.loopedSlides || t.slidesPerView, 10)), n.loopedSlides += t.loopAdditionalSlides, n.loopedSlides > s.length && (n.loopedSlides = s.length);\n        var l = [],\n            d = [];\n        s.each(function (e, t) {\n          var i = S(e);\n          t < n.loopedSlides && d.push(e), t < s.length && t >= s.length - n.loopedSlides && l.push(e), i.attr(\"data-swiper-slide-index\", t);\n        });\n\n        for (var c = 0; c < d.length; c += 1) {\n          i.append(S(d[c].cloneNode(!0)).addClass(t.slideDuplicateClass));\n        }\n\n        for (var u = l.length - 1; 0 <= u; --u) {\n          i.prepend(S(l[u].cloneNode(!0)).addClass(t.slideDuplicateClass));\n        }\n      },\n      loopFix: function loopFix() {\n        var e = this;\n        e.emit(\"beforeLoopFix\");\n        var t,\n            i = e.activeIndex,\n            n = e.slides,\n            s = e.loopedSlides,\n            r = e.allowSlidePrev,\n            a = e.allowSlideNext,\n            o = e.snapGrid,\n            l = e.rtlTranslate;\n        e.allowSlidePrev = !0, e.allowSlideNext = !0;\n        o = -o[i] - e.getTranslate();\n        i < s ? (t = n.length - 3 * s + i, t += s, e.slideTo(t, 0, !1, !0) && 0 != o && e.setTranslate((l ? -e.translate : e.translate) - o)) : i >= n.length - s && (t = -n.length + i + s, t += s, e.slideTo(t, 0, !1, !0) && 0 != o && e.setTranslate((l ? -e.translate : e.translate) - o)), e.allowSlidePrev = r, e.allowSlideNext = a, e.emit(\"loopFix\");\n      },\n      loopDestroy: function loopDestroy() {\n        var e = this.$wrapperEl,\n            t = this.params,\n            i = this.slides;\n        e.children(\".\" + t.slideClass + \".\" + t.slideDuplicateClass + \",.\" + t.slideClass + \".\" + t.slideBlankClass).remove(), i.removeAttr(\"data-swiper-slide-index\");\n      }\n    },\n    grabCursor: {\n      setGrabCursor: function setGrabCursor(e) {\n        var t = this;\n        t.support.touch || !t.params.simulateTouch || t.params.watchOverflow && t.isLocked || t.params.cssMode || ((t = t.el).style.cursor = \"move\", t.style.cursor = e ? \"-webkit-grabbing\" : \"-webkit-grab\", t.style.cursor = e ? \"-moz-grabbin\" : \"-moz-grab\", t.style.cursor = e ? \"grabbing\" : \"grab\");\n      },\n      unsetGrabCursor: function unsetGrabCursor() {\n        var e = this;\n        e.support.touch || e.params.watchOverflow && e.isLocked || e.params.cssMode || (e.el.style.cursor = \"\");\n      }\n    },\n    manipulation: {\n      appendSlide: function appendSlide(e) {\n        var t = this,\n            i = t.$wrapperEl,\n            n = t.params;\n        if (n.loop && t.loopDestroy(), \"object\" == _typeof(e) && \"length\" in e) for (var s = 0; s < e.length; s += 1) {\n          e[s] && i.append(e[s]);\n        } else i.append(e);\n        n.loop && t.loopCreate(), n.observer && t.support.observer || t.update();\n      },\n      prependSlide: function prependSlide(e) {\n        var t = this,\n            i = t.params,\n            n = t.$wrapperEl,\n            s = t.activeIndex;\n        i.loop && t.loopDestroy();\n        var r = s + 1;\n\n        if (\"object\" == _typeof(e) && \"length\" in e) {\n          for (var a = 0; a < e.length; a += 1) {\n            e[a] && n.prepend(e[a]);\n          }\n\n          r = s + e.length;\n        } else n.prepend(e);\n\n        i.loop && t.loopCreate(), i.observer && t.support.observer || t.update(), t.slideTo(r, 0, !1);\n      },\n      addSlide: function addSlide(e, t) {\n        var i = this,\n            n = i.$wrapperEl,\n            s = i.params,\n            r = i.activeIndex;\n        s.loop && (r -= i.loopedSlides, i.loopDestroy(), i.slides = n.children(\".\" + s.slideClass));\n        var a = i.slides.length;\n        if (e <= 0) i.prependSlide(t);else if (a <= e) i.appendSlide(t);else {\n          for (var o = e < r ? r + 1 : r, l = [], d = a - 1; e <= d; --d) {\n            var c = i.slides.eq(d);\n            c.remove(), l.unshift(c);\n          }\n\n          if (\"object\" == _typeof(t) && \"length\" in t) {\n            for (var u = 0; u < t.length; u += 1) {\n              t[u] && n.append(t[u]);\n            }\n\n            o = e < r ? r + t.length : r;\n          } else n.append(t);\n\n          for (var p = 0; p < l.length; p += 1) {\n            n.append(l[p]);\n          }\n\n          s.loop && i.loopCreate(), s.observer && i.support.observer || i.update(), s.loop ? i.slideTo(o + i.loopedSlides, 0, !1) : i.slideTo(o, 0, !1);\n        }\n      },\n      removeSlide: function removeSlide(e) {\n        var t = this,\n            i = t.params,\n            n = t.$wrapperEl,\n            s = t.activeIndex;\n        i.loop && (s -= t.loopedSlides, t.loopDestroy(), t.slides = n.children(\".\" + i.slideClass));\n        var r,\n            a = s;\n\n        if (\"object\" == _typeof(e) && \"length\" in e) {\n          for (var o = 0; o < e.length; o += 1) {\n            r = e[o], t.slides[r] && t.slides.eq(r).remove(), r < a && --a;\n          }\n\n          a = Math.max(a, 0);\n        } else r = e, t.slides[r] && t.slides.eq(r).remove(), r < a && --a, a = Math.max(a, 0);\n\n        i.loop && t.loopCreate(), i.observer && t.support.observer || t.update(), i.loop ? t.slideTo(a + t.loopedSlides, 0, !1) : t.slideTo(a, 0, !1);\n      },\n      removeAllSlides: function removeAllSlides() {\n        for (var e = [], t = 0; t < this.slides.length; t += 1) {\n          e.push(t);\n        }\n\n        this.removeSlide(e);\n      }\n    },\n    events: {\n      attachEvents: function attachEvents() {\n        var e = this,\n            t = y(),\n            i = e.params,\n            n = e.touchEvents,\n            s = e.el,\n            r = e.wrapperEl,\n            a = e.device,\n            o = e.support;\n        e.onTouchStart = function (e) {\n          var t = this,\n              i = y(),\n              n = U(),\n              s = t.touchEventsData,\n              r = t.params,\n              a = t.touches;\n\n          if (!t.animating || !r.preventInteractionOnTransition) {\n            var o = e,\n                l = S((o = o.originalEvent ? o.originalEvent : o).target);\n            if ((\"wrapper\" !== r.touchEventsTarget || l.closest(t.wrapperEl).length) && (s.isTouchEvent = \"touchstart\" === o.type, (s.isTouchEvent || !(\"which\" in o) || 3 !== o.which) && !(!s.isTouchEvent && \"button\" in o && 0 < o.button || s.isTouched && s.isMoved))) if (r.noSwipingClass && \"\" !== r.noSwipingClass && o.target && o.target.shadowRoot && e.path && e.path[0] && (l = S(e.path[0])), r.noSwiping && l.closest(r.noSwipingSelector || \".\" + r.noSwipingClass)[0]) t.allowClick = !0;else if (!r.swipeHandler || l.closest(r.swipeHandler)[0]) {\n              a.currentX = (\"touchstart\" === o.type ? o.targetTouches[0] : o).pageX, a.currentY = (\"touchstart\" === o.type ? o.targetTouches[0] : o).pageY;\n              var d = a.currentX,\n                  c = a.currentY,\n                  u = r.edgeSwipeDetection || r.iOSEdgeSwipeDetection,\n                  p = r.edgeSwipeThreshold || r.iOSEdgeSwipeThreshold;\n\n              if (u && (d <= p || d >= n.innerWidth - p)) {\n                if (\"prevent\" !== u) return;\n                e.preventDefault();\n              }\n\n              K(s, {\n                isTouched: !0,\n                isMoved: !1,\n                allowTouchCallbacks: !0,\n                isScrolling: void 0,\n                startMoving: void 0\n              }), a.startX = d, a.startY = c, s.touchStartTime = k(), t.allowClick = !0, t.updateSize(), t.swipeDirection = void 0, 0 < r.threshold && (s.allowThresholdMove = !1), \"touchstart\" !== o.type && (c = !0, l.is(s.formElements) && (c = !1), i.activeElement && S(i.activeElement).is(s.formElements) && i.activeElement !== l[0] && i.activeElement.blur(), c = c && t.allowTouchMove && r.touchStartPreventDefault, !r.touchStartForcePreventDefault && !c || l[0].isContentEditable || o.preventDefault()), t.emit(\"touchStart\", o);\n            }\n          }\n        }.bind(e), e.onTouchMove = function (e) {\n          var t = y(),\n              i = this,\n              n = i.touchEventsData,\n              s = i.params,\n              r = i.touches,\n              a = i.rtlTranslate,\n              o = e;\n\n          if (o.originalEvent && (o = o.originalEvent), n.isTouched) {\n            if (!n.isTouchEvent || \"touchmove\" === o.type) {\n              var l = \"touchmove\" === o.type && o.targetTouches && (o.targetTouches[0] || o.changedTouches[0]),\n                  e = (\"touchmove\" === o.type ? l : o).pageX,\n                  l = (\"touchmove\" === o.type ? l : o).pageY;\n              if (o.preventedByNestedSwiper) return r.startX = e, void (r.startY = l);\n              if (!i.allowTouchMove) return i.allowClick = !1, void (n.isTouched && (K(r, {\n                startX: e,\n                startY: l,\n                currentX: e,\n                currentY: l\n              }), n.touchStartTime = k()));\n              if (n.isTouchEvent && s.touchReleaseOnEdges && !s.loop) if (i.isVertical()) {\n                if (l < r.startY && i.translate <= i.maxTranslate() || l > r.startY && i.translate >= i.minTranslate()) return n.isTouched = !1, void (n.isMoved = !1);\n              } else if (e < r.startX && i.translate <= i.maxTranslate() || e > r.startX && i.translate >= i.minTranslate()) return;\n              if (n.isTouchEvent && t.activeElement && o.target === t.activeElement && S(o.target).is(n.formElements)) return n.isMoved = !0, void (i.allowClick = !1);\n\n              if (n.allowTouchCallbacks && i.emit(\"touchMove\", o), !(o.targetTouches && 1 < o.targetTouches.length)) {\n                r.currentX = e, r.currentY = l;\n                t = r.currentX - r.startX, e = r.currentY - r.startY;\n                if (!(i.params.threshold && Math.sqrt(Math.pow(t, 2) + Math.pow(e, 2)) < i.params.threshold)) if (void 0 === n.isScrolling && (i.isHorizontal() && r.currentY === r.startY || i.isVertical() && r.currentX === r.startX ? n.isScrolling = !1 : 25 <= t * t + e * e && (l = 180 * Math.atan2(Math.abs(e), Math.abs(t)) / Math.PI, n.isScrolling = i.isHorizontal() ? l > s.touchAngle : 90 - l > s.touchAngle)), n.isScrolling && i.emit(\"touchMoveOpposite\", o), void 0 === n.startMoving && (r.currentX === r.startX && r.currentY === r.startY || (n.startMoving = !0)), n.isScrolling) n.isTouched = !1;else if (n.startMoving) {\n                  i.allowClick = !1, !s.cssMode && o.cancelable && o.preventDefault(), s.touchMoveStopPropagation && !s.nested && o.stopPropagation(), n.isMoved || (s.loop && i.loopFix(), n.startTranslate = i.getTranslate(), i.setTransition(0), i.animating && i.$wrapperEl.trigger(\"webkitTransitionEnd transitionend\"), n.allowMomentumBounce = !1, !s.grabCursor || !0 !== i.allowSlideNext && !0 !== i.allowSlidePrev || i.setGrabCursor(!0), i.emit(\"sliderFirstMove\", o)), i.emit(\"sliderMove\", o), n.isMoved = !0;\n                  t = i.isHorizontal() ? t : e;\n                  r.diff = t, t *= s.touchRatio, a && (t = -t), i.swipeDirection = 0 < t ? \"prev\" : \"next\", n.currentTranslate = t + n.startTranslate;\n                  e = !0, a = s.resistanceRatio;\n\n                  if (s.touchReleaseOnEdges && (a = 0), 0 < t && n.currentTranslate > i.minTranslate() ? (e = !1, s.resistance && (n.currentTranslate = i.minTranslate() - 1 + Math.pow(-i.minTranslate() + n.startTranslate + t, a))) : t < 0 && n.currentTranslate < i.maxTranslate() && (e = !1, s.resistance && (n.currentTranslate = i.maxTranslate() + 1 - Math.pow(i.maxTranslate() - n.startTranslate - t, a))), e && (o.preventedByNestedSwiper = !0), !i.allowSlideNext && \"next\" === i.swipeDirection && n.currentTranslate < n.startTranslate && (n.currentTranslate = n.startTranslate), !i.allowSlidePrev && \"prev\" === i.swipeDirection && n.currentTranslate > n.startTranslate && (n.currentTranslate = n.startTranslate), 0 < s.threshold) {\n                    if (!(Math.abs(t) > s.threshold || n.allowThresholdMove)) return void (n.currentTranslate = n.startTranslate);\n                    if (!n.allowThresholdMove) return n.allowThresholdMove = !0, r.startX = r.currentX, r.startY = r.currentY, n.currentTranslate = n.startTranslate, void (r.diff = i.isHorizontal() ? r.currentX - r.startX : r.currentY - r.startY);\n                  }\n\n                  s.followFinger && !s.cssMode && ((s.freeMode || s.watchSlidesProgress || s.watchSlidesVisibility) && (i.updateActiveIndex(), i.updateSlidesClasses()), s.freeMode && (0 === n.velocities.length && n.velocities.push({\n                    position: r[i.isHorizontal() ? \"startX\" : \"startY\"],\n                    time: n.touchStartTime\n                  }), n.velocities.push({\n                    position: r[i.isHorizontal() ? \"currentX\" : \"currentY\"],\n                    time: k()\n                  })), i.updateProgress(n.currentTranslate), i.setTranslate(n.currentTranslate));\n                }\n              }\n            }\n          } else n.startMoving && n.isScrolling && i.emit(\"touchMoveOpposite\", o);\n        }.bind(e), e.onTouchEnd = function (e) {\n          var t = this,\n              i = t.touchEventsData,\n              n = t.params,\n              s = t.touches,\n              r = t.rtlTranslate,\n              a = t.$wrapperEl,\n              o = t.slidesGrid,\n              l = t.snapGrid,\n              d = e;\n          if (d.originalEvent && (d = d.originalEvent), i.allowTouchCallbacks && t.emit(\"touchEnd\", d), i.allowTouchCallbacks = !1, !i.isTouched) return i.isMoved && n.grabCursor && t.setGrabCursor(!1), i.isMoved = !1, void (i.startMoving = !1);\n          n.grabCursor && i.isMoved && i.isTouched && (!0 === t.allowSlideNext || !0 === t.allowSlidePrev) && t.setGrabCursor(!1);\n          var c,\n              u = k(),\n              e = u - i.touchStartTime;\n          if (t.allowClick && (t.updateClickedSlide(d), t.emit(\"tap click\", d), e < 300 && u - i.lastClickTime < 300 && t.emit(\"doubleTap doubleClick\", d)), i.lastClickTime = k(), E(function () {\n            t.destroyed || (t.allowClick = !0);\n          }), !i.isTouched || !i.isMoved || !t.swipeDirection || 0 === s.diff || i.currentTranslate === i.startTranslate) return i.isTouched = !1, i.isMoved = !1, void (i.startMoving = !1);\n          if (i.isTouched = !1, i.isMoved = !1, i.startMoving = !1, c = n.followFinger ? r ? t.translate : -t.translate : -i.currentTranslate, !n.cssMode) if (n.freeMode) {\n            if (c < -t.minTranslate()) t.slideTo(t.activeIndex);else if (c > -t.maxTranslate()) t.slides.length < l.length ? t.slideTo(l.length - 1) : t.slideTo(t.slides.length - 1);else {\n              if (n.freeModeMomentum) {\n                1 < i.velocities.length ? (g = i.velocities.pop(), h = i.velocities.pop(), p = g.position - h.position, h = g.time - h.time, t.velocity = p / h, t.velocity /= 2, Math.abs(t.velocity) < n.freeModeMinimumVelocity && (t.velocity = 0), (150 < h || 300 < k() - g.time) && (t.velocity = 0)) : t.velocity = 0, t.velocity *= n.freeModeMomentumVelocityRatio, i.velocities.length = 0;\n                var p = 1e3 * n.freeModeMomentumRatio,\n                    h = t.velocity * p,\n                    f = t.translate + h;\n                r && (f = -f);\n                var m,\n                    v,\n                    g = !1,\n                    h = 20 * Math.abs(t.velocity) * n.freeModeMomentumBounceRatio;\n                if (f < t.maxTranslate()) n.freeModeMomentumBounce ? (f + t.maxTranslate() < -h && (f = t.maxTranslate() - h), m = t.maxTranslate(), g = !0, i.allowMomentumBounce = !0) : f = t.maxTranslate(), n.loop && n.centeredSlides && (v = !0);else if (f > t.minTranslate()) n.freeModeMomentumBounce ? (f - t.minTranslate() > h && (f = t.minTranslate() + h), m = t.minTranslate(), g = !0, i.allowMomentumBounce = !0) : f = t.minTranslate(), n.loop && n.centeredSlides && (v = !0);else if (n.freeModeSticky) {\n                  for (var y, b = 0; b < l.length; b += 1) {\n                    if (l[b] > -f) {\n                      y = b;\n                      break;\n                    }\n                  }\n\n                  f = -(Math.abs(l[y] - f) < Math.abs(l[y - 1] - f) || \"next\" === t.swipeDirection ? l[y] : l[y - 1]);\n                }\n                if (v && t.once(\"transitionEnd\", function () {\n                  t.loopFix();\n                }), 0 !== t.velocity) p = r ? Math.abs((-f - t.translate) / t.velocity) : Math.abs((f - t.translate) / t.velocity), n.freeModeSticky && (p = (v = Math.abs((r ? -f : f) - t.translate)) < (r = t.slidesSizesGrid[t.activeIndex]) ? n.speed : v < 2 * r ? 1.5 * n.speed : 2.5 * n.speed);else if (n.freeModeSticky) return void t.slideToClosest();\n                n.freeModeMomentumBounce && g ? (t.updateProgress(m), t.setTransition(p), t.setTranslate(f), t.transitionStart(!0, t.swipeDirection), t.animating = !0, a.transitionEnd(function () {\n                  t && !t.destroyed && i.allowMomentumBounce && (t.emit(\"momentumBounce\"), t.setTransition(n.speed), setTimeout(function () {\n                    t.setTranslate(m), a.transitionEnd(function () {\n                      t && !t.destroyed && t.transitionEnd();\n                    });\n                  }, 0));\n                })) : t.velocity ? (t.updateProgress(f), t.setTransition(p), t.setTranslate(f), t.transitionStart(!0, t.swipeDirection), t.animating || (t.animating = !0, a.transitionEnd(function () {\n                  t && !t.destroyed && t.transitionEnd();\n                }))) : t.updateProgress(f), t.updateActiveIndex(), t.updateSlidesClasses();\n              } else if (n.freeModeSticky) return void t.slideToClosest();\n\n              (!n.freeModeMomentum || e >= n.longSwipesMs) && (t.updateProgress(), t.updateActiveIndex(), t.updateSlidesClasses());\n            }\n          } else {\n            for (var w = 0, x = t.slidesSizesGrid[0], T = 0; T < o.length; T += T < n.slidesPerGroupSkip ? 1 : n.slidesPerGroup) {\n              var C = T < n.slidesPerGroupSkip - 1 ? 1 : n.slidesPerGroup;\n              void 0 !== o[T + C] ? c >= o[T] && c < o[T + C] && (x = o[(w = T) + C] - o[T]) : c >= o[T] && (w = T, x = o[o.length - 1] - o[o.length - 2]);\n            }\n\n            g = (c - o[w]) / x, p = w < n.slidesPerGroupSkip - 1 ? 1 : n.slidesPerGroup;\n            e > n.longSwipesMs ? n.longSwipes ? (\"next\" === t.swipeDirection && (g >= n.longSwipesRatio ? t.slideTo(w + p) : t.slideTo(w)), \"prev\" === t.swipeDirection && (g > 1 - n.longSwipesRatio ? t.slideTo(w + p) : t.slideTo(w))) : t.slideTo(t.activeIndex) : n.shortSwipes ? !t.navigation || d.target !== t.navigation.nextEl && d.target !== t.navigation.prevEl ? (\"next\" === t.swipeDirection && t.slideTo(w + p), \"prev\" === t.swipeDirection && t.slideTo(w)) : d.target === t.navigation.nextEl ? t.slideTo(w + p) : t.slideTo(w) : t.slideTo(t.activeIndex);\n          }\n        }.bind(e), i.cssMode && (e.onScroll = function () {\n          var e = this,\n              t = e.wrapperEl,\n              i = e.rtlTranslate;\n          e.previousTranslate = e.translate, e.isHorizontal() ? e.translate = i ? t.scrollWidth - t.offsetWidth - t.scrollLeft : -t.scrollLeft : e.translate = -t.scrollTop, -0 === e.translate && (e.translate = 0), e.updateActiveIndex(), e.updateSlidesClasses(), (0 == (t = e.maxTranslate() - e.minTranslate()) ? 0 : (e.translate - e.minTranslate()) / t) !== e.progress && e.updateProgress(i ? -e.translate : e.translate), e.emit(\"setTranslate\", e.translate, !1);\n        }.bind(e)), e.onClick = function (e) {\n          this.allowClick || (this.params.preventClicks && e.preventDefault(), this.params.preventClicksPropagation && this.animating && (e.stopPropagation(), e.stopImmediatePropagation()));\n        }.bind(e);\n        var l,\n            d = !!i.nested;\n        !o.touch && o.pointerEvents ? (s.addEventListener(n.start, e.onTouchStart, !1), t.addEventListener(n.move, e.onTouchMove, d), t.addEventListener(n.end, e.onTouchEnd, !1)) : (o.touch && (l = !(\"touchstart\" !== n.start || !o.passiveListener || !i.passiveListeners) && {\n          passive: !0,\n          capture: !1\n        }, s.addEventListener(n.start, e.onTouchStart, l), s.addEventListener(n.move, e.onTouchMove, o.passiveListener ? {\n          passive: !1,\n          capture: d\n        } : d), s.addEventListener(n.end, e.onTouchEnd, l), n.cancel && s.addEventListener(n.cancel, e.onTouchEnd, l), L || (t.addEventListener(\"touchstart\", z), L = !0)), (i.simulateTouch && !a.ios && !a.android || i.simulateTouch && !o.touch && a.ios) && (s.addEventListener(\"mousedown\", e.onTouchStart, !1), t.addEventListener(\"mousemove\", e.onTouchMove, d), t.addEventListener(\"mouseup\", e.onTouchEnd, !1))), (i.preventClicks || i.preventClicksPropagation) && s.addEventListener(\"click\", e.onClick, !0), i.cssMode && r.addEventListener(\"scroll\", e.onScroll), i.updateOnWindowResize ? e.on(a.ios || a.android ? \"resize orientationchange observerUpdate\" : \"resize observerUpdate\", P, !0) : e.on(\"observerUpdate\", P, !0);\n      },\n      detachEvents: function detachEvents() {\n        var e,\n            t = this,\n            i = y(),\n            n = t.params,\n            s = t.touchEvents,\n            r = t.el,\n            a = t.wrapperEl,\n            o = t.device,\n            l = t.support,\n            d = !!n.nested;\n        !l.touch && l.pointerEvents ? (r.removeEventListener(s.start, t.onTouchStart, !1), i.removeEventListener(s.move, t.onTouchMove, d), i.removeEventListener(s.end, t.onTouchEnd, !1)) : (l.touch && (e = !(\"onTouchStart\" !== s.start || !l.passiveListener || !n.passiveListeners) && {\n          passive: !0,\n          capture: !1\n        }, r.removeEventListener(s.start, t.onTouchStart, e), r.removeEventListener(s.move, t.onTouchMove, d), r.removeEventListener(s.end, t.onTouchEnd, e), s.cancel && r.removeEventListener(s.cancel, t.onTouchEnd, e)), (n.simulateTouch && !o.ios && !o.android || n.simulateTouch && !l.touch && o.ios) && (r.removeEventListener(\"mousedown\", t.onTouchStart, !1), i.removeEventListener(\"mousemove\", t.onTouchMove, d), i.removeEventListener(\"mouseup\", t.onTouchEnd, !1))), (n.preventClicks || n.preventClicksPropagation) && r.removeEventListener(\"click\", t.onClick, !0), n.cssMode && a.removeEventListener(\"scroll\", t.onScroll), t.off(o.ios || o.android ? \"resize orientationchange observerUpdate\" : \"resize observerUpdate\", P);\n      }\n    },\n    breakpoints: {\n      setBreakpoint: function setBreakpoint() {\n        var e,\n            i,\n            t,\n            n = this,\n            s = n.activeIndex,\n            r = n.initialized,\n            a = n.loopedSlides,\n            o = void 0 === a ? 0 : a,\n            l = n.params,\n            d = n.$el,\n            c = l.breakpoints;\n        !c || c && 0 === Object.keys(c).length || (e = n.getBreakpoint(c)) && n.currentBreakpoint !== e && ((i = e in c ? c[e] : void 0) && [\"slidesPerView\", \"spaceBetween\", \"slidesPerGroup\", \"slidesPerGroupSkip\", \"slidesPerColumn\"].forEach(function (e) {\n          var t = i[e];\n          void 0 !== t && (i[e] = \"slidesPerView\" !== e || \"AUTO\" !== t && \"auto\" !== t ? \"slidesPerView\" === e ? parseFloat(t) : parseInt(t, 10) : \"auto\");\n        }), t = i || n.originalParams, a = 1 < l.slidesPerColumn, c = 1 < t.slidesPerColumn, a && !c ? (d.removeClass(l.containerModifierClass + \"multirow \" + l.containerModifierClass + \"multirow-column\"), n.emitContainerClasses()) : !a && c && (d.addClass(l.containerModifierClass + \"multirow\"), \"column\" === t.slidesPerColumnFill && d.addClass(l.containerModifierClass + \"multirow-column\"), n.emitContainerClasses()), d = t.direction && t.direction !== l.direction, l = l.loop && (t.slidesPerView !== l.slidesPerView || d), d && r && n.changeDirection(), K(n.params, t), K(n, {\n          allowTouchMove: n.params.allowTouchMove,\n          allowSlideNext: n.params.allowSlideNext,\n          allowSlidePrev: n.params.allowSlidePrev\n        }), n.currentBreakpoint = e, n.emit(\"_beforeBreakpoint\", t), l && r && (n.loopDestroy(), n.loopCreate(), n.updateSlides(), n.slideTo(s - o + n.loopedSlides, 0, !1)), n.emit(\"breakpoint\", t));\n      },\n      getBreakpoint: function getBreakpoint(e) {\n        var i = U();\n\n        if (e) {\n          var t = !1,\n              n = Object.keys(e).map(function (e) {\n            if (\"string\" != typeof e || 0 !== e.indexOf(\"@\")) return {\n              value: e,\n              point: e\n            };\n            var t = parseFloat(e.substr(1));\n            return {\n              value: i.innerHeight * t,\n              point: e\n            };\n          });\n          n.sort(function (e, t) {\n            return parseInt(e.value, 10) - parseInt(t.value, 10);\n          });\n\n          for (var s = 0; s < n.length; s += 1) {\n            var r = n[s],\n                a = r.point;\n            r.value <= i.innerWidth && (t = a);\n          }\n\n          return t || \"max\";\n        }\n      }\n    },\n    checkOverflow: {\n      checkOverflow: function checkOverflow() {\n        var e = this,\n            t = e.params,\n            i = e.isLocked,\n            n = 0 < e.slides.length && t.slidesOffsetBefore + t.spaceBetween * (e.slides.length - 1) + e.slides[0].offsetWidth * e.slides.length;\n        t.slidesOffsetBefore && t.slidesOffsetAfter && n ? e.isLocked = n <= e.size : e.isLocked = 1 === e.snapGrid.length, e.allowSlideNext = !e.isLocked, e.allowSlidePrev = !e.isLocked, i !== e.isLocked && e.emit(e.isLocked ? \"lock\" : \"unlock\"), i && i !== e.isLocked && (e.isEnd = !1, e.navigation && e.navigation.update());\n      }\n    },\n    classes: {\n      addClasses: function addClasses() {\n        var i,\n            n,\n            e = this,\n            t = e.classNames,\n            s = e.params,\n            r = e.rtl,\n            a = e.$el,\n            o = e.device,\n            l = e.support,\n            o = (o = [\"initialized\", s.direction, {\n          \"pointer-events\": l.pointerEvents && !l.touch\n        }, {\n          \"free-mode\": s.freeMode\n        }, {\n          autoheight: s.autoHeight\n        }, {\n          rtl: r\n        }, {\n          multirow: 1 < s.slidesPerColumn\n        }, {\n          \"multirow-column\": 1 < s.slidesPerColumn && \"column\" === s.slidesPerColumnFill\n        }, {\n          android: o.android\n        }, {\n          ios: o.ios\n        }, {\n          \"css-mode\": s.cssMode\n        }], i = s.containerModifierClass, n = [], o.forEach(function (e) {\n          \"object\" == _typeof(e) ? Object.entries(e).forEach(function (e) {\n            var t = e[0];\n            e[1] && n.push(i + t);\n          }) : \"string\" == typeof e && n.push(i + e);\n        }), n);\n        t.push.apply(t, o), a.addClass([].concat(t).join(\" \")), e.emitContainerClasses();\n      },\n      removeClasses: function removeClasses() {\n        var e = this.$el,\n            t = this.classNames;\n        e.removeClass(t.join(\" \")), this.emitContainerClasses();\n      }\n    },\n    images: {\n      loadImage: function loadImage(e, t, i, n, s, r) {\n        var a = U();\n\n        function o() {\n          r && r();\n        }\n\n        !(S(e).parent(\"picture\")[0] || e.complete && s) && t ? ((a = new a.Image()).onload = o, a.onerror = o, n && (a.sizes = n), i && (a.srcset = i), t && (a.src = t)) : o();\n      },\n      preloadImages: function preloadImages() {\n        var e = this;\n\n        function t() {\n          null != e && e && !e.destroyed && (void 0 !== e.imagesLoaded && (e.imagesLoaded += 1), e.imagesLoaded === e.imagesToLoad.length && (e.params.updateOnImagesReady && e.update(), e.emit(\"imagesReady\")));\n        }\n\n        e.imagesToLoad = e.$el.find(\"img\");\n\n        for (var i = 0; i < e.imagesToLoad.length; i += 1) {\n          var n = e.imagesToLoad[i];\n          e.loadImage(n, n.currentSrc || n.getAttribute(\"src\"), n.srcset || n.getAttribute(\"srcset\"), n.sizes || n.getAttribute(\"sizes\"), !0, t);\n        }\n      }\n    }\n  },\n      j = {},\n      q = ((O = W.prototype).emitContainerClasses = function () {\n    var e,\n        t = this;\n    t.params._emitClasses && t.el && (e = t.el.className.split(\" \").filter(function (e) {\n      return 0 === e.indexOf(\"swiper-container\") || 0 === e.indexOf(t.params.containerModifierClass);\n    }), t.emit(\"_containerClasses\", e.join(\" \")));\n  }, O.getSlideClasses = function (e) {\n    var t = this;\n    return e.className.split(\" \").filter(function (e) {\n      return 0 === e.indexOf(\"swiper-slide\") || 0 === e.indexOf(t.params.slideClass);\n    }).join(\" \");\n  }, O.emitSlidesClasses = function () {\n    var i,\n        n = this;\n    n.params._emitClasses && n.el && (i = [], n.slides.each(function (e) {\n      var t = n.getSlideClasses(e);\n      i.push({\n        slideEl: e,\n        classNames: t\n      }), n.emit(\"_slideClass\", e, t);\n    }), n.emit(\"_slideClasses\", i));\n  }, O.slidesPerViewDynamic = function () {\n    var e = this,\n        t = e.params,\n        i = e.slides,\n        n = e.slidesGrid,\n        s = e.size,\n        r = e.activeIndex,\n        a = 1;\n\n    if (t.centeredSlides) {\n      for (var o, l = i[r].swiperSlideSize, d = r + 1; d < i.length; d += 1) {\n        i[d] && !o && (a += 1, (l += i[d].swiperSlideSize) > s && (o = !0));\n      }\n\n      for (var c = r - 1; 0 <= c; --c) {\n        i[c] && !o && (a += 1, (l += i[c].swiperSlideSize) > s && (o = !0));\n      }\n    } else for (var u = r + 1; u < i.length; u += 1) {\n      n[u] - n[r] < s && (a += 1);\n    }\n\n    return a;\n  }, O.update = function () {\n    var e,\n        t,\n        i = this;\n\n    function n() {\n      var e = i.rtlTranslate ? -1 * i.translate : i.translate,\n          e = Math.min(Math.max(e, i.maxTranslate()), i.minTranslate());\n      i.setTranslate(e), i.updateActiveIndex(), i.updateSlidesClasses();\n    }\n\n    i && !i.destroyed && (e = i.snapGrid, (t = i.params).breakpoints && i.setBreakpoint(), i.updateSize(), i.updateSlides(), i.updateProgress(), i.updateSlidesClasses(), i.params.freeMode ? (n(), i.params.autoHeight && i.updateAutoHeight()) : ((\"auto\" === i.params.slidesPerView || 1 < i.params.slidesPerView) && i.isEnd && !i.params.centeredSlides ? i.slideTo(i.slides.length - 1, 0, !1, !0) : i.slideTo(i.activeIndex, 0, !1, !0)) || n(), t.watchOverflow && e !== i.snapGrid && i.checkOverflow(), i.emit(\"update\"));\n  }, O.changeDirection = function (t, e) {\n    void 0 === e && (e = !0);\n    var i = this,\n        n = i.params.direction;\n    return (t = t || (\"horizontal\" === n ? \"vertical\" : \"horizontal\")) === n || \"horizontal\" !== t && \"vertical\" !== t || (i.$el.removeClass(\"\" + i.params.containerModifierClass + n).addClass(\"\" + i.params.containerModifierClass + t), i.emitContainerClasses(), i.params.direction = t, i.slides.each(function (e) {\n      \"vertical\" === t ? e.style.width = \"\" : e.style.height = \"\";\n    }), i.emit(\"changeDirection\"), e && i.update()), i;\n  }, O.mount = function (e) {\n    var t = this;\n    if (t.mounted) return !0;\n    var i,\n        n = S(e || t.params.el);\n    return !!(e = n[0]) && (e.swiper = t, e && e.shadowRoot && e.shadowRoot.querySelector ? (i = S(e.shadowRoot.querySelector(\".\" + t.params.wrapperClass))).children = function (e) {\n      return n.children(e);\n    } : i = n.children(\".\" + t.params.wrapperClass), K(t, {\n      $el: n,\n      el: e,\n      $wrapperEl: i,\n      wrapperEl: i[0],\n      mounted: !0,\n      rtl: \"rtl\" === e.dir.toLowerCase() || \"rtl\" === n.css(\"direction\"),\n      rtlTranslate: \"horizontal\" === t.params.direction && (\"rtl\" === e.dir.toLowerCase() || \"rtl\" === n.css(\"direction\")),\n      wrongRTL: \"-webkit-box\" === i.css(\"display\")\n    }), !0);\n  }, O.init = function (e) {\n    var t = this;\n    return t.initialized || !1 === t.mount(e) || (t.emit(\"beforeInit\"), t.params.breakpoints && t.setBreakpoint(), t.addClasses(), t.params.loop && t.loopCreate(), t.updateSize(), t.updateSlides(), t.params.watchOverflow && t.checkOverflow(), t.params.grabCursor && t.setGrabCursor(), t.params.preloadImages && t.preloadImages(), t.params.loop ? t.slideTo(t.params.initialSlide + t.loopedSlides, 0, t.params.runCallbacksOnInit) : t.slideTo(t.params.initialSlide, 0, t.params.runCallbacksOnInit), t.attachEvents(), t.initialized = !0, t.emit(\"init\"), t.emit(\"afterInit\")), t;\n  }, O.destroy = function (e, t) {\n    void 0 === e && (e = !0), void 0 === t && (t = !0);\n    var i,\n        n = this,\n        s = n.params,\n        r = n.$el,\n        a = n.$wrapperEl,\n        o = n.slides;\n    return void 0 === n.params || n.destroyed || (n.emit(\"beforeDestroy\"), n.initialized = !1, n.detachEvents(), s.loop && n.loopDestroy(), t && (n.removeClasses(), r.removeAttr(\"style\"), a.removeAttr(\"style\"), o && o.length && o.removeClass([s.slideVisibleClass, s.slideActiveClass, s.slideNextClass, s.slidePrevClass].join(\" \")).removeAttr(\"style\").removeAttr(\"data-swiper-slide-index\")), n.emit(\"destroy\"), Object.keys(n.eventsListeners).forEach(function (e) {\n      n.off(e);\n    }), !1 !== e && (n.$el[0].swiper = null, i = n, Object.keys(i).forEach(function (e) {\n      try {\n        i[e] = null;\n      } catch (e) {}\n\n      try {\n        delete i[e];\n      } catch (e) {}\n    })), n.destroyed = !0), null;\n  }, W.extendDefaults = function (e) {\n    K(j, e);\n  }, W.installModule = function (e) {\n    W.prototype.modules || (W.prototype.modules = {});\n    var t = e.name || Object.keys(W.prototype.modules).length + \"_\" + k();\n    W.prototype.modules[t] = e;\n  }, W.use = function (e) {\n    return Array.isArray(e) ? e.forEach(function (e) {\n      return W.installModule(e);\n    }) : W.installModule(e), W;\n  }, I = W, D = [{\n    key: \"extendedDefaults\",\n    get: function get() {\n      return j;\n    }\n  }, {\n    key: \"defaults\",\n    get: function get() {\n      return H;\n    }\n  }], (O = null) && e(I.prototype, O), e(I, D), W);\n\n  function W() {\n    for (var i, e = arguments.length, t = new Array(e), n = 0; n < e; n++) {\n      t[n] = arguments[n];\n    }\n\n    if (i = K({}, i = (i = 1 === t.length && t[0].constructor && t[0].constructor === Object ? t[0] : (g = t[0], t[1])) || {}), g && !i.el && (i.el = g), i.el && 1 < S(i.el).length) {\n      var s = [];\n      return S(i.el).each(function (e) {\n        e = K({}, i, {\n          el: e\n        });\n        s.push(new W(e));\n      }), s;\n    }\n\n    var r,\n        a,\n        o,\n        l,\n        d,\n        c,\n        u,\n        p,\n        h,\n        f,\n        m,\n        v = this;\n    v.support = C(), v.device = (void 0 === (r = {\n      userAgent: i.userAgent\n    }) && (r = {}), b || (a = (void 0 === r ? {} : r).userAgent, o = C(), l = U(), d = l.navigator.platform, c = a || l.navigator.userAgent, u = {\n      ios: !1,\n      android: !1\n    }, p = l.screen.width, h = l.screen.height, f = c.match(/(Android);?[\\s\\/]+([\\d.]+)?/), m = c.match(/(iPad).*OS\\s([\\d_]+)/), r = c.match(/(iPod)(.*OS\\s([\\d_]+))?/), a = !m && c.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/), l = \"Win32\" === d, d = \"MacIntel\" === d, !m && d && o.touch && 0 <= [\"1024x1366\", \"1366x1024\", \"834x1194\", \"1194x834\", \"834x1112\", \"1112x834\", \"768x1024\", \"1024x768\", \"820x1180\", \"1180x820\", \"810x1080\", \"1080x810\"].indexOf(p + \"x\" + h) && ((m = c.match(/(Version)\\/([\\d.]+)/)) || (m = [0, 1, \"13_0_0\"]), d = !1), f && !l && (u.os = \"android\", u.android = !0), (m || a || r) && (u.os = \"ios\", u.ios = !0), b = u), b), v.browser = (w || (y = U(), w = {\n      isEdge: !!y.navigator.userAgent.match(/Edge/g),\n      isSafari: 0 <= (u = y.navigator.userAgent.toLowerCase()).indexOf(\"safari\") && u.indexOf(\"chrome\") < 0 && u.indexOf(\"android\") < 0,\n      isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(y.navigator.userAgent)\n    }), w), v.eventsListeners = {}, v.eventsAnyListeners = [], void 0 === v.modules && (v.modules = {}), Object.keys(v.modules).forEach(function (e) {\n      var t = v.modules[e];\n      t.params && (e = Object.keys(t.params)[0], \"object\" == _typeof(t = t.params[e]) && null !== t && e in i && \"enabled\" in t && (!0 === i[e] && (i[e] = {\n        enabled: !0\n      }), \"object\" != _typeof(i[e]) || \"enabled\" in i[e] || (i[e].enabled = !0), i[e] || (i[e] = {\n        enabled: !1\n      })));\n    });\n    var g,\n        y = K({}, H);\n    return v.useParams(y), v.params = K({}, y, j, i), v.originalParams = K({}, v.params), v.passedParams = K({}, i), v.params && v.params.on && Object.keys(v.params.on).forEach(function (e) {\n      v.on(e, v.params.on[e]);\n    }), v.params && v.params.onAny && v.onAny(v.params.onAny), v.$ = S, K(v, {\n      el: g,\n      classNames: [],\n      slides: S(),\n      slidesGrid: [],\n      snapGrid: [],\n      slidesSizesGrid: [],\n      isHorizontal: function isHorizontal() {\n        return \"horizontal\" === v.params.direction;\n      },\n      isVertical: function isVertical() {\n        return \"vertical\" === v.params.direction;\n      },\n      activeIndex: 0,\n      realIndex: 0,\n      isBeginning: !0,\n      isEnd: !1,\n      translate: 0,\n      previousTranslate: 0,\n      progress: 0,\n      velocity: 0,\n      animating: !1,\n      allowSlideNext: v.params.allowSlideNext,\n      allowSlidePrev: v.params.allowSlidePrev,\n      touchEvents: (y = [\"touchstart\", \"touchmove\", \"touchend\", \"touchcancel\"], g = [\"mousedown\", \"mousemove\", \"mouseup\"], v.support.pointerEvents && (g = [\"pointerdown\", \"pointermove\", \"pointerup\"]), v.touchEventsTouch = {\n        start: y[0],\n        move: y[1],\n        end: y[2],\n        cancel: y[3]\n      }, v.touchEventsDesktop = {\n        start: g[0],\n        move: g[1],\n        end: g[2]\n      }, v.support.touch || !v.params.simulateTouch ? v.touchEventsTouch : v.touchEventsDesktop),\n      touchEventsData: {\n        isTouched: void 0,\n        isMoved: void 0,\n        allowTouchCallbacks: void 0,\n        touchStartTime: void 0,\n        isScrolling: void 0,\n        currentTranslate: void 0,\n        startTranslate: void 0,\n        allowThresholdMove: void 0,\n        formElements: \"input, select, option, textarea, button, video, label\",\n        lastClickTime: k(),\n        clickTimeout: void 0,\n        velocities: [],\n        allowMomentumBounce: void 0,\n        isTouchEvent: void 0,\n        startMoving: void 0\n      },\n      allowClick: !0,\n      allowTouchMove: v.params.allowTouchMove,\n      touches: {\n        startX: 0,\n        startY: 0,\n        currentX: 0,\n        currentY: 0,\n        diff: 0\n      },\n      imagesToLoad: [],\n      imagesLoaded: 0\n    }), v.useModules(), v.emit(\"_swiper\"), v.params.init && v.init(), v;\n  }\n\n  Object.keys(N).forEach(function (t) {\n    Object.keys(N[t]).forEach(function (e) {\n      q.prototype[e] = N[t][e];\n    });\n  }), q.use([$, A]);\n  var B = {\n    update: function update(e) {\n      var t = this,\n          i = t.params,\n          n = i.slidesPerView,\n          s = i.slidesPerGroup,\n          r = i.centeredSlides,\n          a = t.params.virtual,\n          o = a.addSlidesBefore,\n          l = a.addSlidesAfter,\n          d = t.virtual,\n          c = d.from,\n          u = d.to,\n          p = d.slides,\n          h = d.slidesGrid,\n          f = d.renderSlide,\n          i = d.offset;\n      t.updateActiveIndex();\n      var a = t.activeIndex || 0,\n          d = t.rtlTranslate ? \"right\" : t.isHorizontal() ? \"left\" : \"top\",\n          o = r ? (g = Math.floor(n / 2) + s + l, Math.floor(n / 2) + s + o) : (g = n + (s - 1) + l, s + o),\n          m = Math.max((a || 0) - o, 0),\n          v = Math.min((a || 0) + g, p.length - 1),\n          g = (t.slidesGrid[m] || 0) - (t.slidesGrid[0] || 0);\n\n      function y() {\n        t.updateSlides(), t.updateProgress(), t.updateSlidesClasses(), t.lazy && t.params.lazy.enabled && t.lazy.load();\n      }\n\n      if (K(t.virtual, {\n        from: m,\n        to: v,\n        offset: g,\n        slidesGrid: t.slidesGrid\n      }), c === m && u === v && !e) return t.slidesGrid !== h && g !== i && t.slides.css(d, g + \"px\"), void t.updateProgress();\n      if (t.params.virtual.renderExternal) return t.params.virtual.renderExternal.call(t, {\n        offset: g,\n        from: m,\n        to: v,\n        slides: function () {\n          for (var e = [], t = m; t <= v; t += 1) {\n            e.push(p[t]);\n          }\n\n          return e;\n        }()\n      }), void (t.params.virtual.renderExternalUpdate && y());\n      var b = [],\n          w = [];\n      if (e) t.$wrapperEl.find(\".\" + t.params.slideClass).remove();else for (var x = c; x <= u; x += 1) {\n        (x < m || v < x) && t.$wrapperEl.find(\".\" + t.params.slideClass + '[data-swiper-slide-index=\"' + x + '\"]').remove();\n      }\n\n      for (var T = 0; T < p.length; T += 1) {\n        m <= T && T <= v && (void 0 === u || e ? w.push(T) : (u < T && w.push(T), T < c && b.push(T)));\n      }\n\n      w.forEach(function (e) {\n        t.$wrapperEl.append(f(p[e], e));\n      }), b.sort(function (e, t) {\n        return t - e;\n      }).forEach(function (e) {\n        t.$wrapperEl.prepend(f(p[e], e));\n      }), t.$wrapperEl.children(\".swiper-slide\").css(d, g + \"px\"), y();\n    },\n    renderSlide: function renderSlide(e, t) {\n      var i = this,\n          n = i.params.virtual;\n      if (n.cache && i.virtual.cache[t]) return i.virtual.cache[t];\n      e = n.renderSlide ? S(n.renderSlide.call(i, e, t)) : S('<div class=\"' + i.params.slideClass + '\" data-swiper-slide-index=\"' + t + '\">' + e + \"</div>\");\n      return e.attr(\"data-swiper-slide-index\") || e.attr(\"data-swiper-slide-index\", t), n.cache && (i.virtual.cache[t] = e), e;\n    },\n    appendSlide: function appendSlide(e) {\n      if (\"object\" == _typeof(e) && \"length\" in e) for (var t = 0; t < e.length; t += 1) {\n        e[t] && this.virtual.slides.push(e[t]);\n      } else this.virtual.slides.push(e);\n      this.virtual.update(!0);\n    },\n    prependSlide: function prependSlide(e) {\n      var n,\n          s,\n          t = this,\n          i = t.activeIndex,\n          r = i + 1,\n          a = 1;\n\n      if (Array.isArray(e)) {\n        for (var o = 0; o < e.length; o += 1) {\n          e[o] && t.virtual.slides.unshift(e[o]);\n        }\n\n        r = i + e.length, a = e.length;\n      } else t.virtual.slides.unshift(e);\n\n      t.params.virtual.cache && (n = t.virtual.cache, s = {}, Object.keys(n).forEach(function (e) {\n        var t = n[e],\n            i = t.attr(\"data-swiper-slide-index\");\n        i && t.attr(\"data-swiper-slide-index\", parseInt(i, 10) + 1), s[parseInt(e, 10) + a] = t;\n      }), t.virtual.cache = s), t.virtual.update(!0), t.slideTo(r, 0);\n    },\n    removeSlide: function removeSlide(e) {\n      var t = this;\n\n      if (null != e) {\n        var i = t.activeIndex;\n        if (Array.isArray(e)) for (var n = e.length - 1; 0 <= n; --n) {\n          t.virtual.slides.splice(e[n], 1), t.params.virtual.cache && delete t.virtual.cache[e[n]], e[n] < i && --i, i = Math.max(i, 0);\n        } else t.virtual.slides.splice(e, 1), t.params.virtual.cache && delete t.virtual.cache[e], e < i && --i, i = Math.max(i, 0);\n        t.virtual.update(!0), t.slideTo(i, 0);\n      }\n    },\n    removeAllSlides: function removeAllSlides() {\n      var e = this;\n      e.virtual.slides = [], e.params.virtual.cache && (e.virtual.cache = {}), e.virtual.update(!0), e.slideTo(0, 0);\n    }\n  },\n      $ = {\n    name: \"virtual\",\n    params: {\n      virtual: {\n        enabled: !1,\n        slides: [],\n        cache: !0,\n        renderSlide: null,\n        renderExternal: null,\n        renderExternalUpdate: !0,\n        addSlidesBefore: 0,\n        addSlidesAfter: 0\n      }\n    },\n    create: function create() {\n      T(this, {\n        virtual: t({}, B, {\n          slides: this.params.virtual.slides,\n          cache: {}\n        })\n      });\n    },\n    on: {\n      beforeInit: function beforeInit(e) {\n        var t;\n        e.params.virtual.enabled && (e.classNames.push(e.params.containerModifierClass + \"virtual\"), t = {\n          watchSlidesProgress: !0\n        }, K(e.params, t), K(e.originalParams, t), e.params.initialSlide || e.virtual.update());\n      },\n      setTranslate: function setTranslate(e) {\n        e.params.virtual.enabled && e.virtual.update();\n      }\n    }\n  },\n      R = {\n    handle: function handle(e) {\n      var t = this,\n          i = U(),\n          n = y(),\n          s = t.rtlTranslate,\n          r = e,\n          a = (r = r.originalEvent ? r.originalEvent : r).keyCode || r.charCode,\n          o = t.params.keyboard.pageUpDown,\n          l = o && 33 === a,\n          d = o && 34 === a,\n          c = 37 === a,\n          u = 39 === a,\n          e = 38 === a,\n          o = 40 === a;\n      if (!t.allowSlideNext && (t.isHorizontal() && u || t.isVertical() && o || d)) return !1;\n      if (!t.allowSlidePrev && (t.isHorizontal() && c || t.isVertical() && e || l)) return !1;\n\n      if (!(r.shiftKey || r.altKey || r.ctrlKey || r.metaKey || n.activeElement && n.activeElement.nodeName && (\"input\" === n.activeElement.nodeName.toLowerCase() || \"textarea\" === n.activeElement.nodeName.toLowerCase()))) {\n        if (t.params.keyboard.onlyInViewport && (l || d || c || u || e || o)) {\n          var p = !1;\n          if (0 < t.$el.parents(\".\" + t.params.slideClass).length && 0 === t.$el.parents(\".\" + t.params.slideActiveClass).length) return;\n          var h = i.innerWidth,\n              f = i.innerHeight,\n              i = t.$el.offset();\n          s && (i.left -= t.$el[0].scrollLeft);\n\n          for (var m = [[i.left, i.top], [i.left + t.width, i.top], [i.left, i.top + t.height], [i.left + t.width, i.top + t.height]], v = 0; v < m.length; v += 1) {\n            var g = m[v];\n            0 <= g[0] && g[0] <= h && 0 <= g[1] && g[1] <= f && (0 === g[0] && 0 === g[1] || (p = !0));\n          }\n\n          if (!p) return;\n        }\n\n        t.isHorizontal() ? ((l || d || c || u) && (r.preventDefault ? r.preventDefault() : r.returnValue = !1), ((d || u) && !s || (l || c) && s) && t.slideNext(), ((l || c) && !s || (d || u) && s) && t.slidePrev()) : ((l || d || e || o) && (r.preventDefault ? r.preventDefault() : r.returnValue = !1), (d || o) && t.slideNext(), (l || e) && t.slidePrev()), t.emit(\"keyPress\", a);\n      }\n    },\n    enable: function enable() {\n      var e = y();\n      this.keyboard.enabled || (S(e).on(\"keydown\", this.keyboard.handle), this.keyboard.enabled = !0);\n    },\n    disable: function disable() {\n      var e = y();\n      this.keyboard.enabled && (S(e).off(\"keydown\", this.keyboard.handle), this.keyboard.enabled = !1);\n    }\n  },\n      A = {\n    name: \"keyboard\",\n    params: {\n      keyboard: {\n        enabled: !1,\n        onlyInViewport: !0,\n        pageUpDown: !0\n      }\n    },\n    create: function create() {\n      T(this, {\n        keyboard: t({\n          enabled: !1\n        }, R)\n      });\n    },\n    on: {\n      init: function init(e) {\n        e.params.keyboard.enabled && e.keyboard.enable();\n      },\n      destroy: function destroy(e) {\n        e.keyboard.enabled && e.keyboard.disable();\n      }\n    }\n  },\n      F = {\n    lastScrollTime: k(),\n    lastEventBeforeSnap: void 0,\n    recentWheelEvents: [],\n    event: function event() {\n      return -1 < U().navigator.userAgent.indexOf(\"firefox\") ? \"DOMMouseScroll\" : (t = y(), (n = (i = \"onwheel\") in t) || ((e = t.createElement(\"div\")).setAttribute(i, \"return;\"), n = \"function\" == typeof e.onwheel), (n = !n && t.implementation && t.implementation.hasFeature && !0 !== t.implementation.hasFeature(\"\", \"\") ? t.implementation.hasFeature(\"Events.wheel\", \"3.0\") : n) ? \"wheel\" : \"mousewheel\");\n      var e, t, i, n;\n    },\n    normalize: function normalize(e) {\n      var t = 0,\n          i = 0,\n          n = 0,\n          s = 0;\n      return \"detail\" in e && (i = e.detail), \"wheelDelta\" in e && (i = -e.wheelDelta / 120), \"wheelDeltaY\" in e && (i = -e.wheelDeltaY / 120), \"wheelDeltaX\" in e && (t = -e.wheelDeltaX / 120), \"axis\" in e && e.axis === e.HORIZONTAL_AXIS && (t = i, i = 0), n = 10 * t, s = 10 * i, \"deltaY\" in e && (s = e.deltaY), \"deltaX\" in e && (n = e.deltaX), e.shiftKey && !n && (n = s, s = 0), (n || s) && e.deltaMode && (1 === e.deltaMode ? (n *= 40, s *= 40) : (n *= 800, s *= 800)), {\n        spinX: t = n && !t ? n < 1 ? -1 : 1 : t,\n        spinY: i = s && !i ? s < 1 ? -1 : 1 : i,\n        pixelX: n,\n        pixelY: s\n      };\n    },\n    handleMouseEnter: function handleMouseEnter() {\n      this.mouseEntered = !0;\n    },\n    handleMouseLeave: function handleMouseLeave() {\n      this.mouseEntered = !1;\n    },\n    handle: function handle(e) {\n      var t = e,\n          i = this,\n          n = i.params.mousewheel;\n      i.params.cssMode && t.preventDefault();\n      var s = i.$el;\n      if (\"container\" !== i.params.mousewheel.eventsTarget && (s = S(i.params.mousewheel.eventsTarget)), !i.mouseEntered && !s[0].contains(t.target) && !n.releaseOnEdges) return !0;\n      t.originalEvent && (t = t.originalEvent);\n      var r = 0,\n          a = i.rtlTranslate ? -1 : 1,\n          s = F.normalize(t);\n      if (n.forceToAxis) {\n        if (i.isHorizontal()) {\n          if (!(Math.abs(s.pixelX) > Math.abs(s.pixelY))) return !0;\n          r = -s.pixelX * a;\n        } else {\n          if (!(Math.abs(s.pixelY) > Math.abs(s.pixelX))) return !0;\n          r = -s.pixelY;\n        }\n      } else r = Math.abs(s.pixelX) > Math.abs(s.pixelY) ? -s.pixelX * a : -s.pixelY;\n      if (0 === r) return !0;\n      n.invert && (r = -r);\n      a = i.getTranslate() + r * n.sensitivity;\n\n      if ((a = a >= i.minTranslate() ? i.minTranslate() : a) <= i.maxTranslate() && (a = i.maxTranslate()), (i.params.loop || a !== i.minTranslate() && a !== i.maxTranslate()) && i.params.nested && t.stopPropagation(), i.params.freeMode) {\n        var o = {\n          time: k(),\n          delta: Math.abs(r),\n          direction: Math.sign(r)\n        },\n            s = i.mousewheel.lastEventBeforeSnap,\n            a = s && o.time < s.time + 500 && o.delta <= s.delta && o.direction === s.direction;\n\n        if (!a) {\n          i.mousewheel.lastEventBeforeSnap = void 0, i.params.loop && i.loopFix();\n          var l,\n              d,\n              c = i.getTranslate() + r * n.sensitivity,\n              s = i.isBeginning,\n              n = i.isEnd;\n          if ((c = c >= i.minTranslate() ? i.minTranslate() : c) <= i.maxTranslate() && (c = i.maxTranslate()), i.setTransition(0), i.setTranslate(c), i.updateProgress(), i.updateActiveIndex(), i.updateSlidesClasses(), (!s && i.isBeginning || !n && i.isEnd) && i.updateSlidesClasses(), i.params.freeModeSticky && (clearTimeout(i.mousewheel.timeout), i.mousewheel.timeout = void 0, 15 <= (l = i.mousewheel.recentWheelEvents).length && l.shift(), s = l.length ? l[l.length - 1] : void 0, n = l[0], l.push(o), s && (o.delta > s.delta || o.direction !== s.direction) ? l.splice(0) : 15 <= l.length && o.time - n.time < 500 && 1 <= n.delta - o.delta && o.delta <= 6 && (d = 0 < r ? .8 : .2, i.mousewheel.lastEventBeforeSnap = o, l.splice(0), i.mousewheel.timeout = E(function () {\n            i.slideToClosest(i.params.speed, !0, void 0, d);\n          }, 0)), i.mousewheel.timeout || (i.mousewheel.timeout = E(function () {\n            i.mousewheel.lastEventBeforeSnap = o, l.splice(0), i.slideToClosest(i.params.speed, !0, void 0, .5);\n          }, 500))), a || i.emit(\"scroll\", t), i.params.autoplay && i.params.autoplayDisableOnInteraction && i.autoplay.stop(), c === i.minTranslate() || c === i.maxTranslate()) return !0;\n        }\n      } else {\n        c = {\n          time: k(),\n          delta: Math.abs(r),\n          direction: Math.sign(r),\n          raw: e\n        }, r = i.mousewheel.recentWheelEvents;\n        2 <= r.length && r.shift();\n        e = r.length ? r[r.length - 1] : void 0;\n        if (r.push(c), (!e || c.direction !== e.direction || c.delta > e.delta || c.time > e.time + 150) && i.mousewheel.animateSlider(c), i.mousewheel.releaseScroll(c)) return !0;\n      }\n\n      return t.preventDefault ? t.preventDefault() : t.returnValue = !1, !1;\n    },\n    animateSlider: function animateSlider(e) {\n      var t = this,\n          i = U();\n      return !(this.params.mousewheel.thresholdDelta && e.delta < this.params.mousewheel.thresholdDelta || this.params.mousewheel.thresholdTime && k() - t.mousewheel.lastScrollTime < this.params.mousewheel.thresholdTime || !(6 <= e.delta && k() - t.mousewheel.lastScrollTime < 60) && (e.direction < 0 ? t.isEnd && !t.params.loop || t.animating || (t.slideNext(), t.emit(\"scroll\", e.raw)) : t.isBeginning && !t.params.loop || t.animating || (t.slidePrev(), t.emit(\"scroll\", e.raw)), t.mousewheel.lastScrollTime = new i.Date().getTime(), 1));\n    },\n    releaseScroll: function releaseScroll(e) {\n      var t = this,\n          i = t.params.mousewheel;\n\n      if (e.direction < 0) {\n        if (t.isEnd && !t.params.loop && i.releaseOnEdges) return !0;\n      } else if (t.isBeginning && !t.params.loop && i.releaseOnEdges) return !0;\n\n      return !1;\n    },\n    enable: function enable() {\n      var e = this,\n          t = F.event();\n      if (e.params.cssMode) return e.wrapperEl.removeEventListener(t, e.mousewheel.handle), !0;\n      if (!t) return !1;\n      if (e.mousewheel.enabled) return !1;\n      var i = e.$el;\n      return (i = \"container\" !== e.params.mousewheel.eventsTarget ? S(e.params.mousewheel.eventsTarget) : i).on(\"mouseenter\", e.mousewheel.handleMouseEnter), i.on(\"mouseleave\", e.mousewheel.handleMouseLeave), i.on(t, e.mousewheel.handle), e.mousewheel.enabled = !0;\n    },\n    disable: function disable() {\n      var e = this,\n          t = F.event();\n      if (e.params.cssMode) return e.wrapperEl.addEventListener(t, e.mousewheel.handle), !0;\n      if (!t) return !1;\n      if (!e.mousewheel.enabled) return !1;\n      var i = e.$el;\n      return (i = \"container\" !== e.params.mousewheel.eventsTarget ? S(e.params.mousewheel.eventsTarget) : i).off(t, e.mousewheel.handle), !(e.mousewheel.enabled = !1);\n    }\n  },\n      G = {\n    update: function update() {\n      var e,\n          t,\n          i = this,\n          n = i.params.navigation;\n      i.params.loop || (e = (t = i.navigation).$nextEl, (t = t.$prevEl) && 0 < t.length && (i.isBeginning ? t.addClass(n.disabledClass) : t.removeClass(n.disabledClass), t[i.params.watchOverflow && i.isLocked ? \"addClass\" : \"removeClass\"](n.lockClass)), e && 0 < e.length && (i.isEnd ? e.addClass(n.disabledClass) : e.removeClass(n.disabledClass), e[i.params.watchOverflow && i.isLocked ? \"addClass\" : \"removeClass\"](n.lockClass)));\n    },\n    onPrevClick: function onPrevClick(e) {\n      e.preventDefault(), this.isBeginning && !this.params.loop || this.slidePrev();\n    },\n    onNextClick: function onNextClick(e) {\n      e.preventDefault(), this.isEnd && !this.params.loop || this.slideNext();\n    },\n    init: function init() {\n      var e,\n          t,\n          i = this,\n          n = i.params.navigation;\n      (n.nextEl || n.prevEl) && (n.nextEl && (e = S(n.nextEl), i.params.uniqueNavElements && \"string\" == typeof n.nextEl && 1 < e.length && 1 === i.$el.find(n.nextEl).length && (e = i.$el.find(n.nextEl))), n.prevEl && (t = S(n.prevEl), i.params.uniqueNavElements && \"string\" == typeof n.prevEl && 1 < t.length && 1 === i.$el.find(n.prevEl).length && (t = i.$el.find(n.prevEl))), e && 0 < e.length && e.on(\"click\", i.navigation.onNextClick), t && 0 < t.length && t.on(\"click\", i.navigation.onPrevClick), K(i.navigation, {\n        $nextEl: e,\n        nextEl: e && e[0],\n        $prevEl: t,\n        prevEl: t && t[0]\n      }));\n    },\n    destroy: function destroy() {\n      var e = this,\n          t = e.navigation,\n          i = t.$nextEl,\n          t = t.$prevEl;\n      i && i.length && (i.off(\"click\", e.navigation.onNextClick), i.removeClass(e.params.navigation.disabledClass)), t && t.length && (t.off(\"click\", e.navigation.onPrevClick), t.removeClass(e.params.navigation.disabledClass));\n    }\n  },\n      X = {\n    update: function update() {\n      var e = this,\n          t = e.rtl,\n          i = e.params.pagination;\n\n      if (i.el && e.pagination.el && e.pagination.$el && 0 !== e.pagination.$el.length) {\n        var n,\n            s = (e.virtual && e.params.virtual.enabled ? e.virtual : e).slides.length,\n            r = e.pagination.$el,\n            a = e.params.loop ? Math.ceil((s - 2 * e.loopedSlides) / e.params.slidesPerGroup) : e.snapGrid.length;\n\n        if (e.params.loop ? ((n = Math.ceil((e.activeIndex - e.loopedSlides) / e.params.slidesPerGroup)) > s - 1 - 2 * e.loopedSlides && (n -= s - 2 * e.loopedSlides), a - 1 < n && (n -= a), n < 0 && \"bullets\" !== e.params.paginationType && (n = a + n)) : n = void 0 !== e.snapIndex ? e.snapIndex : e.activeIndex || 0, \"bullets\" === i.type && e.pagination.bullets && 0 < e.pagination.bullets.length) {\n          var o,\n              l,\n              d,\n              c,\n              u,\n              p = e.pagination.bullets;\n          if (i.dynamicBullets && (e.pagination.bulletSize = p.eq(0)[e.isHorizontal() ? \"outerWidth\" : \"outerHeight\"](!0), r.css(e.isHorizontal() ? \"width\" : \"height\", e.pagination.bulletSize * (i.dynamicMainBullets + 4) + \"px\"), 1 < i.dynamicMainBullets && void 0 !== e.previousIndex && (e.pagination.dynamicBulletIndex += n - e.previousIndex, e.pagination.dynamicBulletIndex > i.dynamicMainBullets - 1 ? e.pagination.dynamicBulletIndex = i.dynamicMainBullets - 1 : e.pagination.dynamicBulletIndex < 0 && (e.pagination.dynamicBulletIndex = 0)), o = n - e.pagination.dynamicBulletIndex, d = ((l = o + (Math.min(p.length, i.dynamicMainBullets) - 1)) + o) / 2), p.removeClass(i.bulletActiveClass + \" \" + i.bulletActiveClass + \"-next \" + i.bulletActiveClass + \"-next-next \" + i.bulletActiveClass + \"-prev \" + i.bulletActiveClass + \"-prev-prev \" + i.bulletActiveClass + \"-main\"), 1 < r.length) p.each(function (e) {\n            var t = S(e),\n                e = t.index();\n            e === n && t.addClass(i.bulletActiveClass), i.dynamicBullets && (o <= e && e <= l && t.addClass(i.bulletActiveClass + \"-main\"), e === o && t.prev().addClass(i.bulletActiveClass + \"-prev\").prev().addClass(i.bulletActiveClass + \"-prev-prev\"), e === l && t.next().addClass(i.bulletActiveClass + \"-next\").next().addClass(i.bulletActiveClass + \"-next-next\"));\n          });else {\n            var h = p.eq(n),\n                f = h.index();\n\n            if (h.addClass(i.bulletActiveClass), i.dynamicBullets) {\n              for (var s = p.eq(o), h = p.eq(l), m = o; m <= l; m += 1) {\n                p.eq(m).addClass(i.bulletActiveClass + \"-main\");\n              }\n\n              if (e.params.loop) {\n                if (f >= p.length - i.dynamicMainBullets) {\n                  for (var v = i.dynamicMainBullets; 0 <= v; --v) {\n                    p.eq(p.length - v).addClass(i.bulletActiveClass + \"-main\");\n                  }\n\n                  p.eq(p.length - i.dynamicMainBullets - 1).addClass(i.bulletActiveClass + \"-prev\");\n                } else s.prev().addClass(i.bulletActiveClass + \"-prev\").prev().addClass(i.bulletActiveClass + \"-prev-prev\"), h.next().addClass(i.bulletActiveClass + \"-next\").next().addClass(i.bulletActiveClass + \"-next-next\");\n              } else s.prev().addClass(i.bulletActiveClass + \"-prev\").prev().addClass(i.bulletActiveClass + \"-prev-prev\"), h.next().addClass(i.bulletActiveClass + \"-next\").next().addClass(i.bulletActiveClass + \"-next-next\");\n            }\n          }\n          i.dynamicBullets && (u = Math.min(p.length, i.dynamicMainBullets + 4), c = (e.pagination.bulletSize * u - e.pagination.bulletSize) / 2 - d * e.pagination.bulletSize, u = t ? \"right\" : \"left\", p.css(e.isHorizontal() ? u : \"top\", c + \"px\"));\n        }\n\n        \"fraction\" === i.type && (r.find(\".\" + i.currentClass).text(i.formatFractionCurrent(n + 1)), r.find(\".\" + i.totalClass).text(i.formatFractionTotal(a))), \"progressbar\" === i.type && (d = i.progressbarOpposite ? e.isHorizontal() ? \"vertical\" : \"horizontal\" : e.isHorizontal() ? \"horizontal\" : \"vertical\", t = (n + 1) / a, c = u = 1, \"horizontal\" == d ? u = t : c = t, r.find(\".\" + i.progressbarFillClass).transform(\"translate3d(0,0,0) scaleX(\" + u + \") scaleY(\" + c + \")\").transition(e.params.speed)), \"custom\" === i.type && i.renderCustom ? (r.html(i.renderCustom(e, n + 1, a)), e.emit(\"paginationRender\", r[0])) : e.emit(\"paginationUpdate\", r[0]), r[e.params.watchOverflow && e.isLocked ? \"addClass\" : \"removeClass\"](i.lockClass);\n      }\n    },\n    render: function render() {\n      var e = this,\n          t = e.params.pagination;\n\n      if (t.el && e.pagination.el && e.pagination.$el && 0 !== e.pagination.$el.length) {\n        var i = (e.virtual && e.params.virtual.enabled ? e.virtual : e).slides.length,\n            n = e.pagination.$el,\n            s = \"\";\n\n        if (\"bullets\" === t.type) {\n          var r = e.params.loop ? Math.ceil((i - 2 * e.loopedSlides) / e.params.slidesPerGroup) : e.snapGrid.length;\n          e.params.freeMode && !e.params.loop && i < r && (r = i);\n\n          for (var a = 0; a < r; a += 1) {\n            t.renderBullet ? s += t.renderBullet.call(e, a, t.bulletClass) : s += \"<\" + t.bulletElement + ' class=\"' + t.bulletClass + '\"></' + t.bulletElement + \">\";\n          }\n\n          n.html(s), e.pagination.bullets = n.find(\".\" + t.bulletClass.replace(/ /g, \".\"));\n        }\n\n        \"fraction\" === t.type && (s = t.renderFraction ? t.renderFraction.call(e, t.currentClass, t.totalClass) : '<span class=\"' + t.currentClass + '\"></span> / <span class=\"' + t.totalClass + '\"></span>', n.html(s)), \"progressbar\" === t.type && (s = t.renderProgressbar ? t.renderProgressbar.call(e, t.progressbarFillClass) : '<span class=\"' + t.progressbarFillClass + '\"></span>', n.html(s)), \"custom\" !== t.type && e.emit(\"paginationRender\", e.pagination.$el[0]);\n      }\n    },\n    init: function init() {\n      var e,\n          t = this,\n          i = t.params.pagination;\n      !i.el || 0 !== (e = S(i.el)).length && (t.params.uniqueNavElements && \"string\" == typeof i.el && 1 < e.length && (e = t.$el.find(i.el)), \"bullets\" === i.type && i.clickable && e.addClass(i.clickableClass), e.addClass(i.modifierClass + i.type), \"bullets\" === i.type && i.dynamicBullets && (e.addClass(\"\" + i.modifierClass + i.type + \"-dynamic\"), t.pagination.dynamicBulletIndex = 0, i.dynamicMainBullets < 1 && (i.dynamicMainBullets = 1)), \"progressbar\" === i.type && i.progressbarOpposite && e.addClass(i.progressbarOppositeClass), i.clickable && e.on(\"click\", \".\" + i.bulletClass.replace(/ /g, \".\"), function (e) {\n        e.preventDefault();\n        e = S(this).index() * t.params.slidesPerGroup;\n        t.params.loop && (e += t.loopedSlides), t.slideTo(e);\n      }), K(t.pagination, {\n        $el: e,\n        el: e[0]\n      }));\n    },\n    destroy: function destroy() {\n      var e,\n          t = this.params.pagination;\n      t.el && this.pagination.el && this.pagination.$el && 0 !== this.pagination.$el.length && ((e = this.pagination.$el).removeClass(t.hiddenClass), e.removeClass(t.modifierClass + t.type), this.pagination.bullets && this.pagination.bullets.removeClass(t.bulletActiveClass), t.clickable && e.off(\"click\", \".\" + t.bulletClass.replace(/ /g, \".\")));\n    }\n  },\n      Y = {\n    setTranslate: function setTranslate() {\n      var e, t, i, n, s, r, a, o;\n      this.params.scrollbar.el && this.scrollbar.el && (a = this.scrollbar, e = this.rtlTranslate, o = this.progress, t = a.dragSize, i = a.trackSize, n = a.$dragEl, s = a.$el, r = this.params.scrollbar, o = (i - (a = t)) * o, e ? 0 < (o = -o) ? (a = t - o, o = 0) : i < -o + t && (a = i + o) : o < 0 ? (a = t + o, o = 0) : i < o + t && (a = i - o), this.isHorizontal() ? (n.transform(\"translate3d(\" + o + \"px, 0, 0)\"), n[0].style.width = a + \"px\") : (n.transform(\"translate3d(0px, \" + o + \"px, 0)\"), n[0].style.height = a + \"px\"), r.hide && (clearTimeout(this.scrollbar.timeout), s[0].style.opacity = 1, this.scrollbar.timeout = setTimeout(function () {\n        s[0].style.opacity = 0, s.transition(400);\n      }, 1e3)));\n    },\n    setTransition: function setTransition(e) {\n      this.params.scrollbar.el && this.scrollbar.el && this.scrollbar.$dragEl.transition(e);\n    },\n    updateSize: function updateSize() {\n      var e,\n          t,\n          i,\n          n,\n          s,\n          r,\n          a,\n          o = this;\n      o.params.scrollbar.el && o.scrollbar.el && (t = (e = o.scrollbar).$dragEl, i = e.$el, t[0].style.width = \"\", t[0].style.height = \"\", n = o.isHorizontal() ? i[0].offsetWidth : i[0].offsetHeight, r = (s = o.size / o.virtualSize) * (n / o.size), a = \"auto\" === o.params.scrollbar.dragSize ? n * s : parseInt(o.params.scrollbar.dragSize, 10), o.isHorizontal() ? t[0].style.width = a + \"px\" : t[0].style.height = a + \"px\", i[0].style.display = 1 <= s ? \"none\" : \"\", o.params.scrollbar.hide && (i[0].style.opacity = 0), K(e, {\n        trackSize: n,\n        divider: s,\n        moveDivider: r,\n        dragSize: a\n      }), e.$el[o.params.watchOverflow && o.isLocked ? \"addClass\" : \"removeClass\"](o.params.scrollbar.lockClass));\n    },\n    getPointerPosition: function getPointerPosition(e) {\n      return this.isHorizontal() ? (\"touchstart\" === e.type || \"touchmove\" === e.type ? e.targetTouches[0] : e).clientX : (\"touchstart\" === e.type || \"touchmove\" === e.type ? e.targetTouches[0] : e).clientY;\n    },\n    setDragPosition: function setDragPosition(e) {\n      var t = this,\n          i = t.scrollbar,\n          n = t.rtlTranslate,\n          s = i.$el,\n          r = i.dragSize,\n          a = i.trackSize,\n          o = i.dragStartPos,\n          r = (i.getPointerPosition(e) - s.offset()[t.isHorizontal() ? \"left\" : \"top\"] - (null !== o ? o : r / 2)) / (a - r);\n      r = Math.max(Math.min(r, 1), 0), n && (r = 1 - r);\n      r = t.minTranslate() + (t.maxTranslate() - t.minTranslate()) * r;\n      t.updateProgress(r), t.setTranslate(r), t.updateActiveIndex(), t.updateSlidesClasses();\n    },\n    onDragStart: function onDragStart(e) {\n      var t = this,\n          i = t.params.scrollbar,\n          n = t.scrollbar,\n          s = t.$wrapperEl,\n          r = n.$el,\n          a = n.$dragEl;\n      t.scrollbar.isTouched = !0, t.scrollbar.dragStartPos = e.target === a[0] || e.target === a ? n.getPointerPosition(e) - e.target.getBoundingClientRect()[t.isHorizontal() ? \"left\" : \"top\"] : null, e.preventDefault(), e.stopPropagation(), s.transition(100), a.transition(100), n.setDragPosition(e), clearTimeout(t.scrollbar.dragTimeout), r.transition(0), i.hide && r.css(\"opacity\", 1), t.params.cssMode && t.$wrapperEl.css(\"scroll-snap-type\", \"none\"), t.emit(\"scrollbarDragStart\", e);\n    },\n    onDragMove: function onDragMove(e) {\n      var t = this.scrollbar,\n          i = this.$wrapperEl,\n          n = t.$el,\n          s = t.$dragEl;\n      this.scrollbar.isTouched && (e.preventDefault ? e.preventDefault() : e.returnValue = !1, t.setDragPosition(e), i.transition(0), n.transition(0), s.transition(0), this.emit(\"scrollbarDragMove\", e));\n    },\n    onDragEnd: function onDragEnd(e) {\n      var t = this,\n          i = t.params.scrollbar,\n          n = t.scrollbar,\n          s = t.$wrapperEl,\n          r = n.$el;\n      t.scrollbar.isTouched && (t.scrollbar.isTouched = !1, t.params.cssMode && (t.$wrapperEl.css(\"scroll-snap-type\", \"\"), s.transition(\"\")), i.hide && (clearTimeout(t.scrollbar.dragTimeout), t.scrollbar.dragTimeout = E(function () {\n        r.css(\"opacity\", 0), r.transition(400);\n      }, 1e3)), t.emit(\"scrollbarDragEnd\", e), i.snapOnRelease && t.slideToClosest());\n    },\n    enableDraggable: function enableDraggable() {\n      var e,\n          t,\n          i,\n          n,\n          s,\n          r,\n          a,\n          o = this;\n      o.params.scrollbar.el && (e = y(), r = o.scrollbar, t = o.touchEventsTouch, i = o.touchEventsDesktop, a = o.params, n = o.support, s = r.$el[0], r = !(!n.passiveListener || !a.passiveListeners) && {\n        passive: !1,\n        capture: !1\n      }, a = !(!n.passiveListener || !a.passiveListeners) && {\n        passive: !0,\n        capture: !1\n      }, s && (n.touch ? (s.addEventListener(t.start, o.scrollbar.onDragStart, r), s.addEventListener(t.move, o.scrollbar.onDragMove, r), s.addEventListener(t.end, o.scrollbar.onDragEnd, a)) : (s.addEventListener(i.start, o.scrollbar.onDragStart, r), e.addEventListener(i.move, o.scrollbar.onDragMove, r), e.addEventListener(i.end, o.scrollbar.onDragEnd, a))));\n    },\n    disableDraggable: function disableDraggable() {\n      var e,\n          t,\n          i,\n          n,\n          s,\n          r,\n          a,\n          o = this;\n      o.params.scrollbar.el && (e = y(), r = o.scrollbar, t = o.touchEventsTouch, i = o.touchEventsDesktop, a = o.params, n = o.support, s = r.$el[0], r = !(!n.passiveListener || !a.passiveListeners) && {\n        passive: !1,\n        capture: !1\n      }, a = !(!n.passiveListener || !a.passiveListeners) && {\n        passive: !0,\n        capture: !1\n      }, s && (n.touch ? (s.removeEventListener(t.start, o.scrollbar.onDragStart, r), s.removeEventListener(t.move, o.scrollbar.onDragMove, r), s.removeEventListener(t.end, o.scrollbar.onDragEnd, a)) : (s.removeEventListener(i.start, o.scrollbar.onDragStart, r), e.removeEventListener(i.move, o.scrollbar.onDragMove, r), e.removeEventListener(i.end, o.scrollbar.onDragEnd, a))));\n    },\n    init: function init() {\n      var e, t, i, n;\n      this.params.scrollbar.el && (e = this.scrollbar, n = this.$el, i = S((t = this.params.scrollbar).el), 0 === (n = (i = this.params.uniqueNavElements && \"string\" == typeof t.el && 1 < i.length && 1 === n.find(t.el).length ? n.find(t.el) : i).find(\".\" + this.params.scrollbar.dragClass)).length && (n = S('<div class=\"' + this.params.scrollbar.dragClass + '\"></div>'), i.append(n)), K(e, {\n        $el: i,\n        el: i[0],\n        $dragEl: n,\n        dragEl: n[0]\n      }), t.draggable && e.enableDraggable());\n    },\n    destroy: function destroy() {\n      this.scrollbar.disableDraggable();\n    }\n  },\n      V = {\n    setTransform: function setTransform(e, t) {\n      var i = this.rtl,\n          n = S(e),\n          s = i ? -1 : 1,\n          r = n.attr(\"data-swiper-parallax\") || \"0\",\n          a = n.attr(\"data-swiper-parallax-x\"),\n          o = n.attr(\"data-swiper-parallax-y\"),\n          e = n.attr(\"data-swiper-parallax-scale\"),\n          i = n.attr(\"data-swiper-parallax-opacity\");\n      a || o ? (a = a || \"0\", o = o || \"0\") : this.isHorizontal() ? (a = r, o = \"0\") : (o = r, a = \"0\"), a = 0 <= a.indexOf(\"%\") ? parseInt(a, 10) * t * s + \"%\" : a * t * s + \"px\", o = 0 <= o.indexOf(\"%\") ? parseInt(o, 10) * t + \"%\" : o * t + \"px\", null != i && (i = i - (i - 1) * (1 - Math.abs(t)), n[0].style.opacity = i), null == e ? n.transform(\"translate3d(\" + a + \", \" + o + \", 0px)\") : (t = e - (e - 1) * (1 - Math.abs(t)), n.transform(\"translate3d(\" + a + \", \" + o + \", 0px) scale(\" + t + \")\"));\n    },\n    setTranslate: function setTranslate() {\n      var n = this,\n          e = n.$el,\n          t = n.slides,\n          s = n.progress,\n          r = n.snapGrid;\n      e.children(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each(function (e) {\n        n.parallax.setTransform(e, s);\n      }), t.each(function (e, t) {\n        var i = e.progress;\n        1 < n.params.slidesPerGroup && \"auto\" !== n.params.slidesPerView && (i += Math.ceil(t / 2) - s * (r.length - 1)), i = Math.min(Math.max(i, -1), 1), S(e).find(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each(function (e) {\n          n.parallax.setTransform(e, i);\n        });\n      });\n    },\n    setTransition: function setTransition(i) {\n      void 0 === i && (i = this.params.speed), this.$el.find(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each(function (e) {\n        var t = S(e),\n            e = parseInt(t.attr(\"data-swiper-parallax-duration\"), 10) || i;\n        0 === i && (e = 0), t.transition(e);\n      });\n    }\n  },\n      _ = {\n    getDistanceBetweenTouches: function getDistanceBetweenTouches(e) {\n      if (e.targetTouches.length < 2) return 1;\n      var t = e.targetTouches[0].pageX,\n          i = e.targetTouches[0].pageY,\n          n = e.targetTouches[1].pageX,\n          e = e.targetTouches[1].pageY;\n      return Math.sqrt(Math.pow(n - t, 2) + Math.pow(e - i, 2));\n    },\n    onGestureStart: function onGestureStart(e) {\n      var t = this.support,\n          i = this.params.zoom,\n          n = this.zoom,\n          s = n.gesture;\n\n      if (n.fakeGestureTouched = !1, n.fakeGestureMoved = !1, !t.gestures) {\n        if (\"touchstart\" !== e.type || \"touchstart\" === e.type && e.targetTouches.length < 2) return;\n        n.fakeGestureTouched = !0, s.scaleStart = _.getDistanceBetweenTouches(e);\n      }\n\n      s.$slideEl && s.$slideEl.length || (s.$slideEl = S(e.target).closest(\".\" + this.params.slideClass), 0 === s.$slideEl.length && (s.$slideEl = this.slides.eq(this.activeIndex)), s.$imageEl = s.$slideEl.find(\"img, svg, canvas, picture, .swiper-zoom-target\"), s.$imageWrapEl = s.$imageEl.parent(\".\" + i.containerClass), s.maxRatio = s.$imageWrapEl.attr(\"data-swiper-zoom\") || i.maxRatio, 0 !== s.$imageWrapEl.length) ? (s.$imageEl && s.$imageEl.transition(0), this.zoom.isScaling = !0) : s.$imageEl = void 0;\n    },\n    onGestureChange: function onGestureChange(e) {\n      var t = this.support,\n          i = this.params.zoom,\n          n = this.zoom,\n          s = n.gesture;\n\n      if (!t.gestures) {\n        if (\"touchmove\" !== e.type || \"touchmove\" === e.type && e.targetTouches.length < 2) return;\n        n.fakeGestureMoved = !0, s.scaleMove = _.getDistanceBetweenTouches(e);\n      }\n\n      s.$imageEl && 0 !== s.$imageEl.length ? (t.gestures ? n.scale = e.scale * n.currentScale : n.scale = s.scaleMove / s.scaleStart * n.currentScale, n.scale > s.maxRatio && (n.scale = s.maxRatio - 1 + Math.pow(n.scale - s.maxRatio + 1, .5)), n.scale < i.minRatio && (n.scale = i.minRatio + 1 - Math.pow(i.minRatio - n.scale + 1, .5)), s.$imageEl.transform(\"translate3d(0,0,0) scale(\" + n.scale + \")\")) : \"gesturechange\" === e.type && n.onGestureStart(e);\n    },\n    onGestureEnd: function onGestureEnd(e) {\n      var t = this.device,\n          i = this.support,\n          n = this.params.zoom,\n          s = this.zoom,\n          r = s.gesture;\n\n      if (!i.gestures) {\n        if (!s.fakeGestureTouched || !s.fakeGestureMoved) return;\n        if (\"touchend\" !== e.type || \"touchend\" === e.type && e.changedTouches.length < 2 && !t.android) return;\n        s.fakeGestureTouched = !1, s.fakeGestureMoved = !1;\n      }\n\n      r.$imageEl && 0 !== r.$imageEl.length && (s.scale = Math.max(Math.min(s.scale, r.maxRatio), n.minRatio), r.$imageEl.transition(this.params.speed).transform(\"translate3d(0,0,0) scale(\" + s.scale + \")\"), s.currentScale = s.scale, s.isScaling = !1, 1 === s.scale && (r.$slideEl = void 0));\n    },\n    onTouchStart: function onTouchStart(e) {\n      var t = this.device,\n          i = this.zoom,\n          n = i.gesture,\n          i = i.image;\n      n.$imageEl && 0 !== n.$imageEl.length && (i.isTouched || (t.android && e.cancelable && e.preventDefault(), i.isTouched = !0, i.touchesStart.x = (\"touchstart\" === e.type ? e.targetTouches[0] : e).pageX, i.touchesStart.y = (\"touchstart\" === e.type ? e.targetTouches[0] : e).pageY));\n    },\n    onTouchMove: function onTouchMove(e) {\n      var t = this.zoom,\n          i = t.gesture,\n          n = t.image,\n          s = t.velocity;\n\n      if (i.$imageEl && 0 !== i.$imageEl.length && (this.allowClick = !1, n.isTouched && i.$slideEl)) {\n        n.isMoved || (n.width = i.$imageEl[0].offsetWidth, n.height = i.$imageEl[0].offsetHeight, n.startX = g(i.$imageWrapEl[0], \"x\") || 0, n.startY = g(i.$imageWrapEl[0], \"y\") || 0, i.slideWidth = i.$slideEl[0].offsetWidth, i.slideHeight = i.$slideEl[0].offsetHeight, i.$imageWrapEl.transition(0), this.rtl && (n.startX = -n.startX, n.startY = -n.startY));\n        var r = n.width * t.scale,\n            a = n.height * t.scale;\n\n        if (!(r < i.slideWidth && a < i.slideHeight)) {\n          if (n.minX = Math.min(i.slideWidth / 2 - r / 2, 0), n.maxX = -n.minX, n.minY = Math.min(i.slideHeight / 2 - a / 2, 0), n.maxY = -n.minY, n.touchesCurrent.x = (\"touchmove\" === e.type ? e.targetTouches[0] : e).pageX, n.touchesCurrent.y = (\"touchmove\" === e.type ? e.targetTouches[0] : e).pageY, !n.isMoved && !t.isScaling) {\n            if (this.isHorizontal() && (Math.floor(n.minX) === Math.floor(n.startX) && n.touchesCurrent.x < n.touchesStart.x || Math.floor(n.maxX) === Math.floor(n.startX) && n.touchesCurrent.x > n.touchesStart.x)) return void (n.isTouched = !1);\n            if (!this.isHorizontal() && (Math.floor(n.minY) === Math.floor(n.startY) && n.touchesCurrent.y < n.touchesStart.y || Math.floor(n.maxY) === Math.floor(n.startY) && n.touchesCurrent.y > n.touchesStart.y)) return void (n.isTouched = !1);\n          }\n\n          e.cancelable && e.preventDefault(), e.stopPropagation(), n.isMoved = !0, n.currentX = n.touchesCurrent.x - n.touchesStart.x + n.startX, n.currentY = n.touchesCurrent.y - n.touchesStart.y + n.startY, n.currentX < n.minX && (n.currentX = n.minX + 1 - Math.pow(n.minX - n.currentX + 1, .8)), n.currentX > n.maxX && (n.currentX = n.maxX - 1 + Math.pow(n.currentX - n.maxX + 1, .8)), n.currentY < n.minY && (n.currentY = n.minY + 1 - Math.pow(n.minY - n.currentY + 1, .8)), n.currentY > n.maxY && (n.currentY = n.maxY - 1 + Math.pow(n.currentY - n.maxY + 1, .8)), s.prevPositionX || (s.prevPositionX = n.touchesCurrent.x), s.prevPositionY || (s.prevPositionY = n.touchesCurrent.y), s.prevTime || (s.prevTime = Date.now()), s.x = (n.touchesCurrent.x - s.prevPositionX) / (Date.now() - s.prevTime) / 2, s.y = (n.touchesCurrent.y - s.prevPositionY) / (Date.now() - s.prevTime) / 2, Math.abs(n.touchesCurrent.x - s.prevPositionX) < 2 && (s.x = 0), Math.abs(n.touchesCurrent.y - s.prevPositionY) < 2 && (s.y = 0), s.prevPositionX = n.touchesCurrent.x, s.prevPositionY = n.touchesCurrent.y, s.prevTime = Date.now(), i.$imageWrapEl.transform(\"translate3d(\" + n.currentX + \"px, \" + n.currentY + \"px,0)\");\n        }\n      }\n    },\n    onTouchEnd: function onTouchEnd() {\n      var e = this.zoom,\n          t = e.gesture,\n          i = e.image,\n          n = e.velocity;\n\n      if (t.$imageEl && 0 !== t.$imageEl.length) {\n        if (!i.isTouched || !i.isMoved) return i.isTouched = !1, void (i.isMoved = !1);\n        i.isTouched = !1, i.isMoved = !1;\n        var s = 300,\n            r = 300,\n            a = n.x * s,\n            o = i.currentX + a,\n            a = n.y * r,\n            a = i.currentY + a;\n        0 !== n.x && (s = Math.abs((o - i.currentX) / n.x)), 0 !== n.y && (r = Math.abs((a - i.currentY) / n.y));\n        r = Math.max(s, r);\n        i.currentX = o, i.currentY = a;\n        a = i.width * e.scale, e = i.height * e.scale;\n        i.minX = Math.min(t.slideWidth / 2 - a / 2, 0), i.maxX = -i.minX, i.minY = Math.min(t.slideHeight / 2 - e / 2, 0), i.maxY = -i.minY, i.currentX = Math.max(Math.min(i.currentX, i.maxX), i.minX), i.currentY = Math.max(Math.min(i.currentY, i.maxY), i.minY), t.$imageWrapEl.transition(r).transform(\"translate3d(\" + i.currentX + \"px, \" + i.currentY + \"px,0)\");\n      }\n    },\n    onTransitionEnd: function onTransitionEnd() {\n      var e = this.zoom,\n          t = e.gesture;\n      t.$slideEl && this.previousIndex !== this.activeIndex && (t.$imageEl && t.$imageEl.transform(\"translate3d(0,0,0) scale(1)\"), t.$imageWrapEl && t.$imageWrapEl.transform(\"translate3d(0,0,0)\"), e.scale = 1, e.currentScale = 1, t.$slideEl = void 0, t.$imageEl = void 0, t.$imageWrapEl = void 0);\n    },\n    toggle: function toggle(e) {\n      var t = this.zoom;\n      t.scale && 1 !== t.scale ? t.out() : t[\"in\"](e);\n    },\n    \"in\": function _in(e) {\n      var t,\n          i,\n          n,\n          s = U(),\n          r = this.zoom,\n          a = this.params.zoom,\n          o = r.gesture,\n          l = r.image;\n      o.$slideEl || (this.params.virtual && this.params.virtual.enabled && this.virtual ? o.$slideEl = this.$wrapperEl.children(\".\" + this.params.slideActiveClass) : o.$slideEl = this.slides.eq(this.activeIndex), o.$imageEl = o.$slideEl.find(\"img, svg, canvas, picture, .swiper-zoom-target\"), o.$imageWrapEl = o.$imageEl.parent(\".\" + a.containerClass)), o.$imageEl && 0 !== o.$imageEl.length && (o.$slideEl.addClass(\"\" + a.zoomedSlideClass), l = void 0 === l.touchesStart.x && e ? (t = (\"touchend\" === e.type ? e.changedTouches[0] : e).pageX, (\"touchend\" === e.type ? e.changedTouches[0] : e).pageY) : (t = l.touchesStart.x, l.touchesStart.y), r.scale = o.$imageWrapEl.attr(\"data-swiper-zoom\") || a.maxRatio, r.currentScale = o.$imageWrapEl.attr(\"data-swiper-zoom\") || a.maxRatio, e ? (a = o.$slideEl[0].offsetWidth, e = o.$slideEl[0].offsetHeight, i = o.$slideEl.offset().left + s.scrollX + a / 2 - t, n = o.$slideEl.offset().top + s.scrollY + e / 2 - l, s = o.$imageEl[0].offsetWidth, l = o.$imageEl[0].offsetHeight, s = s * r.scale, l = l * r.scale, s = -(a = Math.min(a / 2 - s / 2, 0)), l = -(e = Math.min(e / 2 - l / 2, 0)), s < (i = (i = i * r.scale) < a ? a : i) && (i = s), l < (n = (n = n * r.scale) < e ? e : n) && (n = l)) : n = i = 0, o.$imageWrapEl.transition(300).transform(\"translate3d(\" + i + \"px, \" + n + \"px,0)\"), o.$imageEl.transition(300).transform(\"translate3d(0,0,0) scale(\" + r.scale + \")\"));\n    },\n    out: function out() {\n      var e = this.zoom,\n          t = this.params.zoom,\n          i = e.gesture;\n      i.$slideEl || (this.params.virtual && this.params.virtual.enabled && this.virtual ? i.$slideEl = this.$wrapperEl.children(\".\" + this.params.slideActiveClass) : i.$slideEl = this.slides.eq(this.activeIndex), i.$imageEl = i.$slideEl.find(\"img, svg, canvas, picture, .swiper-zoom-target\"), i.$imageWrapEl = i.$imageEl.parent(\".\" + t.containerClass)), i.$imageEl && 0 !== i.$imageEl.length && (e.scale = 1, e.currentScale = 1, i.$imageWrapEl.transition(300).transform(\"translate3d(0,0,0)\"), i.$imageEl.transition(300).transform(\"translate3d(0,0,0) scale(1)\"), i.$slideEl.removeClass(\"\" + t.zoomedSlideClass), i.$slideEl = void 0);\n    },\n    toggleGestures: function toggleGestures(e) {\n      var t = this.zoom,\n          i = t.slideSelector,\n          n = t.passiveListener;\n      this.$wrapperEl[e](\"gesturestart\", i, t.onGestureStart, n), this.$wrapperEl[e](\"gesturechange\", i, t.onGestureChange, n), this.$wrapperEl[e](\"gestureend\", i, t.onGestureEnd, n);\n    },\n    enableGestures: function enableGestures() {\n      this.zoom.gesturesEnabled || (this.zoom.gesturesEnabled = !0, this.zoom.toggleGestures(\"on\"));\n    },\n    disableGestures: function disableGestures() {\n      this.zoom.gesturesEnabled && (this.zoom.gesturesEnabled = !1, this.zoom.toggleGestures(\"off\"));\n    },\n    enable: function enable() {\n      var e,\n          t,\n          i,\n          n = this,\n          s = n.support,\n          r = n.zoom;\n      r.enabled || (r.enabled = !0, e = !(\"touchstart\" !== n.touchEvents.start || !s.passiveListener || !n.params.passiveListeners) && {\n        passive: !0,\n        capture: !1\n      }, t = !s.passiveListener || {\n        passive: !1,\n        capture: !0\n      }, i = \".\" + n.params.slideClass, n.zoom.passiveListener = e, n.zoom.slideSelector = i, s.gestures ? (n.$wrapperEl.on(n.touchEvents.start, n.zoom.enableGestures, e), n.$wrapperEl.on(n.touchEvents.end, n.zoom.disableGestures, e)) : \"touchstart\" === n.touchEvents.start && (n.$wrapperEl.on(n.touchEvents.start, i, r.onGestureStart, e), n.$wrapperEl.on(n.touchEvents.move, i, r.onGestureChange, t), n.$wrapperEl.on(n.touchEvents.end, i, r.onGestureEnd, e), n.touchEvents.cancel && n.$wrapperEl.on(n.touchEvents.cancel, i, r.onGestureEnd, e)), n.$wrapperEl.on(n.touchEvents.move, \".\" + n.params.zoom.containerClass, r.onTouchMove, t));\n    },\n    disable: function disable() {\n      var e,\n          t,\n          i,\n          n,\n          s = this,\n          r = s.zoom;\n      r.enabled && (e = s.support, s.zoom.enabled = !1, t = !(\"touchstart\" !== s.touchEvents.start || !e.passiveListener || !s.params.passiveListeners) && {\n        passive: !0,\n        capture: !1\n      }, i = !e.passiveListener || {\n        passive: !1,\n        capture: !0\n      }, n = \".\" + s.params.slideClass, e.gestures ? (s.$wrapperEl.off(s.touchEvents.start, s.zoom.enableGestures, t), s.$wrapperEl.off(s.touchEvents.end, s.zoom.disableGestures, t)) : \"touchstart\" === s.touchEvents.start && (s.$wrapperEl.off(s.touchEvents.start, n, r.onGestureStart, t), s.$wrapperEl.off(s.touchEvents.move, n, r.onGestureChange, i), s.$wrapperEl.off(s.touchEvents.end, n, r.onGestureEnd, t), s.touchEvents.cancel && s.$wrapperEl.off(s.touchEvents.cancel, n, r.onGestureEnd, t)), s.$wrapperEl.off(s.touchEvents.move, \".\" + s.params.zoom.containerClass, r.onTouchMove, i));\n    }\n  },\n      Q = {\n    loadInSlide: function loadInSlide(e, l) {\n      void 0 === l && (l = !0);\n      var d,\n          c = this,\n          u = c.params.lazy;\n      void 0 !== e && 0 !== c.slides.length && (e = (d = c.virtual && c.params.virtual.enabled ? c.$wrapperEl.children(\".\" + c.params.slideClass + '[data-swiper-slide-index=\"' + e + '\"]') : c.slides.eq(e)).find(\".\" + u.elementClass + \":not(.\" + u.loadedClass + \"):not(.\" + u.loadingClass + \")\"), !d.hasClass(u.elementClass) || d.hasClass(u.loadedClass) || d.hasClass(u.loadingClass) || e.push(d[0]), 0 !== e.length && e.each(function (e) {\n        var i = S(e);\n        i.addClass(u.loadingClass);\n        var n = i.attr(\"data-background\"),\n            s = i.attr(\"data-src\"),\n            r = i.attr(\"data-srcset\"),\n            a = i.attr(\"data-sizes\"),\n            o = i.parent(\"picture\");\n        c.loadImage(i[0], s || n, r, a, !1, function () {\n          var e, t;\n          null == c || !c || c && !c.params || c.destroyed || (n ? (i.css(\"background-image\", 'url(\"' + n + '\")'), i.removeAttr(\"data-background\")) : (r && (i.attr(\"srcset\", r), i.removeAttr(\"data-srcset\")), a && (i.attr(\"sizes\", a), i.removeAttr(\"data-sizes\")), o.length && o.children(\"source\").each(function (e) {\n            e = S(e);\n            e.attr(\"data-srcset\") && (e.attr(\"srcset\", e.attr(\"data-srcset\")), e.removeAttr(\"data-srcset\"));\n          }), s && (i.attr(\"src\", s), i.removeAttr(\"data-src\"))), i.addClass(u.loadedClass).removeClass(u.loadingClass), d.find(\".\" + u.preloaderClass).remove(), c.params.loop && l && (t = d.attr(\"data-swiper-slide-index\"), d.hasClass(c.params.slideDuplicateClass) ? (e = c.$wrapperEl.children('[data-swiper-slide-index=\"' + t + '\"]:not(.' + c.params.slideDuplicateClass + \")\"), c.lazy.loadInSlide(e.index(), !1)) : (t = c.$wrapperEl.children(\".\" + c.params.slideDuplicateClass + '[data-swiper-slide-index=\"' + t + '\"]'), c.lazy.loadInSlide(t.index(), !1))), c.emit(\"lazyImageReady\", d[0], i[0]), c.params.autoHeight && c.updateAutoHeight());\n        }), c.emit(\"lazyImageLoad\", d[0], i[0]);\n      }));\n    },\n    load: function load() {\n      var t = this,\n          i = t.$wrapperEl,\n          n = t.params,\n          s = t.slides,\n          e = t.activeIndex,\n          r = t.virtual && n.virtual.enabled,\n          a = n.lazy,\n          o = n.slidesPerView;\n\n      function l(e) {\n        if (r) {\n          if (i.children(\".\" + n.slideClass + '[data-swiper-slide-index=\"' + e + '\"]').length) return 1;\n        } else if (s[e]) return 1;\n      }\n\n      function d(e) {\n        return r ? S(e).attr(\"data-swiper-slide-index\") : S(e).index();\n      }\n\n      if (\"auto\" === o && (o = 0), t.lazy.initialImageLoaded || (t.lazy.initialImageLoaded = !0), t.params.watchSlidesVisibility) i.children(\".\" + n.slideVisibleClass).each(function (e) {\n        e = r ? S(e).attr(\"data-swiper-slide-index\") : S(e).index();\n        t.lazy.loadInSlide(e);\n      });else if (1 < o) for (var c = e; c < e + o; c += 1) {\n        l(c) && t.lazy.loadInSlide(c);\n      } else t.lazy.loadInSlide(e);\n      if (a.loadPrevNext) if (1 < o || a.loadPrevNextAmount && 1 < a.loadPrevNextAmount) {\n        for (var u = a.loadPrevNextAmount, a = o, p = Math.min(e + a + Math.max(u, a), s.length), u = Math.max(e - Math.max(a, u), 0), h = e + o; h < p; h += 1) {\n          l(h) && t.lazy.loadInSlide(h);\n        }\n\n        for (var f = u; f < e; f += 1) {\n          l(f) && t.lazy.loadInSlide(f);\n        }\n      } else {\n        u = i.children(\".\" + n.slideNextClass);\n        0 < u.length && t.lazy.loadInSlide(d(u));\n        u = i.children(\".\" + n.slidePrevClass);\n        0 < u.length && t.lazy.loadInSlide(d(u));\n      }\n    },\n    checkInViewOnLoad: function checkInViewOnLoad() {\n      var e = U(),\n          t = this;\n\n      if (t && !t.destroyed) {\n        var i = t.params.lazy.scrollingElement ? S(t.params.lazy.scrollingElement) : S(e),\n            n = i[0] === e,\n            s = n ? e.innerWidth : i[0].offsetWidth,\n            r = n ? e.innerHeight : i[0].offsetHeight,\n            e = t.$el.offset(),\n            a = !1;\n        t.rtlTranslate && (e.left -= t.$el[0].scrollLeft);\n\n        for (var o = [[e.left, e.top], [e.left + t.width, e.top], [e.left, e.top + t.height], [e.left + t.width, e.top + t.height]], l = 0; l < o.length; l += 1) {\n          var d = o[l];\n          0 <= d[0] && d[0] <= s && 0 <= d[1] && d[1] <= r && (0 === d[0] && 0 === d[1] || (a = !0));\n        }\n\n        a ? (t.lazy.load(), i.off(\"scroll\", t.lazy.checkInViewOnLoad)) : t.lazy.scrollHandlerAttached || (t.lazy.scrollHandlerAttached = !0, i.on(\"scroll\", t.lazy.checkInViewOnLoad));\n      }\n    }\n  },\n      J = {\n    LinearSpline: function LinearSpline(e, t) {\n      var i, n, s, r, a;\n      return this.x = e, this.y = t, this.lastIndex = e.length - 1, this.interpolate = function (e) {\n        return e ? (a = function (e, t) {\n          for (n = -1, i = e.length; 1 < i - n;) {\n            e[s = i + n >> 1] <= t ? n = s : i = s;\n          }\n\n          return i;\n        }(this.x, e), r = a - 1, (e - this.x[r]) * (this.y[a] - this.y[r]) / (this.x[a] - this.x[r]) + this.y[r]) : 0;\n      }, this;\n    },\n    getInterpolateFunction: function getInterpolateFunction(e) {\n      this.controller.spline || (this.controller.spline = this.params.loop ? new J.LinearSpline(this.slidesGrid, e.slidesGrid) : new J.LinearSpline(this.snapGrid, e.snapGrid));\n    },\n    setTranslate: function setTranslate(e, t) {\n      var i,\n          n,\n          s = this,\n          r = s.controller.control,\n          a = s.constructor;\n\n      function o(e) {\n        var t = s.rtlTranslate ? -s.translate : s.translate;\n        \"slide\" === s.params.controller.by && (s.controller.getInterpolateFunction(e), n = -s.controller.spline.interpolate(-t)), n && \"container\" !== s.params.controller.by || (i = (e.maxTranslate() - e.minTranslate()) / (s.maxTranslate() - s.minTranslate()), n = (t - s.minTranslate()) * i + e.minTranslate()), s.params.controller.inverse && (n = e.maxTranslate() - n), e.updateProgress(n), e.setTranslate(n, s), e.updateActiveIndex(), e.updateSlidesClasses();\n      }\n\n      if (Array.isArray(r)) for (var l = 0; l < r.length; l += 1) {\n        r[l] !== t && r[l] instanceof a && o(r[l]);\n      } else r instanceof a && t !== r && o(r);\n    },\n    setTransition: function setTransition(t, e) {\n      var i,\n          n = this,\n          s = n.constructor,\n          r = n.controller.control;\n\n      function a(e) {\n        e.setTransition(t, n), 0 !== t && (e.transitionStart(), e.params.autoHeight && E(function () {\n          e.updateAutoHeight();\n        }), e.$wrapperEl.transitionEnd(function () {\n          r && (e.params.loop && \"slide\" === n.params.controller.by && e.loopFix(), e.transitionEnd());\n        }));\n      }\n\n      if (Array.isArray(r)) for (i = 0; i < r.length; i += 1) {\n        r[i] !== e && r[i] instanceof s && a(r[i]);\n      } else r instanceof s && e !== r && a(r);\n    }\n  },\n      Z = {\n    getRandomNumber: function getRandomNumber(e) {\n      return \"x\".repeat(e = void 0 === e ? 16 : e).replace(/x/g, function () {\n        return Math.round(16 * Math.random()).toString(16);\n      });\n    },\n    makeElFocusable: function makeElFocusable(e) {\n      return e.attr(\"tabIndex\", \"0\"), e;\n    },\n    makeElNotFocusable: function makeElNotFocusable(e) {\n      return e.attr(\"tabIndex\", \"-1\"), e;\n    },\n    addElRole: function addElRole(e, t) {\n      return e.attr(\"role\", t), e;\n    },\n    addElRoleDescription: function addElRoleDescription(e, t) {\n      return e.attr(\"aria-role-description\", t), e;\n    },\n    addElControls: function addElControls(e, t) {\n      return e.attr(\"aria-controls\", t), e;\n    },\n    addElLabel: function addElLabel(e, t) {\n      return e.attr(\"aria-label\", t), e;\n    },\n    addElId: function addElId(e, t) {\n      return e.attr(\"id\", t), e;\n    },\n    addElLive: function addElLive(e, t) {\n      return e.attr(\"aria-live\", t), e;\n    },\n    disableEl: function disableEl(e) {\n      return e.attr(\"aria-disabled\", !0), e;\n    },\n    enableEl: function enableEl(e) {\n      return e.attr(\"aria-disabled\", !1), e;\n    },\n    onEnterKey: function onEnterKey(e) {\n      var t = this,\n          i = t.params.a11y;\n      13 === e.keyCode && (e = S(e.target), t.navigation && t.navigation.$nextEl && e.is(t.navigation.$nextEl) && (t.isEnd && !t.params.loop || t.slideNext(), t.isEnd ? t.a11y.notify(i.lastSlideMessage) : t.a11y.notify(i.nextSlideMessage)), t.navigation && t.navigation.$prevEl && e.is(t.navigation.$prevEl) && (t.isBeginning && !t.params.loop || t.slidePrev(), t.isBeginning ? t.a11y.notify(i.firstSlideMessage) : t.a11y.notify(i.prevSlideMessage)), t.pagination && e.is(\".\" + t.params.pagination.bulletClass.replace(/ /g, \".\")) && e[0].click());\n    },\n    notify: function notify(e) {\n      var t = this.a11y.liveRegion;\n      0 !== t.length && (t.html(\"\"), t.html(e));\n    },\n    updateNavigation: function updateNavigation() {\n      var e,\n          t,\n          i = this;\n      !i.params.loop && i.navigation && (e = (t = i.navigation).$nextEl, (t = t.$prevEl) && 0 < t.length && (i.isBeginning ? (i.a11y.disableEl(t), i.a11y.makeElNotFocusable(t)) : (i.a11y.enableEl(t), i.a11y.makeElFocusable(t))), e && 0 < e.length && (i.isEnd ? (i.a11y.disableEl(e), i.a11y.makeElNotFocusable(e)) : (i.a11y.enableEl(e), i.a11y.makeElFocusable(e))));\n    },\n    updatePagination: function updatePagination() {\n      var t = this,\n          i = t.params.a11y;\n      t.pagination && t.params.pagination.clickable && t.pagination.bullets && t.pagination.bullets.length && t.pagination.bullets.each(function (e) {\n        e = S(e);\n        t.a11y.makeElFocusable(e), t.params.pagination.renderBullet || (t.a11y.addElRole(e, \"button\"), t.a11y.addElLabel(e, i.paginationBulletMessage.replace(/\\{\\{index\\}\\}/, e.index() + 1)));\n      });\n    },\n    init: function init() {\n      var t = this,\n          e = t.params.a11y;\n      t.$el.append(t.a11y.liveRegion);\n      var i = t.$el;\n      e.containerRoleDescriptionMessage && t.a11y.addElRoleDescription(i, e.containerRoleDescriptionMessage), e.containerMessage && t.a11y.addElLabel(i, e.containerMessage);\n      var n,\n          s,\n          r = t.$wrapperEl,\n          a = r.attr(\"id\") || \"swiper-wrapper-\" + t.a11y.getRandomNumber(16);\n      t.a11y.addElId(r, a), i = t.params.autoplay && t.params.autoplay.enabled ? \"off\" : \"polite\", t.a11y.addElLive(r, i), e.itemRoleDescriptionMessage && t.a11y.addElRoleDescription(S(t.slides), e.itemRoleDescriptionMessage), t.a11y.addElRole(S(t.slides), \"group\"), t.slides.each(function (e) {\n        e = S(e);\n        t.a11y.addElLabel(e, e.index() + 1 + \" / \" + t.slides.length);\n      }), t.navigation && t.navigation.$nextEl && (n = t.navigation.$nextEl), t.navigation && t.navigation.$prevEl && (s = t.navigation.$prevEl), n && n.length && (t.a11y.makeElFocusable(n), \"BUTTON\" !== n[0].tagName && (t.a11y.addElRole(n, \"button\"), n.on(\"keydown\", t.a11y.onEnterKey)), t.a11y.addElLabel(n, e.nextSlideMessage), t.a11y.addElControls(n, a)), s && s.length && (t.a11y.makeElFocusable(s), \"BUTTON\" !== s[0].tagName && (t.a11y.addElRole(s, \"button\"), s.on(\"keydown\", t.a11y.onEnterKey)), t.a11y.addElLabel(s, e.prevSlideMessage), t.a11y.addElControls(s, a)), t.pagination && t.params.pagination.clickable && t.pagination.bullets && t.pagination.bullets.length && t.pagination.$el.on(\"keydown\", \".\" + t.params.pagination.bulletClass.replace(/ /g, \".\"), t.a11y.onEnterKey);\n    },\n    destroy: function destroy() {\n      var e,\n          t,\n          i = this;\n      i.a11y.liveRegion && 0 < i.a11y.liveRegion.length && i.a11y.liveRegion.remove(), i.navigation && i.navigation.$nextEl && (e = i.navigation.$nextEl), i.navigation && i.navigation.$prevEl && (t = i.navigation.$prevEl), e && e.off(\"keydown\", i.a11y.onEnterKey), t && t.off(\"keydown\", i.a11y.onEnterKey), i.pagination && i.params.pagination.clickable && i.pagination.bullets && i.pagination.bullets.length && i.pagination.$el.off(\"keydown\", \".\" + i.params.pagination.bulletClass.replace(/ /g, \".\"), i.a11y.onEnterKey);\n    }\n  },\n      ee = {\n    init: function init() {\n      var e = U();\n\n      if (this.params.history) {\n        if (!e.history || !e.history.pushState) return this.params.history.enabled = !1, void (this.params.hashNavigation.enabled = !0);\n        var t = this.history;\n        t.initialized = !0, t.paths = ee.getPathValues(this.params.url), (t.paths.key || t.paths.value) && (t.scrollToSlide(0, t.paths.value, this.params.runCallbacksOnInit), this.params.history.replaceState || e.addEventListener(\"popstate\", this.history.setHistoryPopState));\n      }\n    },\n    destroy: function destroy() {\n      var e = U();\n      this.params.history.replaceState || e.removeEventListener(\"popstate\", this.history.setHistoryPopState);\n    },\n    setHistoryPopState: function setHistoryPopState() {\n      this.history.paths = ee.getPathValues(this.params.url), this.history.scrollToSlide(this.params.speed, this.history.paths.value, !1);\n    },\n    getPathValues: function getPathValues(e) {\n      var t = U(),\n          e = (e ? new URL(e) : t.location).pathname.slice(1).split(\"/\").filter(function (e) {\n        return \"\" !== e;\n      }),\n          t = e.length;\n      return {\n        key: e[t - 2],\n        value: e[t - 1]\n      };\n    },\n    setHistory: function setHistory(e, t) {\n      var i,\n          n = U();\n      this.history.initialized && this.params.history.enabled && (i = this.params.url ? new URL(this.params.url) : n.location, t = this.slides.eq(t), t = ee.slugify(t.attr(\"data-history\")), i.pathname.includes(e) || (t = e + \"/\" + t), (e = n.history.state) && e.value === t || (this.params.history.replaceState ? n.history.replaceState({\n        value: t\n      }, null, t) : n.history.pushState({\n        value: t\n      }, null, t)));\n    },\n    slugify: function slugify(e) {\n      return e.toString().replace(/\\s+/g, \"-\").replace(/[^\\w-]+/g, \"\").replace(/--+/g, \"-\").replace(/^-+/, \"\").replace(/-+$/, \"\");\n    },\n    scrollToSlide: function scrollToSlide(e, t, i) {\n      if (t) for (var n = 0, s = this.slides.length; n < s; n += 1) {\n        var r = this.slides.eq(n);\n        ee.slugify(r.attr(\"data-history\")) !== t || r.hasClass(this.params.slideDuplicateClass) || (r = r.index(), this.slideTo(r, e, i));\n      } else this.slideTo(0, e, i);\n    }\n  },\n      te = {\n    onHashCange: function onHashCange() {\n      var e = y();\n      this.emit(\"hashChange\");\n      e = e.location.hash.replace(\"#\", \"\");\n      e === this.slides.eq(this.activeIndex).attr(\"data-hash\") || void 0 !== (e = this.$wrapperEl.children(\".\" + this.params.slideClass + '[data-hash=\"' + e + '\"]').index()) && this.slideTo(e);\n    },\n    setHash: function setHash() {\n      var e = U(),\n          t = y();\n      this.hashNavigation.initialized && this.params.hashNavigation.enabled && (this.params.hashNavigation.replaceState && e.history && e.history.replaceState ? e.history.replaceState(null, null, \"#\" + this.slides.eq(this.activeIndex).attr(\"data-hash\") || 0) : (e = (e = this.slides.eq(this.activeIndex)).attr(\"data-hash\") || e.attr(\"data-history\"), t.location.hash = e || \"\"), this.emit(\"hashSet\"));\n    },\n    init: function init() {\n      var e = this,\n          t = y(),\n          i = U();\n\n      if (!(!e.params.hashNavigation.enabled || e.params.history && e.params.history.enabled)) {\n        e.hashNavigation.initialized = !0;\n        var n = t.location.hash.replace(\"#\", \"\");\n        if (n) for (var s = 0, r = e.slides.length; s < r; s += 1) {\n          var a = e.slides.eq(s);\n          (a.attr(\"data-hash\") || a.attr(\"data-history\")) !== n || a.hasClass(e.params.slideDuplicateClass) || (a = a.index(), e.slideTo(a, 0, e.params.runCallbacksOnInit, !0));\n        }\n        e.params.hashNavigation.watchState && S(i).on(\"hashchange\", e.hashNavigation.onHashCange);\n      }\n    },\n    destroy: function destroy() {\n      var e = U();\n      this.params.hashNavigation.watchState && S(e).off(\"hashchange\", this.hashNavigation.onHashCange);\n    }\n  },\n      ie = {\n    run: function run() {\n      var t = this,\n          e = t.slides.eq(t.activeIndex),\n          i = t.params.autoplay.delay;\n      e.attr(\"data-swiper-autoplay\") && (i = e.attr(\"data-swiper-autoplay\") || t.params.autoplay.delay), clearTimeout(t.autoplay.timeout), t.autoplay.timeout = E(function () {\n        var e;\n        t.params.autoplay.reverseDirection ? t.params.loop ? (t.loopFix(), e = t.slidePrev(t.params.speed, !0, !0), t.emit(\"autoplay\")) : t.isBeginning ? t.params.autoplay.stopOnLastSlide ? t.autoplay.stop() : (e = t.slideTo(t.slides.length - 1, t.params.speed, !0, !0), t.emit(\"autoplay\")) : (e = t.slidePrev(t.params.speed, !0, !0), t.emit(\"autoplay\")) : t.params.loop ? (t.loopFix(), e = t.slideNext(t.params.speed, !0, !0), t.emit(\"autoplay\")) : t.isEnd ? t.params.autoplay.stopOnLastSlide ? t.autoplay.stop() : (e = t.slideTo(0, t.params.speed, !0, !0), t.emit(\"autoplay\")) : (e = t.slideNext(t.params.speed, !0, !0), t.emit(\"autoplay\")), (t.params.cssMode && t.autoplay.running || !1 === e) && t.autoplay.run();\n      }, i);\n    },\n    start: function start() {\n      return void 0 === this.autoplay.timeout && !this.autoplay.running && (this.autoplay.running = !0, this.emit(\"autoplayStart\"), this.autoplay.run(), !0);\n    },\n    stop: function stop() {\n      return !!this.autoplay.running && void 0 !== this.autoplay.timeout && (this.autoplay.timeout && (clearTimeout(this.autoplay.timeout), this.autoplay.timeout = void 0), this.autoplay.running = !1, this.emit(\"autoplayStop\"), !0);\n    },\n    pause: function pause(e) {\n      var t = this;\n      t.autoplay.running && (t.autoplay.paused || (t.autoplay.timeout && clearTimeout(t.autoplay.timeout), t.autoplay.paused = !0, 0 !== e && t.params.autoplay.waitForTransition ? (t.$wrapperEl[0].addEventListener(\"transitionend\", t.autoplay.onTransitionEnd), t.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\", t.autoplay.onTransitionEnd)) : (t.autoplay.paused = !1, t.autoplay.run())));\n    },\n    onVisibilityChange: function onVisibilityChange() {\n      var e = y();\n      \"hidden\" === e.visibilityState && this.autoplay.running && this.autoplay.pause(), \"visible\" === e.visibilityState && this.autoplay.paused && (this.autoplay.run(), this.autoplay.paused = !1);\n    },\n    onTransitionEnd: function onTransitionEnd(e) {\n      var t = this;\n      t && !t.destroyed && t.$wrapperEl && e.target === t.$wrapperEl[0] && (t.$wrapperEl[0].removeEventListener(\"transitionend\", t.autoplay.onTransitionEnd), t.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\", t.autoplay.onTransitionEnd), t.autoplay.paused = !1, t.autoplay.running ? t.autoplay.run() : t.autoplay.stop());\n    }\n  },\n      ne = {\n    setTranslate: function setTranslate() {\n      for (var e = this.slides, t = 0; t < e.length; t += 1) {\n        var i = this.slides.eq(t),\n            n = -i[0].swiperSlideOffset;\n        this.params.virtualTranslate || (n -= this.translate);\n        var s = 0;\n        this.isHorizontal() || (s = n, n = 0);\n        var r = this.params.fadeEffect.crossFade ? Math.max(1 - Math.abs(i[0].progress), 0) : 1 + Math.min(Math.max(i[0].progress, -1), 0);\n        i.css({\n          opacity: r\n        }).transform(\"translate3d(\" + n + \"px, \" + s + \"px, 0px)\");\n      }\n    },\n    setTransition: function setTransition(e) {\n      var i,\n          n = this,\n          t = n.slides,\n          s = n.$wrapperEl;\n      t.transition(e), n.params.virtualTranslate && 0 !== e && (i = !1, t.transitionEnd(function () {\n        if (!i && n && !n.destroyed) {\n          i = !0, n.animating = !1;\n\n          for (var e = [\"webkitTransitionEnd\", \"transitionend\"], t = 0; t < e.length; t += 1) {\n            s.trigger(e[t]);\n          }\n        }\n      }));\n    }\n  },\n      se = {\n    setTranslate: function setTranslate() {\n      var e,\n          t = this,\n          i = t.$el,\n          n = t.$wrapperEl,\n          s = t.slides,\n          r = t.width,\n          a = t.height,\n          o = t.rtlTranslate,\n          l = t.size,\n          d = t.browser,\n          c = t.params.cubeEffect,\n          u = t.isHorizontal(),\n          p = t.virtual && t.params.virtual.enabled,\n          h = 0;\n      c.shadow && (u ? (0 === (e = n.find(\".swiper-cube-shadow\")).length && (e = S('<div class=\"swiper-cube-shadow\"></div>'), n.append(e)), e.css({\n        height: r + \"px\"\n      })) : 0 === (e = i.find(\".swiper-cube-shadow\")).length && (e = S('<div class=\"swiper-cube-shadow\"></div>'), i.append(e)));\n\n      for (var f, m = 0; m < s.length; m += 1) {\n        var v = s.eq(m),\n            g = m,\n            y = 90 * (g = p ? parseInt(v.attr(\"data-swiper-slide-index\"), 10) : g),\n            b = Math.floor(y / 360);\n        o && (y = -y, b = Math.floor(-y / 360));\n        var w = Math.max(Math.min(v[0].progress, 1), -1),\n            x = 0,\n            T = 0,\n            C = 0;\n        g % 4 == 0 ? (x = 4 * -b * l, C = 0) : (g - 1) % 4 == 0 ? (x = 0, C = 4 * -b * l) : (g - 2) % 4 == 0 ? (x = l + 4 * b * l, C = l) : (g - 3) % 4 == 0 && (x = -l, C = 3 * l + 4 * l * b), o && (x = -x), u || (T = x, x = 0);\n        C = \"rotateX(\" + (u ? 0 : -y) + \"deg) rotateY(\" + (u ? y : 0) + \"deg) translate3d(\" + x + \"px, \" + T + \"px, \" + C + \"px)\";\n        w <= 1 && -1 < w && (h = o ? 90 * -g - 90 * w : 90 * g + 90 * w), v.transform(C), c.slideShadows && (g = u ? v.find(\".swiper-slide-shadow-left\") : v.find(\".swiper-slide-shadow-top\"), C = u ? v.find(\".swiper-slide-shadow-right\") : v.find(\".swiper-slide-shadow-bottom\"), 0 === g.length && (g = S('<div class=\"swiper-slide-shadow-' + (u ? \"left\" : \"top\") + '\"></div>'), v.append(g)), 0 === C.length && (C = S('<div class=\"swiper-slide-shadow-' + (u ? \"right\" : \"bottom\") + '\"></div>'), v.append(C)), g.length && (g[0].style.opacity = Math.max(-w, 0)), C.length && (C[0].style.opacity = Math.max(w, 0)));\n      }\n\n      n.css({\n        \"-webkit-transform-origin\": \"50% 50% -\" + l / 2 + \"px\",\n        \"-moz-transform-origin\": \"50% 50% -\" + l / 2 + \"px\",\n        \"-ms-transform-origin\": \"50% 50% -\" + l / 2 + \"px\",\n        \"transform-origin\": \"50% 50% -\" + l / 2 + \"px\"\n      }), c.shadow && (u ? e.transform(\"translate3d(0px, \" + (r / 2 + c.shadowOffset) + \"px, \" + -r / 2 + \"px) rotateX(90deg) rotateZ(0deg) scale(\" + c.shadowScale + \")\") : (f = Math.abs(h) - 90 * Math.floor(Math.abs(h) / 90), i = 1.5 - (Math.sin(2 * f * Math.PI / 360) / 2 + Math.cos(2 * f * Math.PI / 360) / 2), r = c.shadowScale, f = c.shadowScale / i, i = c.shadowOffset, e.transform(\"scale3d(\" + r + \", 1, \" + f + \") translate3d(0px, \" + (a / 2 + i) + \"px, \" + -a / 2 / f + \"px) rotateX(-90deg)\")));\n      d = d.isSafari || d.isWebView ? -l / 2 : 0;\n      n.transform(\"translate3d(0px,0,\" + d + \"px) rotateX(\" + (t.isHorizontal() ? 0 : h) + \"deg) rotateY(\" + (t.isHorizontal() ? -h : 0) + \"deg)\");\n    },\n    setTransition: function setTransition(e) {\n      var t = this.$el;\n      this.slides.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e), this.params.cubeEffect.shadow && !this.isHorizontal() && t.find(\".swiper-cube-shadow\").transition(e);\n    }\n  },\n      re = {\n    setTranslate: function setTranslate() {\n      for (var e = this.slides, t = this.rtlTranslate, i = 0; i < e.length; i += 1) {\n        var n,\n            s,\n            r = e.eq(i),\n            a = r[0].progress,\n            o = -180 * (a = this.params.flipEffect.limitRotation ? Math.max(Math.min(r[0].progress, 1), -1) : a),\n            l = 0,\n            d = -r[0].swiperSlideOffset,\n            c = 0;\n        this.isHorizontal() ? t && (o = -o) : (c = d, l = -o, o = d = 0), r[0].style.zIndex = -Math.abs(Math.round(a)) + e.length, this.params.flipEffect.slideShadows && (n = this.isHorizontal() ? r.find(\".swiper-slide-shadow-left\") : r.find(\".swiper-slide-shadow-top\"), s = this.isHorizontal() ? r.find(\".swiper-slide-shadow-right\") : r.find(\".swiper-slide-shadow-bottom\"), 0 === n.length && (n = S('<div class=\"swiper-slide-shadow-' + (this.isHorizontal() ? \"left\" : \"top\") + '\"></div>'), r.append(n)), 0 === s.length && (s = S('<div class=\"swiper-slide-shadow-' + (this.isHorizontal() ? \"right\" : \"bottom\") + '\"></div>'), r.append(s)), n.length && (n[0].style.opacity = Math.max(-a, 0)), s.length && (s[0].style.opacity = Math.max(a, 0))), r.transform(\"translate3d(\" + d + \"px, \" + c + \"px, 0px) rotateX(\" + l + \"deg) rotateY(\" + o + \"deg)\");\n      }\n    },\n    setTransition: function setTransition(e) {\n      var i,\n          n = this,\n          t = n.slides,\n          s = n.activeIndex,\n          r = n.$wrapperEl;\n      t.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e), n.params.virtualTranslate && 0 !== e && (i = !1, t.eq(s).transitionEnd(function () {\n        if (!i && n && !n.destroyed) {\n          i = !0, n.animating = !1;\n\n          for (var e = [\"webkitTransitionEnd\", \"transitionend\"], t = 0; t < e.length; t += 1) {\n            r.trigger(e[t]);\n          }\n        }\n      }));\n    }\n  },\n      ae = {\n    setTranslate: function setTranslate() {\n      for (var e = this.width, t = this.height, i = this.slides, n = this.slidesSizesGrid, s = this.params.coverflowEffect, r = this.isHorizontal(), a = this.translate, o = r ? e / 2 - a : t / 2 - a, l = r ? s.rotate : -s.rotate, d = s.depth, c = 0, u = i.length; c < u; c += 1) {\n        var p = i.eq(c),\n            h = n[c],\n            f = (o - p[0].swiperSlideOffset - h / 2) / h * s.modifier,\n            m = r ? l * f : 0,\n            v = r ? 0 : l * f,\n            g = -d * Math.abs(f),\n            y = s.stretch;\n        \"string\" == typeof y && -1 !== y.indexOf(\"%\") && (y = parseFloat(s.stretch) / 100 * h);\n        var b = r ? 0 : y * f,\n            h = r ? y * f : 0,\n            y = 1 - (1 - s.scale) * Math.abs(f);\n        Math.abs(h) < .001 && (h = 0), Math.abs(b) < .001 && (b = 0), Math.abs(g) < .001 && (g = 0), Math.abs(m) < .001 && (m = 0);\n        m = \"translate3d(\" + h + \"px,\" + b + \"px,\" + g + \"px)  rotateX(\" + (v = Math.abs(v) < .001 ? 0 : v) + \"deg) rotateY(\" + m + \"deg) scale(\" + (y = Math.abs(y) < .001 ? 0 : y) + \")\";\n        p.transform(m), p[0].style.zIndex = 1 - Math.abs(Math.round(f)), s.slideShadows && (y = r ? p.find(\".swiper-slide-shadow-left\") : p.find(\".swiper-slide-shadow-top\"), m = r ? p.find(\".swiper-slide-shadow-right\") : p.find(\".swiper-slide-shadow-bottom\"), 0 === y.length && (y = S('<div class=\"swiper-slide-shadow-' + (r ? \"left\" : \"top\") + '\"></div>'), p.append(y)), 0 === m.length && (m = S('<div class=\"swiper-slide-shadow-' + (r ? \"right\" : \"bottom\") + '\"></div>'), p.append(m)), y.length && (y[0].style.opacity = 0 < f ? f : 0), m.length && (m[0].style.opacity = 0 < -f ? -f : 0));\n      }\n    },\n    setTransition: function setTransition(e) {\n      this.slides.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e);\n    }\n  },\n      oe = {\n    init: function init() {\n      var e = this,\n          t = e.params.thumbs;\n      if (e.thumbs.initialized) return !1;\n      e.thumbs.initialized = !0;\n      var i = e.constructor;\n      return t.swiper instanceof i ? (e.thumbs.swiper = t.swiper, K(e.thumbs.swiper.originalParams, {\n        watchSlidesProgress: !0,\n        slideToClickedSlide: !1\n      }), K(e.thumbs.swiper.params, {\n        watchSlidesProgress: !0,\n        slideToClickedSlide: !1\n      })) : x(t.swiper) && (e.thumbs.swiper = new i(K({}, t.swiper, {\n        watchSlidesVisibility: !0,\n        watchSlidesProgress: !0,\n        slideToClickedSlide: !1\n      })), e.thumbs.swiperCreated = !0), e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass), e.thumbs.swiper.on(\"tap\", e.thumbs.onThumbClick), !0;\n    },\n    onThumbClick: function onThumbClick() {\n      var e,\n          t,\n          i,\n          n = this,\n          s = n.thumbs.swiper;\n      s && (t = s.clickedIndex, (e = s.clickedSlide) && S(e).hasClass(n.params.thumbs.slideThumbActiveClass) || null == t || (i = s.params.loop ? parseInt(S(s.clickedSlide).attr(\"data-swiper-slide-index\"), 10) : t, n.params.loop && (e = n.activeIndex, n.slides.eq(e).hasClass(n.params.slideDuplicateClass) && (n.loopFix(), n._clientLeft = n.$wrapperEl[0].clientLeft, e = n.activeIndex), s = n.slides.eq(e).prevAll('[data-swiper-slide-index=\"' + i + '\"]').eq(0).index(), t = n.slides.eq(e).nextAll('[data-swiper-slide-index=\"' + i + '\"]').eq(0).index(), i = void 0 === s || void 0 !== t && t - e < e - s ? t : s), n.slideTo(i)));\n    },\n    update: function update(e) {\n      var t = this,\n          i = t.thumbs.swiper;\n\n      if (i) {\n        var n,\n            s,\n            r,\n            a = \"auto\" === i.params.slidesPerView ? i.slidesPerViewDynamic() : i.params.slidesPerView,\n            o = t.params.thumbs.autoScrollOffset,\n            l = o && !i.params.loop;\n        t.realIndex === i.realIndex && !l || (n = i.activeIndex, r = i.params.loop ? (i.slides.eq(n).hasClass(i.params.slideDuplicateClass) && (i.loopFix(), i._clientLeft = i.$wrapperEl[0].clientLeft, n = i.activeIndex), r = i.slides.eq(n).prevAll('[data-swiper-slide-index=\"' + t.realIndex + '\"]').eq(0).index(), s = i.slides.eq(n).nextAll('[data-swiper-slide-index=\"' + t.realIndex + '\"]').eq(0).index(), s = void 0 === r ? s : void 0 === s ? r : s - n == n - r ? n : s - n < n - r ? s : r, t.activeIndex > t.previousIndex ? \"next\" : \"prev\") : (s = t.realIndex) > t.previousIndex ? \"next\" : \"prev\", l && (s += \"next\" === r ? o : -1 * o), i.visibleSlidesIndexes && i.visibleSlidesIndexes.indexOf(s) < 0 && (i.params.centeredSlides ? s = n < s ? s - Math.floor(a / 2) + 1 : s + Math.floor(a / 2) - 1 : n < s && (s = s - a + 1), i.slideTo(s, e ? 0 : void 0)));\n        var d = 1,\n            c = t.params.thumbs.slideThumbActiveClass;\n        if (1 < t.params.slidesPerView && !t.params.centeredSlides && (d = t.params.slidesPerView), t.params.thumbs.multipleActiveThumbs || (d = 1), d = Math.floor(d), i.slides.removeClass(c), i.params.loop || i.params.virtual && i.params.virtual.enabled) for (var u = 0; u < d; u += 1) {\n          i.$wrapperEl.children('[data-swiper-slide-index=\"' + (t.realIndex + u) + '\"]').addClass(c);\n        } else for (var p = 0; p < d; p += 1) {\n          i.slides.eq(t.realIndex + p).addClass(c);\n        }\n      }\n    }\n  },\n      A = [$, A, {\n    name: \"mousewheel\",\n    params: {\n      mousewheel: {\n        enabled: !1,\n        releaseOnEdges: !1,\n        invert: !1,\n        forceToAxis: !1,\n        sensitivity: 1,\n        eventsTarget: \"container\",\n        thresholdDelta: null,\n        thresholdTime: null\n      }\n    },\n    create: function create() {\n      T(this, {\n        mousewheel: {\n          enabled: !1,\n          lastScrollTime: k(),\n          lastEventBeforeSnap: void 0,\n          recentWheelEvents: [],\n          enable: F.enable,\n          disable: F.disable,\n          handle: F.handle,\n          handleMouseEnter: F.handleMouseEnter,\n          handleMouseLeave: F.handleMouseLeave,\n          animateSlider: F.animateSlider,\n          releaseScroll: F.releaseScroll\n        }\n      });\n    },\n    on: {\n      init: function init(e) {\n        !e.params.mousewheel.enabled && e.params.cssMode && e.mousewheel.disable(), e.params.mousewheel.enabled && e.mousewheel.enable();\n      },\n      destroy: function destroy(e) {\n        e.params.cssMode && e.mousewheel.enable(), e.mousewheel.enabled && e.mousewheel.disable();\n      }\n    }\n  }, {\n    name: \"navigation\",\n    params: {\n      navigation: {\n        nextEl: null,\n        prevEl: null,\n        hideOnClick: !1,\n        disabledClass: \"swiper-button-disabled\",\n        hiddenClass: \"swiper-button-hidden\",\n        lockClass: \"swiper-button-lock\"\n      }\n    },\n    create: function create() {\n      T(this, {\n        navigation: t({}, G)\n      });\n    },\n    on: {\n      init: function init(e) {\n        e.navigation.init(), e.navigation.update();\n      },\n      toEdge: function toEdge(e) {\n        e.navigation.update();\n      },\n      fromEdge: function fromEdge(e) {\n        e.navigation.update();\n      },\n      destroy: function destroy(e) {\n        e.navigation.destroy();\n      },\n      click: function click(e, t) {\n        var i,\n            n = e.navigation,\n            s = n.$nextEl,\n            n = n.$prevEl;\n        !e.params.navigation.hideOnClick || S(t.target).is(n) || S(t.target).is(s) || (s ? i = s.hasClass(e.params.navigation.hiddenClass) : n && (i = n.hasClass(e.params.navigation.hiddenClass)), !0 === i ? e.emit(\"navigationShow\") : e.emit(\"navigationHide\"), s && s.toggleClass(e.params.navigation.hiddenClass), n && n.toggleClass(e.params.navigation.hiddenClass));\n      }\n    }\n  }, {\n    name: \"pagination\",\n    params: {\n      pagination: {\n        el: null,\n        bulletElement: \"span\",\n        clickable: !1,\n        hideOnClick: !1,\n        renderBullet: null,\n        renderProgressbar: null,\n        renderFraction: null,\n        renderCustom: null,\n        progressbarOpposite: !1,\n        type: \"bullets\",\n        dynamicBullets: !1,\n        dynamicMainBullets: 1,\n        formatFractionCurrent: function formatFractionCurrent(e) {\n          return e;\n        },\n        formatFractionTotal: function formatFractionTotal(e) {\n          return e;\n        },\n        bulletClass: \"swiper-pagination-bullet\",\n        bulletActiveClass: \"swiper-pagination-bullet-active\",\n        modifierClass: \"swiper-pagination-\",\n        currentClass: \"swiper-pagination-current\",\n        totalClass: \"swiper-pagination-total\",\n        hiddenClass: \"swiper-pagination-hidden\",\n        progressbarFillClass: \"swiper-pagination-progressbar-fill\",\n        progressbarOppositeClass: \"swiper-pagination-progressbar-opposite\",\n        clickableClass: \"swiper-pagination-clickable\",\n        lockClass: \"swiper-pagination-lock\"\n      }\n    },\n    create: function create() {\n      T(this, {\n        pagination: t({\n          dynamicBulletIndex: 0\n        }, X)\n      });\n    },\n    on: {\n      init: function init(e) {\n        e.pagination.init(), e.pagination.render(), e.pagination.update();\n      },\n      activeIndexChange: function activeIndexChange(e) {\n        !e.params.loop && void 0 !== e.snapIndex || e.pagination.update();\n      },\n      snapIndexChange: function snapIndexChange(e) {\n        e.params.loop || e.pagination.update();\n      },\n      slidesLengthChange: function slidesLengthChange(e) {\n        e.params.loop && (e.pagination.render(), e.pagination.update());\n      },\n      snapGridLengthChange: function snapGridLengthChange(e) {\n        e.params.loop || (e.pagination.render(), e.pagination.update());\n      },\n      destroy: function destroy(e) {\n        e.pagination.destroy();\n      },\n      click: function click(e, t) {\n        e.params.pagination.el && e.params.pagination.hideOnClick && 0 < e.pagination.$el.length && !S(t.target).hasClass(e.params.pagination.bulletClass) && (!0 === e.pagination.$el.hasClass(e.params.pagination.hiddenClass) ? e.emit(\"paginationShow\") : e.emit(\"paginationHide\"), e.pagination.$el.toggleClass(e.params.pagination.hiddenClass));\n      }\n    }\n  }, {\n    name: \"scrollbar\",\n    params: {\n      scrollbar: {\n        el: null,\n        dragSize: \"auto\",\n        hide: !1,\n        draggable: !1,\n        snapOnRelease: !0,\n        lockClass: \"swiper-scrollbar-lock\",\n        dragClass: \"swiper-scrollbar-drag\"\n      }\n    },\n    create: function create() {\n      T(this, {\n        scrollbar: t({\n          isTouched: !1,\n          timeout: null,\n          dragTimeout: null\n        }, Y)\n      });\n    },\n    on: {\n      init: function init(e) {\n        e.scrollbar.init(), e.scrollbar.updateSize(), e.scrollbar.setTranslate();\n      },\n      update: function update(e) {\n        e.scrollbar.updateSize();\n      },\n      resize: function resize(e) {\n        e.scrollbar.updateSize();\n      },\n      observerUpdate: function observerUpdate(e) {\n        e.scrollbar.updateSize();\n      },\n      setTranslate: function setTranslate(e) {\n        e.scrollbar.setTranslate();\n      },\n      setTransition: function setTransition(e, t) {\n        e.scrollbar.setTransition(t);\n      },\n      destroy: function destroy(e) {\n        e.scrollbar.destroy();\n      }\n    }\n  }, {\n    name: \"parallax\",\n    params: {\n      parallax: {\n        enabled: !1\n      }\n    },\n    create: function create() {\n      T(this, {\n        parallax: t({}, V)\n      });\n    },\n    on: {\n      beforeInit: function beforeInit(e) {\n        e.params.parallax.enabled && (e.params.watchSlidesProgress = !0, e.originalParams.watchSlidesProgress = !0);\n      },\n      init: function init(e) {\n        e.params.parallax.enabled && e.parallax.setTranslate();\n      },\n      setTranslate: function setTranslate(e) {\n        e.params.parallax.enabled && e.parallax.setTranslate();\n      },\n      setTransition: function setTransition(e, t) {\n        e.params.parallax.enabled && e.parallax.setTransition(t);\n      }\n    }\n  }, {\n    name: \"zoom\",\n    params: {\n      zoom: {\n        enabled: !1,\n        maxRatio: 3,\n        minRatio: 1,\n        toggle: !0,\n        containerClass: \"swiper-zoom-container\",\n        zoomedSlideClass: \"swiper-slide-zoomed\"\n      }\n    },\n    create: function create() {\n      var n = this;\n      T(n, {\n        zoom: t({\n          enabled: !1,\n          scale: 1,\n          currentScale: 1,\n          isScaling: !1,\n          gesture: {\n            $slideEl: void 0,\n            slideWidth: void 0,\n            slideHeight: void 0,\n            $imageEl: void 0,\n            $imageWrapEl: void 0,\n            maxRatio: 3\n          },\n          image: {\n            isTouched: void 0,\n            isMoved: void 0,\n            currentX: void 0,\n            currentY: void 0,\n            minX: void 0,\n            minY: void 0,\n            maxX: void 0,\n            maxY: void 0,\n            width: void 0,\n            height: void 0,\n            startX: void 0,\n            startY: void 0,\n            touchesStart: {},\n            touchesCurrent: {}\n          },\n          velocity: {\n            x: void 0,\n            y: void 0,\n            prevPositionX: void 0,\n            prevPositionY: void 0,\n            prevTime: void 0\n          }\n        }, _)\n      });\n      var s = 1;\n      Object.defineProperty(n.zoom, \"scale\", {\n        get: function get() {\n          return s;\n        },\n        set: function set(e) {\n          var t, i;\n          s !== e && (t = n.zoom.gesture.$imageEl ? n.zoom.gesture.$imageEl[0] : void 0, i = n.zoom.gesture.$slideEl ? n.zoom.gesture.$slideEl[0] : void 0, n.emit(\"zoomChange\", e, t, i)), s = e;\n        }\n      });\n    },\n    on: {\n      init: function init(e) {\n        e.params.zoom.enabled && e.zoom.enable();\n      },\n      destroy: function destroy(e) {\n        e.zoom.disable();\n      },\n      touchStart: function touchStart(e, t) {\n        e.zoom.enabled && e.zoom.onTouchStart(t);\n      },\n      touchEnd: function touchEnd(e, t) {\n        e.zoom.enabled && e.zoom.onTouchEnd(t);\n      },\n      doubleTap: function doubleTap(e, t) {\n        e.params.zoom.enabled && e.zoom.enabled && e.params.zoom.toggle && e.zoom.toggle(t);\n      },\n      transitionEnd: function transitionEnd(e) {\n        e.zoom.enabled && e.params.zoom.enabled && e.zoom.onTransitionEnd();\n      },\n      slideChange: function slideChange(e) {\n        e.zoom.enabled && e.params.zoom.enabled && e.params.cssMode && e.zoom.onTransitionEnd();\n      }\n    }\n  }, {\n    name: \"lazy\",\n    params: {\n      lazy: {\n        checkInView: !1,\n        enabled: !1,\n        loadPrevNext: !1,\n        loadPrevNextAmount: 1,\n        loadOnTransitionStart: !1,\n        scrollingElement: \"\",\n        elementClass: \"swiper-lazy\",\n        loadingClass: \"swiper-lazy-loading\",\n        loadedClass: \"swiper-lazy-loaded\",\n        preloaderClass: \"swiper-lazy-preloader\"\n      }\n    },\n    create: function create() {\n      T(this, {\n        lazy: t({\n          initialImageLoaded: !1\n        }, Q)\n      });\n    },\n    on: {\n      beforeInit: function beforeInit(e) {\n        e.params.lazy.enabled && e.params.preloadImages && (e.params.preloadImages = !1);\n      },\n      init: function init(e) {\n        e.params.lazy.enabled && !e.params.loop && 0 === e.params.initialSlide && (e.params.lazy.checkInView ? e.lazy.checkInViewOnLoad() : e.lazy.load());\n      },\n      scroll: function scroll(e) {\n        e.params.freeMode && !e.params.freeModeSticky && e.lazy.load();\n      },\n      resize: function resize(e) {\n        e.params.lazy.enabled && e.lazy.load();\n      },\n      scrollbarDragMove: function scrollbarDragMove(e) {\n        e.params.lazy.enabled && e.lazy.load();\n      },\n      transitionStart: function transitionStart(e) {\n        e.params.lazy.enabled && (e.params.lazy.loadOnTransitionStart || !e.params.lazy.loadOnTransitionStart && !e.lazy.initialImageLoaded) && e.lazy.load();\n      },\n      transitionEnd: function transitionEnd(e) {\n        e.params.lazy.enabled && !e.params.lazy.loadOnTransitionStart && e.lazy.load();\n      },\n      slideChange: function slideChange(e) {\n        e.params.lazy.enabled && e.params.cssMode && e.lazy.load();\n      }\n    }\n  }, {\n    name: \"controller\",\n    params: {\n      controller: {\n        control: void 0,\n        inverse: !1,\n        by: \"slide\"\n      }\n    },\n    create: function create() {\n      T(this, {\n        controller: t({\n          control: this.params.controller.control\n        }, J)\n      });\n    },\n    on: {\n      update: function update(e) {\n        e.controller.control && e.controller.spline && (e.controller.spline = void 0, delete e.controller.spline);\n      },\n      resize: function resize(e) {\n        e.controller.control && e.controller.spline && (e.controller.spline = void 0, delete e.controller.spline);\n      },\n      observerUpdate: function observerUpdate(e) {\n        e.controller.control && e.controller.spline && (e.controller.spline = void 0, delete e.controller.spline);\n      },\n      setTranslate: function setTranslate(e, t, i) {\n        e.controller.control && e.controller.setTranslate(t, i);\n      },\n      setTransition: function setTransition(e, t, i) {\n        e.controller.control && e.controller.setTransition(t, i);\n      }\n    }\n  }, {\n    name: \"a11y\",\n    params: {\n      a11y: {\n        enabled: !0,\n        notificationClass: \"swiper-notification\",\n        prevSlideMessage: \"Previous slide\",\n        nextSlideMessage: \"Next slide\",\n        firstSlideMessage: \"This is the first slide\",\n        lastSlideMessage: \"This is the last slide\",\n        paginationBulletMessage: \"Go to slide {{index}}\",\n        containerMessage: null,\n        containerRoleDescriptionMessage: null,\n        itemRoleDescriptionMessage: null\n      }\n    },\n    create: function create() {\n      T(this, {\n        a11y: t({}, Z, {\n          liveRegion: S('<span class=\"' + this.params.a11y.notificationClass + '\" aria-live=\"assertive\" aria-atomic=\"true\"></span>')\n        })\n      });\n    },\n    on: {\n      afterInit: function afterInit(e) {\n        e.params.a11y.enabled && (e.a11y.init(), e.a11y.updateNavigation());\n      },\n      toEdge: function toEdge(e) {\n        e.params.a11y.enabled && e.a11y.updateNavigation();\n      },\n      fromEdge: function fromEdge(e) {\n        e.params.a11y.enabled && e.a11y.updateNavigation();\n      },\n      paginationUpdate: function paginationUpdate(e) {\n        e.params.a11y.enabled && e.a11y.updatePagination();\n      },\n      destroy: function destroy(e) {\n        e.params.a11y.enabled && e.a11y.destroy();\n      }\n    }\n  }, {\n    name: \"history\",\n    params: {\n      history: {\n        enabled: !1,\n        replaceState: !1,\n        key: \"slides\"\n      }\n    },\n    create: function create() {\n      T(this, {\n        history: t({}, ee)\n      });\n    },\n    on: {\n      init: function init(e) {\n        e.params.history.enabled && e.history.init();\n      },\n      destroy: function destroy(e) {\n        e.params.history.enabled && e.history.destroy();\n      },\n      transitionEnd: function transitionEnd(e) {\n        e.history.initialized && e.history.setHistory(e.params.history.key, e.activeIndex);\n      },\n      slideChange: function slideChange(e) {\n        e.history.initialized && e.params.cssMode && e.history.setHistory(e.params.history.key, e.activeIndex);\n      }\n    }\n  }, {\n    name: \"hash-navigation\",\n    params: {\n      hashNavigation: {\n        enabled: !1,\n        replaceState: !1,\n        watchState: !1\n      }\n    },\n    create: function create() {\n      T(this, {\n        hashNavigation: t({\n          initialized: !1\n        }, te)\n      });\n    },\n    on: {\n      init: function init(e) {\n        e.params.hashNavigation.enabled && e.hashNavigation.init();\n      },\n      destroy: function destroy(e) {\n        e.params.hashNavigation.enabled && e.hashNavigation.destroy();\n      },\n      transitionEnd: function transitionEnd(e) {\n        e.hashNavigation.initialized && e.hashNavigation.setHash();\n      },\n      slideChange: function slideChange(e) {\n        e.hashNavigation.initialized && e.params.cssMode && e.hashNavigation.setHash();\n      }\n    }\n  }, {\n    name: \"autoplay\",\n    params: {\n      autoplay: {\n        enabled: !1,\n        delay: 3e3,\n        waitForTransition: !0,\n        disableOnInteraction: !0,\n        stopOnLastSlide: !1,\n        reverseDirection: !1\n      }\n    },\n    create: function create() {\n      T(this, {\n        autoplay: t({}, ie, {\n          running: !1,\n          paused: !1\n        })\n      });\n    },\n    on: {\n      init: function init(e) {\n        e.params.autoplay.enabled && (e.autoplay.start(), y().addEventListener(\"visibilitychange\", e.autoplay.onVisibilityChange));\n      },\n      beforeTransitionStart: function beforeTransitionStart(e, t, i) {\n        e.autoplay.running && (i || !e.params.autoplay.disableOnInteraction ? e.autoplay.pause(t) : e.autoplay.stop());\n      },\n      sliderFirstMove: function sliderFirstMove(e) {\n        e.autoplay.running && (e.params.autoplay.disableOnInteraction ? e.autoplay.stop() : e.autoplay.pause());\n      },\n      touchEnd: function touchEnd(e) {\n        e.params.cssMode && e.autoplay.paused && !e.params.autoplay.disableOnInteraction && e.autoplay.run();\n      },\n      destroy: function destroy(e) {\n        e.autoplay.running && e.autoplay.stop(), y().removeEventListener(\"visibilitychange\", e.autoplay.onVisibilityChange);\n      }\n    }\n  }, {\n    name: \"effect-fade\",\n    params: {\n      fadeEffect: {\n        crossFade: !1\n      }\n    },\n    create: function create() {\n      T(this, {\n        fadeEffect: t({}, ne)\n      });\n    },\n    on: {\n      beforeInit: function beforeInit(e) {\n        var t;\n        \"fade\" === e.params.effect && (e.classNames.push(e.params.containerModifierClass + \"fade\"), t = {\n          slidesPerView: 1,\n          slidesPerColumn: 1,\n          slidesPerGroup: 1,\n          watchSlidesProgress: !0,\n          spaceBetween: 0,\n          virtualTranslate: !0\n        }, K(e.params, t), K(e.originalParams, t));\n      },\n      setTranslate: function setTranslate(e) {\n        \"fade\" === e.params.effect && e.fadeEffect.setTranslate();\n      },\n      setTransition: function setTransition(e, t) {\n        \"fade\" === e.params.effect && e.fadeEffect.setTransition(t);\n      }\n    }\n  }, {\n    name: \"effect-cube\",\n    params: {\n      cubeEffect: {\n        slideShadows: !0,\n        shadow: !0,\n        shadowOffset: 20,\n        shadowScale: .94\n      }\n    },\n    create: function create() {\n      T(this, {\n        cubeEffect: t({}, se)\n      });\n    },\n    on: {\n      beforeInit: function beforeInit(e) {\n        var t;\n        \"cube\" === e.params.effect && (e.classNames.push(e.params.containerModifierClass + \"cube\"), e.classNames.push(e.params.containerModifierClass + \"3d\"), t = {\n          slidesPerView: 1,\n          slidesPerColumn: 1,\n          slidesPerGroup: 1,\n          watchSlidesProgress: !0,\n          resistanceRatio: 0,\n          spaceBetween: 0,\n          centeredSlides: !1,\n          virtualTranslate: !0\n        }, K(e.params, t), K(e.originalParams, t));\n      },\n      setTranslate: function setTranslate(e) {\n        \"cube\" === e.params.effect && e.cubeEffect.setTranslate();\n      },\n      setTransition: function setTransition(e, t) {\n        \"cube\" === e.params.effect && e.cubeEffect.setTransition(t);\n      }\n    }\n  }, {\n    name: \"effect-flip\",\n    params: {\n      flipEffect: {\n        slideShadows: !0,\n        limitRotation: !0\n      }\n    },\n    create: function create() {\n      T(this, {\n        flipEffect: t({}, re)\n      });\n    },\n    on: {\n      beforeInit: function beforeInit(e) {\n        var t;\n        \"flip\" === e.params.effect && (e.classNames.push(e.params.containerModifierClass + \"flip\"), e.classNames.push(e.params.containerModifierClass + \"3d\"), t = {\n          slidesPerView: 1,\n          slidesPerColumn: 1,\n          slidesPerGroup: 1,\n          watchSlidesProgress: !0,\n          spaceBetween: 0,\n          virtualTranslate: !0\n        }, K(e.params, t), K(e.originalParams, t));\n      },\n      setTranslate: function setTranslate(e) {\n        \"flip\" === e.params.effect && e.flipEffect.setTranslate();\n      },\n      setTransition: function setTransition(e, t) {\n        \"flip\" === e.params.effect && e.flipEffect.setTransition(t);\n      }\n    }\n  }, {\n    name: \"effect-coverflow\",\n    params: {\n      coverflowEffect: {\n        rotate: 50,\n        stretch: 0,\n        depth: 100,\n        scale: 1,\n        modifier: 1,\n        slideShadows: !0\n      }\n    },\n    create: function create() {\n      T(this, {\n        coverflowEffect: t({}, ae)\n      });\n    },\n    on: {\n      beforeInit: function beforeInit(e) {\n        \"coverflow\" === e.params.effect && (e.classNames.push(e.params.containerModifierClass + \"coverflow\"), e.classNames.push(e.params.containerModifierClass + \"3d\"), e.params.watchSlidesProgress = !0, e.originalParams.watchSlidesProgress = !0);\n      },\n      setTranslate: function setTranslate(e) {\n        \"coverflow\" === e.params.effect && e.coverflowEffect.setTranslate();\n      },\n      setTransition: function setTransition(e, t) {\n        \"coverflow\" === e.params.effect && e.coverflowEffect.setTransition(t);\n      }\n    }\n  }, {\n    name: \"thumbs\",\n    params: {\n      thumbs: {\n        swiper: null,\n        multipleActiveThumbs: !0,\n        autoScrollOffset: 0,\n        slideThumbActiveClass: \"swiper-slide-thumb-active\",\n        thumbsContainerClass: \"swiper-container-thumbs\"\n      }\n    },\n    create: function create() {\n      T(this, {\n        thumbs: t({\n          swiper: null,\n          initialized: !1\n        }, oe)\n      });\n    },\n    on: {\n      beforeInit: function beforeInit(e) {\n        var t = e.params.thumbs;\n        t && t.swiper && (e.thumbs.init(), e.thumbs.update(!0));\n      },\n      slideChange: function slideChange(e) {\n        e.thumbs.swiper && e.thumbs.update();\n      },\n      update: function update(e) {\n        e.thumbs.swiper && e.thumbs.update();\n      },\n      resize: function resize(e) {\n        e.thumbs.swiper && e.thumbs.update();\n      },\n      observerUpdate: function observerUpdate(e) {\n        e.thumbs.swiper && e.thumbs.update();\n      },\n      setTransition: function setTransition(e, t) {\n        e = e.thumbs.swiper;\n        e && e.setTransition(t);\n      },\n      beforeDestroy: function beforeDestroy(e) {\n        var t = e.thumbs.swiper;\n        t && e.thumbs.swiperCreated && t && t.destroy();\n      }\n    }\n  }];\n  return q.use(A), q;\n}, \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0, $(document).ready(function () {\n  $(\".main-page .new-collection, .page-single-product .new-collection\").length && jQuery(document).ready(function () {\n    var e = {\n      settings: \"unslick\",\n      arrows: !1,\n      dots: !0,\n      responsive: [{\n        breakpoint: 1e4,\n        settings: \"unslick\"\n      }, {\n        breakpoint: 700,\n        arrows: !1,\n        dots: !0,\n        settings: {\n          slidesToShow: 1\n        }\n      }]\n    };\n    var t = $(\".new-collection__list\").slick(e);\n    $(window).on(\"resize\", function () {\n      $(window).width() <= 700 && !t.hasClass(\"slick-initialized\") && $(\".new-collection__list\").slick(e);\n    });\n  }), $(\".main-slider\").length && new Swiper(\".main-slider\", {\n    slidesPerView: 1,\n    loop: !0,\n    pagination: {\n      el: \".main-slider .swiper-pagination\"\n    }\n  }), $(\".galey-slider\").length && new Swiper(\".galey-slider\", {\n    slidesPerView: 1,\n    loop: !0,\n    pagination: {\n      el: \".galey-slider .swiper-pagination\"\n    }\n  }), $(window).scroll(function () {\n    $(\".header\").toggleClass(\"moved\", 50 < $(this).scrollTop());\n  }), $(\".menu-item-has-children\", \"#category-menu\").hover(function () {\n    $(this).find(\".sub-menu\").fadeIn(300);\n  }, function () {\n    $(this).find(\".sub-menu\").fadeOut(300);\n  }), $(\".explore\").length && $(\".explore .explore__wrapper\").slick({\n    dots: !1,\n    infinite: !0,\n    arrows: !1,\n    speed: 300,\n    slidesToShow: 1,\n    autoplay: !0,\n    autoplaySpeed: 2e3,\n    centerMode: !0,\n    pauseOnHover: !1,\n    variableWidth: !0,\n    responsive: [{\n      breakpoint: 700,\n      slidesToShow: 1,\n      draggable: !0,\n      autoplay: !1,\n      swipeToSlide: !0,\n      touchMove: !0,\n      centerMode: !1,\n      pauseOnHover: !1\n    }]\n  }), $(\".js-mobile-burger\").length && ($(\".js-mobile-burger\").click(function () {\n    $(\"body\").addClass(\"lock-body\"), $(\".header-mobile__menu\").addClass(\"active\");\n  }), $(\".js-button-close\").click(function () {\n    $(\"body\").removeClass(\"lock-body\"), $(\".header-mobile__menu\").removeClass(\"active\");\n  })), $(\".new-collection__sort\").length && $(function () {\n    $(\".new-collection__sort select\").selectric();\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/common.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/common.js");
/******/ 	
/******/ })()
;